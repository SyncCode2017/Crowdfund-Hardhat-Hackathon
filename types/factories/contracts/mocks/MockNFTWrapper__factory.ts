/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  MockNFTWrapper,
  MockNFTWrapperInterface,
} from "../../../contracts/mocks/MockNFTWrapper";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "underlyingNFTAddress_",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5060405161021438038061021483398101604081905261002f91610054565b600080546001600160a01b0319166001600160a01b0392909216919091179055610084565b60006020828403121561006657600080fd5b81516001600160a01b038116811461007d57600080fd5b9392505050565b610181806100936000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c806370a0823114610030575b600080fd5b61004361003e3660046100f5565b610055565b60405190815260200160405180910390f35b600080546040517efdd58e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8481166004830152600160248301529091169062fdd58e90604401602060405180830381865afa1580156100cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100ef9190610132565b92915050565b60006020828403121561010757600080fd5b813573ffffffffffffffffffffffffffffffffffffffff8116811461012b57600080fd5b9392505050565b60006020828403121561014457600080fd5b505191905056fea2646970667358221220e24cbe4b79d64e9179bebe25ead93e851dffa5e816a2e50d002a5aa19506bd8264736f6c63430008100033";

type MockNFTWrapperConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockNFTWrapperConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockNFTWrapper__factory extends ContractFactory {
  constructor(...args: MockNFTWrapperConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    underlyingNFTAddress_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MockNFTWrapper> {
    return super.deploy(
      underlyingNFTAddress_,
      overrides || {}
    ) as Promise<MockNFTWrapper>;
  }
  override getDeployTransaction(
    underlyingNFTAddress_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(underlyingNFTAddress_, overrides || {});
  }
  override attach(address: string): MockNFTWrapper {
    return super.attach(address) as MockNFTWrapper;
  }
  override connect(signer: Signer): MockNFTWrapper__factory {
    return super.connect(signer) as MockNFTWrapper__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockNFTWrapperInterface {
    return new utils.Interface(_abi) as MockNFTWrapperInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockNFTWrapper {
    return new Contract(address, _abi, signerOrProvider) as MockNFTWrapper;
  }
}
