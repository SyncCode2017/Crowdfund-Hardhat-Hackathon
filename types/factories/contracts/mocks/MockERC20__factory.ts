/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  MockERC20,
  MockERC20Interface,
} from "../../../contracts/mocks/MockERC20";

const _abi = [
  {
    inputs: [
      {
        internalType: "address[]",
        name: "accounts",
        type: "address[]",
      },
      {
        internalType: "uint256[]",
        name: "amounts",
        type: "uint256[]",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "InvalidLength",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "subtractedValue",
        type: "uint256",
      },
    ],
    name: "decreaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "addedValue",
        type: "uint256",
      },
    ],
    name: "increaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "mint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040523480156200001157600080fd5b506040516200257b3803806200257b8339818101604052810190620000379190620007e0565b6040518060400160405280600881526020017f446576546f6b656e0000000000000000000000000000000000000000000000008152506040518060400160405280600381526020017f44455600000000000000000000000000000000000000000000000000000000008152508160039081620000b4919062000aa6565b508060049081620000c6919062000aa6565b505050620000e9620000dd6200029960201b60201c565b620002a160201b60201c565b62000105671acf396c09ce6b2b60c01b6200036760201b60201c565b62000121678559db35a82be3b260c01b6200036760201b60201c565b6200013d673962dd00e421b2ac60c01b6200036760201b60201c565b805182511462000195576200016367aa6b5aa67520d84760c01b6200036760201b60201c565b6040517f947d5a8400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b620001b167f65be2a1d988143460c01b6200036760201b60201c565b620001cd6738ec2b7eb9a0e5e860c01b6200036760201b60201c565b620001e967d2685c8e712b0a2d60c01b6200036760201b60201c565b60005b8251811015620002905762000212671ce74bf52c591eb260c01b6200036760201b60201c565b6200022e677a09ae9e461ccecd60c01b6200036760201b60201c565b6200027a83828151811062000248576200024762000b8d565b5b602002602001015183838151811062000266576200026562000b8d565b5b60200260200101516200036a60201b60201c565b8080620002879062000beb565b915050620001ec565b50505062000d24565b600033905090565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b50565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603620003dc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620003d39062000c99565b60405180910390fd5b620003f060008383620004d760201b60201c565b806002600082825462000404919062000cbb565b92505081905550806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051620004b7919062000d07565b60405180910390a3620004d360008383620004dc60201b60201c565b5050565b505050565b505050565b6000604051905090565b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6200054582620004fa565b810181811067ffffffffffffffff821117156200056757620005666200050b565b5b80604052505050565b60006200057c620004e1565b90506200058a82826200053a565b919050565b600067ffffffffffffffff821115620005ad57620005ac6200050b565b5b602082029050602081019050919050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620005f082620005c3565b9050919050565b6200060281620005e3565b81146200060e57600080fd5b50565b6000815190506200062281620005f7565b92915050565b60006200063f62000639846200058f565b62000570565b90508083825260208201905060208402830185811115620006655762000664620005be565b5b835b818110156200069257806200067d888262000611565b84526020840193505060208101905062000667565b5050509392505050565b600082601f830112620006b457620006b3620004f5565b5b8151620006c684826020860162000628565b91505092915050565b600067ffffffffffffffff821115620006ed57620006ec6200050b565b5b602082029050602081019050919050565b6000819050919050565b6200071381620006fe565b81146200071f57600080fd5b50565b600081519050620007338162000708565b92915050565b6000620007506200074a84620006cf565b62000570565b90508083825260208201905060208402830185811115620007765762000775620005be565b5b835b81811015620007a357806200078e888262000722565b84526020840193505060208101905062000778565b5050509392505050565b600082601f830112620007c557620007c4620004f5565b5b8151620007d784826020860162000739565b91505092915050565b60008060408385031215620007fa57620007f9620004eb565b5b600083015167ffffffffffffffff8111156200081b576200081a620004f0565b5b62000829858286016200069c565b925050602083015167ffffffffffffffff8111156200084d576200084c620004f0565b5b6200085b85828601620007ad565b9150509250929050565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680620008b857607f821691505b602082108103620008ce57620008cd62000870565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620009387fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82620008f9565b620009448683620008f9565b95508019841693508086168417925050509392505050565b6000819050919050565b600062000987620009816200097b84620006fe565b6200095c565b620006fe565b9050919050565b6000819050919050565b620009a38362000966565b620009bb620009b2826200098e565b84845462000906565b825550505050565b600090565b620009d2620009c3565b620009df81848462000998565b505050565b5b8181101562000a0757620009fb600082620009c8565b600181019050620009e5565b5050565b601f82111562000a565762000a2081620008d4565b62000a2b84620008e9565b8101602085101562000a3b578190505b62000a5362000a4a85620008e9565b830182620009e4565b50505b505050565b600082821c905092915050565b600062000a7b6000198460080262000a5b565b1980831691505092915050565b600062000a96838362000a68565b9150826002028217905092915050565b62000ab18262000865565b67ffffffffffffffff81111562000acd5762000acc6200050b565b5b62000ad982546200089f565b62000ae682828562000a0b565b600060209050601f83116001811462000b1e576000841562000b09578287015190505b62000b15858262000a88565b86555062000b85565b601f19841662000b2e86620008d4565b60005b8281101562000b585784890151825560018201915060208501945060208101905062000b31565b8683101562000b78578489015162000b74601f89168262000a68565b8355505b6001600288020188555050505b505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600062000bf882620006fe565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820362000c2d5762000c2c62000bbc565b5b600182019050919050565b600082825260208201905092915050565b7f45524332303a206d696e7420746f20746865207a65726f206164647265737300600082015250565b600062000c81601f8362000c38565b915062000c8e8262000c49565b602082019050919050565b6000602082019050818103600083015262000cb48162000c72565b9050919050565b600062000cc882620006fe565b915062000cd583620006fe565b925082820190508082111562000cf05762000cef62000bbc565b5b92915050565b62000d0181620006fe565b82525050565b600060208201905062000d1e600083018462000cf6565b92915050565b6118478062000d346000396000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c806370a0823111610097578063a457c2d711610066578063a457c2d714610276578063a9059cbb146102a6578063dd62ed3e146102d6578063f2fde38b14610306576100f5565b806370a0823114610200578063715018a6146102305780638da5cb5b1461023a57806395d89b4114610258576100f5565b806323b872dd116100d357806323b872dd14610166578063313ce5671461019657806339509351146101b457806340c10f19146101e4576100f5565b806306fdde03146100fa578063095ea7b31461011857806318160ddd14610148575b600080fd5b610102610322565b60405161010f9190610f90565b60405180910390f35b610132600480360381019061012d919061104b565b6103b4565b60405161013f91906110a6565b60405180910390f35b6101506103d7565b60405161015d91906110d0565b60405180910390f35b610180600480360381019061017b91906110eb565b6103e1565b60405161018d91906110a6565b60405180910390f35b61019e610410565b6040516101ab919061115a565b60405180910390f35b6101ce60048036038101906101c9919061104b565b610419565b6040516101db91906110a6565b60405180910390f35b6101fe60048036038101906101f9919061104b565b610450565b005b61021a60048036038101906102159190611175565b6104ca565b60405161022791906110d0565b60405180910390f35b610238610512565b005b610242610526565b60405161024f91906111b1565b60405180910390f35b610260610550565b60405161026d9190610f90565b60405180910390f35b610290600480360381019061028b919061104b565b6105e2565b60405161029d91906110a6565b60405180910390f35b6102c060048036038101906102bb919061104b565b610659565b6040516102cd91906110a6565b60405180910390f35b6102f060048036038101906102eb91906111cc565b61067c565b6040516102fd91906110d0565b60405180910390f35b610320600480360381019061031b9190611175565b610703565b005b6060600380546103319061123b565b80601f016020809104026020016040519081016040528092919081815260200182805461035d9061123b565b80156103aa5780601f1061037f576101008083540402835291602001916103aa565b820191906000526020600020905b81548152906001019060200180831161038d57829003601f168201915b5050505050905090565b6000806103bf610786565b90506103cc81858561078e565b600191505092915050565b6000600254905090565b6000806103ec610786565b90506103f9858285610957565b6104048585856109e3565b60019150509392505050565b60006012905090565b600080610424610786565b9050610445818585610436858961067c565b610440919061129b565b61078e565b600191505092915050565b61046467b65d6263b753fab860c01b610c59565b61046c610c5c565b61048067f74acd9949e1f22060c01b610c59565b61049467ff75bdc9f00f634760c01b610c59565b6104a867bab78a12a91ee86e60c01b610c59565b6104bc67698ce30e0ff9e2b560c01b610c59565b6104c68282610cda565b5050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b61051a610c5c565b6105246000610e30565b565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60606004805461055f9061123b565b80601f016020809104026020016040519081016040528092919081815260200182805461058b9061123b565b80156105d85780601f106105ad576101008083540402835291602001916105d8565b820191906000526020600020905b8154815290600101906020018083116105bb57829003601f168201915b5050505050905090565b6000806105ed610786565b905060006105fb828661067c565b905083811015610640576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161063790611341565b60405180910390fd5b61064d828686840361078e565b60019250505092915050565b600080610664610786565b90506106718185856109e3565b600191505092915050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b61070b610c5c565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361077a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610771906113d3565b60405180910390fd5b61078381610e30565b50565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036107fd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107f490611465565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361086c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610863906114f7565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258360405161094a91906110d0565b60405180910390a3505050565b6000610963848461067c565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146109dd57818110156109cf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109c690611563565b60405180910390fd5b6109dc848484840361078e565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610a52576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a49906115f5565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610ac1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ab890611687565b60405180910390fd5b610acc838383610ef6565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015610b52576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b4990611719565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610c4091906110d0565b60405180910390a3610c53848484610efb565b50505050565b50565b610c64610786565b73ffffffffffffffffffffffffffffffffffffffff16610c82610526565b73ffffffffffffffffffffffffffffffffffffffff1614610cd8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ccf90611785565b60405180910390fd5b565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610d49576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d40906117f1565b60405180910390fd5b610d5560008383610ef6565b8060026000828254610d67919061129b565b92505081905550806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051610e1891906110d0565b60405180910390a3610e2c60008383610efb565b5050565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b505050565b505050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610f3a578082015181840152602081019050610f1f565b60008484015250505050565b6000601f19601f8301169050919050565b6000610f6282610f00565b610f6c8185610f0b565b9350610f7c818560208601610f1c565b610f8581610f46565b840191505092915050565b60006020820190508181036000830152610faa8184610f57565b905092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610fe282610fb7565b9050919050565b610ff281610fd7565b8114610ffd57600080fd5b50565b60008135905061100f81610fe9565b92915050565b6000819050919050565b61102881611015565b811461103357600080fd5b50565b6000813590506110458161101f565b92915050565b6000806040838503121561106257611061610fb2565b5b600061107085828601611000565b925050602061108185828601611036565b9150509250929050565b60008115159050919050565b6110a08161108b565b82525050565b60006020820190506110bb6000830184611097565b92915050565b6110ca81611015565b82525050565b60006020820190506110e560008301846110c1565b92915050565b60008060006060848603121561110457611103610fb2565b5b600061111286828701611000565b935050602061112386828701611000565b925050604061113486828701611036565b9150509250925092565b600060ff82169050919050565b6111548161113e565b82525050565b600060208201905061116f600083018461114b565b92915050565b60006020828403121561118b5761118a610fb2565b5b600061119984828501611000565b91505092915050565b6111ab81610fd7565b82525050565b60006020820190506111c660008301846111a2565b92915050565b600080604083850312156111e3576111e2610fb2565b5b60006111f185828601611000565b925050602061120285828601611000565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061125357607f821691505b6020821081036112665761126561120c565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006112a682611015565b91506112b183611015565b92508282019050808211156112c9576112c861126c565b5b92915050565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b600061132b602583610f0b565b9150611336826112cf565b604082019050919050565b6000602082019050818103600083015261135a8161131e565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006113bd602683610f0b565b91506113c882611361565b604082019050919050565b600060208201905081810360008301526113ec816113b0565b9050919050565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b600061144f602483610f0b565b915061145a826113f3565b604082019050919050565b6000602082019050818103600083015261147e81611442565b9050919050565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b60006114e1602283610f0b565b91506114ec82611485565b604082019050919050565b60006020820190508181036000830152611510816114d4565b9050919050565b7f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000600082015250565b600061154d601d83610f0b565b915061155882611517565b602082019050919050565b6000602082019050818103600083015261157c81611540565b9050919050565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b60006115df602583610f0b565b91506115ea82611583565b604082019050919050565b6000602082019050818103600083015261160e816115d2565b9050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b6000611671602383610f0b565b915061167c82611615565b604082019050919050565b600060208201905081810360008301526116a081611664565b9050919050565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b6000611703602683610f0b565b915061170e826116a7565b604082019050919050565b60006020820190508181036000830152611732816116f6565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b600061176f602083610f0b565b915061177a82611739565b602082019050919050565b6000602082019050818103600083015261179e81611762565b9050919050565b7f45524332303a206d696e7420746f20746865207a65726f206164647265737300600082015250565b60006117db601f83610f0b565b91506117e6826117a5565b602082019050919050565b6000602082019050818103600083015261180a816117ce565b905091905056fea26469706673582212205bb79a56ab18305871ae63c01b8ecacc6e1efe8583bac8dd3294cd303c87bcbf64736f6c63430008110033";

type MockERC20ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockERC20ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockERC20__factory extends ContractFactory {
  constructor(...args: MockERC20ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    accounts: PromiseOrValue<string>[],
    amounts: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MockERC20> {
    return super.deploy(
      accounts,
      amounts,
      overrides || {}
    ) as Promise<MockERC20>;
  }
  override getDeployTransaction(
    accounts: PromiseOrValue<string>[],
    amounts: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(accounts, amounts, overrides || {});
  }
  override attach(address: string): MockERC20 {
    return super.attach(address) as MockERC20;
  }
  override connect(signer: Signer): MockERC20__factory {
    return super.connect(signer) as MockERC20__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockERC20Interface {
    return new utils.Interface(_abi) as MockERC20Interface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockERC20 {
    return new Contract(address, _abi, signerOrProvider) as MockERC20;
  }
}
