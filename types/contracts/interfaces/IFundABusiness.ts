/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BigNumber, Signer, utils } from "ethers";
import type { EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface IFundABusinessInterface extends utils.Interface {
  functions: {};

  events: {
    "ContributionReceived(address,uint256)": EventFragment;
    "ContributionRefunded(address,uint256)": EventFragment;
    "FiatContributionReceived(address,uint256)": EventFragment;
    "FundReleased(address,uint256,uint256)": EventFragment;
    "NFTRewardClaimed(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ContributionReceived"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ContributionRefunded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FiatContributionReceived"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FundReleased"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NFTRewardClaimed"): EventFragment;
}

export interface ContributionReceivedEventObject {
  funder: string;
  tier: BigNumber;
}
export type ContributionReceivedEvent = TypedEvent<
  [string, BigNumber],
  ContributionReceivedEventObject
>;

export type ContributionReceivedEventFilter =
  TypedEventFilter<ContributionReceivedEvent>;

export interface ContributionRefundedEventObject {
  funder: string;
  tier: BigNumber;
}
export type ContributionRefundedEvent = TypedEvent<
  [string, BigNumber],
  ContributionRefundedEventObject
>;

export type ContributionRefundedEventFilter =
  TypedEventFilter<ContributionRefundedEvent>;

export interface FiatContributionReceivedEventObject {
  funder: string;
  amount: BigNumber;
}
export type FiatContributionReceivedEvent = TypedEvent<
  [string, BigNumber],
  FiatContributionReceivedEventObject
>;

export type FiatContributionReceivedEventFilter =
  TypedEventFilter<FiatContributionReceivedEvent>;

export interface FundReleasedEventObject {
  business: string;
  amount: BigNumber;
  time: BigNumber;
}
export type FundReleasedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  FundReleasedEventObject
>;

export type FundReleasedEventFilter = TypedEventFilter<FundReleasedEvent>;

export interface NFTRewardClaimedEventObject {
  funder: string;
  tier: BigNumber;
}
export type NFTRewardClaimedEvent = TypedEvent<
  [string, BigNumber],
  NFTRewardClaimedEventObject
>;

export type NFTRewardClaimedEventFilter =
  TypedEventFilter<NFTRewardClaimedEvent>;

export interface IFundABusiness extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IFundABusinessInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {};

  callStatic: {};

  filters: {
    "ContributionReceived(address,uint256)"(
      funder?: null,
      tier?: null
    ): ContributionReceivedEventFilter;
    ContributionReceived(
      funder?: null,
      tier?: null
    ): ContributionReceivedEventFilter;

    "ContributionRefunded(address,uint256)"(
      funder?: null,
      tier?: null
    ): ContributionRefundedEventFilter;
    ContributionRefunded(
      funder?: null,
      tier?: null
    ): ContributionRefundedEventFilter;

    "FiatContributionReceived(address,uint256)"(
      funder?: null,
      amount?: null
    ): FiatContributionReceivedEventFilter;
    FiatContributionReceived(
      funder?: null,
      amount?: null
    ): FiatContributionReceivedEventFilter;

    "FundReleased(address,uint256,uint256)"(
      business?: null,
      amount?: null,
      time?: null
    ): FundReleasedEventFilter;
    FundReleased(
      business?: null,
      amount?: null,
      time?: null
    ): FundReleasedEventFilter;

    "NFTRewardClaimed(address,uint256)"(
      funder?: null,
      tier?: null
    ): NFTRewardClaimedEventFilter;
    NFTRewardClaimed(funder?: null, tier?: null): NFTRewardClaimedEventFilter;
  };

  estimateGas: {};

  populateTransaction: {};
}
