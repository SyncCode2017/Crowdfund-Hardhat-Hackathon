{
  "address": "0xDc64a140Aa3E981100a9becA4E685f962f0cF6C9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_allowedErc20Token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_businessAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_treasuryAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_feeFraction",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "_amountsToBeRaised",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_campaignAndDecisionPeriod",
          "type": "uint256[]"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "fundingTier",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tierCost",
              "type": "uint256"
            }
          ],
          "internalType": "struct IFundABusiness.FundingTierCost[]",
          "name": "_fundingTiers",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "milestoneNumber",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "fractionToBeReleased",
              "type": "uint256"
            }
          ],
          "internalType": "struct IFundABusiness.MilestoneStruct[]",
          "name": "_milestonesData",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AlreadyApproved",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CampaignEnded",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CampaignNotOpen",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CampaignUnsuccessful",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DecisionMade",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FractionTooHigh",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FunderHasClaimedNft",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidTier",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidTierAndQuantity",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidValues",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NeedMoreTokens",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NftTokensNotSet",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoFundDue",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoRefund",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotAFunder",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotReceivingFunds",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotTheOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReleasingMoreThanFundRaised",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TooLateToChange",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransactionFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Undecided",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroAddress",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "time",
          "type": "uint256"
        }
      ],
      "name": "CampaignFailed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "time",
          "type": "uint256"
        }
      ],
      "name": "CampaignSuccessful",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "funder",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tier",
          "type": "uint256"
        }
      ],
      "name": "ContributionReceived",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "funder",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tier",
          "type": "uint256"
        }
      ],
      "name": "ContributionRefunded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "funder",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "FiatContributionReceived",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "business",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "time",
          "type": "uint256"
        }
      ],
      "name": "FundReleased",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tier",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "IsTheTrueOwner",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "funder",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tier",
          "type": "uint256"
        }
      ],
      "name": "NFTRewardClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tier",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "NotTheTrueOwner",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MANAGER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PAUSER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allowedErc20Token",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_milestoneNumber",
          "type": "uint256"
        }
      ],
      "name": "approveMilestoneAndReleaseFund",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "areNftTokensSet",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "businessAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "businessBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "campaignDecisionTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "campaignEndTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "campaignStartTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tier",
          "type": "uint256"
        }
      ],
      "name": "claimNft",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_funder",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tier",
          "type": "uint256"
        }
      ],
      "name": "claimNftFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tier",
          "type": "uint256"
        }
      ],
      "name": "claimRefund",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_funder",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tier",
          "type": "uint256"
        }
      ],
      "name": "claimRefundFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum IFundABusiness.EndCampaign",
          "name": "_reasonForEnding",
          "type": "uint8"
        }
      ],
      "name": "closeFundingRound",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tier",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_quantity",
          "type": "uint256"
        }
      ],
      "name": "contribute",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_funder",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tier",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_quantity",
          "type": "uint256"
        }
      ],
      "name": "contributeOnBehalfOf",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cumFundReleased",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_funders",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_tiers",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_quantities",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "_totalAmount",
          "type": "uint256"
        }
      ],
      "name": "fiatContributeOnBehalfOf",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "fractionOfMilestone",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fundRaised",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fundRaisedMinusFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBusinessBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getFundersAddresses",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tier",
          "type": "uint256"
        }
      ],
      "name": "getQuantityOfTierBought",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tier",
          "type": "uint256"
        }
      ],
      "name": "getTierPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "hasClaimedNft",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isAFunder",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "isMilestoneApproved",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tier",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "isOwnerOf",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minTargetAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "moatFeeNumerator",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "nftContractOf",
      "outputs": [
        {
          "internalType": "contract INftPerks",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_allowedErc20Token",
          "type": "address"
        }
      ],
      "name": "setAllowedToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_businessAddress",
          "type": "address"
        }
      ],
      "name": "setBusinessAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_campaignTimesAndDecision",
          "type": "uint256[]"
        }
      ],
      "name": "setCampaignAndDecisionPeriod",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "fundingTier",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tierCost",
              "type": "uint256"
            }
          ],
          "internalType": "struct IFundABusiness.FundingTierCost[]",
          "name": "_fundingTiers",
          "type": "tuple[]"
        }
      ],
      "name": "setFundingTiersAndCosts",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_feeFraction",
          "type": "uint256"
        }
      ],
      "name": "setMOATFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "milestoneNumber",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "fractionToBeReleased",
              "type": "uint256"
            }
          ],
          "internalType": "struct IFundABusiness.MilestoneStruct[]",
          "name": "_milestonesData",
          "type": "tuple[]"
        }
      ],
      "name": "setMilestones",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "fundingTier",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "nftTokenAddress",
              "type": "address"
            }
          ],
          "internalType": "struct IFundABusiness.NftTierContract[]",
          "name": "_nftTierContracts",
          "type": "tuple[]"
        }
      ],
      "name": "setNftPerkContracts",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_amountsToBeRaised",
          "type": "uint256[]"
        }
      ],
      "name": "setTargetAmounts",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_treasuryAddress",
          "type": "address"
        }
      ],
      "name": "setTreasuryAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "targetAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tierBalanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tierCost",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "verdict",
      "outputs": [
        {
          "internalType": "enum IFundABusiness.CampaignState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawFundRaised",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xc5d25547af42a9ac639990d4c547932e71eed8822096696b882637857e418650",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xDc64a140Aa3E981100a9becA4E685f962f0cF6C9",
    "transactionIndex": 0,
    "gasUsed": "3588370",
    "logsBloom": "0x
    "blockHash": "0x5607ab1f4499f8618559af6164c59785e53f1557e7b5e1a0468128010d0bdf79",
    "transactionHash": "0xc5d25547af42a9ac639990d4c547932e71eed8822096696b882637857e418650",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 5,
        "transactionHash": "0xc5d25547af42a9ac639990d4c547932e71eed8822096696b882637857e418650",
        "address": "0xDc64a140Aa3E981100a9becA4E685f962f0cF6C9",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x5607ab1f4499f8618559af6164c59785e53f1557e7b5e1a0468128010d0bdf79"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 5,
        "transactionHash": "0xc5d25547af42a9ac639990d4c547932e71eed8822096696b882637857e418650",
        "address": "0xDc64a140Aa3E981100a9becA4E685f962f0cF6C9",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x241ecf16d79d0f8dbfb92cbc07fe17840425976cf0667f022fe9877caa831b08",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x5607ab1f4499f8618559af6164c59785e53f1557e7b5e1a0468128010d0bdf79"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 5,
        "transactionHash": "0xc5d25547af42a9ac639990d4c547932e71eed8822096696b882637857e418650",
        "address": "0xDc64a140Aa3E981100a9becA4E685f962f0cF6C9",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 2,
        "blockHash": "0x5607ab1f4499f8618559af6164c59785e53f1557e7b5e1a0468128010d0bdf79"
      }
    ],
    "blockNumber": 5,
    "cumulativeGasUsed": "3588370",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "0x70997970C51812dc3A010C7d01b50e0d17dc79C8",
    "0x3C44CdDdB6a900fa2b585dd299e03d12FA4293BC",
    10000,
    ["1000000000000000000000", "10000000000000000000000"],
    [1683477930, 1718601630, 79200],
    [
      [1, "100000000000000000000"],
      [2, "200000000000000000000"],
      [3, "300000000000000000000"]
    ],
    [
      [0, 20000],
      [1, 30000],
      [2, 40000],
      [3, 10000]
    ]
  ],
  "numDeployments": 1,
  "solcInputHash": "2248eccee073d8f2514f39c340b24217",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_allowedErc20Token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_businessAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_treasuryAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_feeFraction\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_amountsToBeRaised\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_campaignAndDecisionPeriod\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"fundingTier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tierCost\",\"type\":\"uint256\"}],\"internalType\":\"struct IFundABusiness.FundingTierCost[]\",\"name\":\"_fundingTiers\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"milestoneNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fractionToBeReleased\",\"type\":\"uint256\"}],\"internalType\":\"struct IFundABusiness.MilestoneStruct[]\",\"name\":\"_milestonesData\",\"type\":\"tuple[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AlreadyApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CampaignEnded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CampaignNotOpen\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CampaignUnsuccessful\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DecisionMade\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FractionTooHigh\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FunderHasClaimedNft\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidTier\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidTierAndQuantity\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidValues\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NeedMoreTokens\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NftTokensNotSet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoFundDue\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoRefund\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotAFunder\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotReceivingFunds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotTheOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReleasingMoreThanFundRaised\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TooLateToChange\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransactionFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Undecided\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"CampaignFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"CampaignSuccessful\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"funder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tier\",\"type\":\"uint256\"}],\"name\":\"ContributionReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"funder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tier\",\"type\":\"uint256\"}],\"name\":\"ContributionRefunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"funder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FiatContributionReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"business\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"FundReleased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tier\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"IsTheTrueOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"funder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tier\",\"type\":\"uint256\"}],\"name\":\"NFTRewardClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tier\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"NotTheTrueOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MANAGER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PAUSER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allowedErc20Token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_milestoneNumber\",\"type\":\"uint256\"}],\"name\":\"approveMilestoneAndReleaseFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"areNftTokensSet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"businessAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"businessBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"campaignDecisionTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"campaignEndTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"campaignStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tier\",\"type\":\"uint256\"}],\"name\":\"claimNft\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_funder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tier\",\"type\":\"uint256\"}],\"name\":\"claimNftFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tier\",\"type\":\"uint256\"}],\"name\":\"claimRefund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_funder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tier\",\"type\":\"uint256\"}],\"name\":\"claimRefundFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IFundABusiness.EndCampaign\",\"name\":\"_reasonForEnding\",\"type\":\"uint8\"}],\"name\":\"closeFundingRound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_quantity\",\"type\":\"uint256\"}],\"name\":\"contribute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_funder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_quantity\",\"type\":\"uint256\"}],\"name\":\"contributeOnBehalfOf\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cumFundReleased\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_funders\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_tiers\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_quantities\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_totalAmount\",\"type\":\"uint256\"}],\"name\":\"fiatContributeOnBehalfOf\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"fractionOfMilestone\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundRaised\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundRaisedMinusFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBusinessBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFundersAddresses\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tier\",\"type\":\"uint256\"}],\"name\":\"getQuantityOfTierBought\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tier\",\"type\":\"uint256\"}],\"name\":\"getTierPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"hasClaimedNft\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isAFunder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"isMilestoneApproved\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"isOwnerOf\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minTargetAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"moatFeeNumerator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nftContractOf\",\"outputs\":[{\"internalType\":\"contract INftPerks\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_allowedErc20Token\",\"type\":\"address\"}],\"name\":\"setAllowedToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_businessAddress\",\"type\":\"address\"}],\"name\":\"setBusinessAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_campaignTimesAndDecision\",\"type\":\"uint256[]\"}],\"name\":\"setCampaignAndDecisionPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"fundingTier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tierCost\",\"type\":\"uint256\"}],\"internalType\":\"struct IFundABusiness.FundingTierCost[]\",\"name\":\"_fundingTiers\",\"type\":\"tuple[]\"}],\"name\":\"setFundingTiersAndCosts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_feeFraction\",\"type\":\"uint256\"}],\"name\":\"setMOATFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"milestoneNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fractionToBeReleased\",\"type\":\"uint256\"}],\"internalType\":\"struct IFundABusiness.MilestoneStruct[]\",\"name\":\"_milestonesData\",\"type\":\"tuple[]\"}],\"name\":\"setMilestones\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"fundingTier\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"nftTokenAddress\",\"type\":\"address\"}],\"internalType\":\"struct IFundABusiness.NftTierContract[]\",\"name\":\"_nftTierContracts\",\"type\":\"tuple[]\"}],\"name\":\"setNftPerkContracts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_amountsToBeRaised\",\"type\":\"uint256[]\"}],\"name\":\"setTargetAmounts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasuryAddress\",\"type\":\"address\"}],\"name\":\"setTreasuryAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tierBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tierCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"verdict\",\"outputs\":[{\"internalType\":\"enum IFundABusiness.CampaignState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFundRaised\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"custom:security-contact\":\"hello@moat.com\",\"details\":\"This implements ERC-721 NFT as the rewards (NFT perks) to be minted to the funders.\",\"kind\":\"dev\",\"methods\":{\"approveMilestoneAndReleaseFund(uint256)\":{\"details\":\"milestone can be approved in any order\",\"params\":{\"_milestoneNumber\":\"the milestone to be approved\"}},\"claimNft(uint256)\":{\"details\":\"NFT with tokenId = _tier is transfer to the connected wallet\",\"params\":{\"_tier\":\"funding category\"}},\"claimNftFor(address,uint256)\":{\"details\":\"Claim NFT for another _funder. NFT with tokenId = _tier is transfer to the _funder\",\"params\":{\"_funder\":\"the funder address\",\"_tier\":\"funding category\"}},\"claimRefund(uint256)\":{\"details\":\"Claim a refund for the connected wallet\",\"params\":{\"_tier\":\"funding category\"}},\"claimRefundFor(address,uint256)\":{\"details\":\"Claim a refund on behalf of a funder\",\"params\":{\"_funder\":\"the funder address\",\"_tier\":\"funding category\"}},\"closeFundingRound(uint8)\":{\"details\":\"reason for closing the campaign is required\",\"params\":{\"_reasonForEnding\":\"enum only accepts TARGETMET or FAILURE\"}},\"contribute(uint256,uint256)\":{\"details\":\"only accepts ERC-20 deposit when campaign is open\",\"params\":{\"_quantity\":\"number of tiers\",\"_tier\":\"funding category\"}},\"contributeOnBehalfOf(address,uint256,uint256)\":{\"details\":\"only accepts ERC-20 deposit when campaign is open\",\"params\":{\"_funder\":\"the contributor address\",\"_quantity\":\"number of tiers\",\"_tier\":\"funding category\"}},\"fiatContributeOnBehalfOf(address[],uint256[],uint256[],uint256)\":{\"details\":\"only accepts ERC-20 deposit before campaign decision time passed\",\"params\":{\"_funders\":\"array of funder addresses\",\"_quantities\":\"array of number of tiers purchased by each funder All the arrays must be the same length\",\"_tiers\":\"array of funding category\"}},\"getBusinessBalance()\":{\"details\":\"returns the balance of the business address\"},\"getFundersAddresses()\":{\"details\":\"returns the array of all funder addresses\"},\"getQuantityOfTierBought(uint256)\":{\"details\":\"returns the quantities of tier perks bought so far\",\"params\":{\"_tier\":\"funding or perks category\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getTierPrice(uint256)\":{\"details\":\"returns the price of a given tier\",\"params\":{\"_tier\":\"funding or perks category\"}},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"isOwnerOf(uint256,uint256)\":{\"details\":\"Proves that a caller owns a particular NFT token by emitting IsTheTrueOwner event It emits NotTheTrueOwner event if the caller is not the owner\",\"params\":{\"_tier\":\"funding or perks category\",\"_tokenId\":\"id of the nft token\"}},\"pause()\":{\"details\":\"Pauses the contract\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"setAllowedToken(address)\":{\"details\":\"sets the allowed ERC20 tokens for the campaign\"},\"setBusinessAddress(address)\":{\"details\":\"Set the wallet address of the business raising fund through this contract\"},\"setCampaignAndDecisionPeriod(uint256[])\":{\"params\":{\"_campaignTimesAndDecision\":\"array of length 3.\"}},\"setFundingTiersAndCosts((uint256,uint256)[])\":{\"details\":\"sets the available tiers and their corresponding prices\"},\"setMOATFee(uint256)\":{\"params\":{\"_feeFraction\":\"e.g 5% => 5 * (10**5) / 100 = 5000\"}},\"setMilestones((uint256,uint256)[])\":{\"details\":\"sets the milestones\"},\"setNftPerkContracts((uint256,address)[])\":{\"details\":\"sets the NFT perks contracts\"},\"setTargetAmounts(uint256[])\":{\"params\":{\"_amountsToBeRaised\":\"array of length 2.\"}},\"setTreasuryAddress(address)\":{\"details\":\"sets the MOAT treasury address\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"unpause()\":{\"details\":\"Unpauses the contract\"},\"withdrawFundRaised()\":{\"details\":\"Only the authorised business wallet can withdraw\"}},\"title\":\"MOAT Crowd-funding Contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"approveMilestoneAndReleaseFund(uint256)\":{\"notice\":\"Manager role can approve the milestones at any time\"},\"claimNft(uint256)\":{\"notice\":\"The funders can claim NFT perks when the campaign is successful\"},\"claimNftFor(address,uint256)\":{\"notice\":\"The funders can claim NFT perks when the campaign is successful\"},\"claimRefund(uint256)\":{\"notice\":\"The funders can claim refund only when the campaign failed\"},\"claimRefundFor(address,uint256)\":{\"notice\":\"The funders can claim refund only when the campaign failed\"},\"closeFundingRound(uint8)\":{\"notice\":\"Manager role can close the funding round before the decision time passed\"},\"contribute(uint256,uint256)\":{\"notice\":\"Contribute fund from the connected wallet for the open campaign\"},\"contributeOnBehalfOf(address,uint256,uint256)\":{\"notice\":\"Contribute fund on behalf of another address for the open campaign.\"},\"fiatContributeOnBehalfOf(address[],uint256[],uint256[],uint256)\":{\"notice\":\"Manager role can contribute fund on behalf of other addresses before decision time passed.\"},\"withdrawFundRaised()\":{\"notice\":\"Funds are released to the authorised business wallet based on the milestone schedule.\"}},\"notice\":\"This contract is for crowd-funding a business by interested parties and to release funds to the business in a transparent but monitored way. Rewards, in form of NFTs are distributed to funders after the funding round has been declared successful.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundABusiness.sol\":\"FundABusiness\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x67e3daf189111d6d5b0464ed09cf9f0605a22c4b965a7fcecd707101faff008a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x0849d93b16c9940beb286a7864ed02724b248b93e0d80ef6355af5ef15c64773\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x190dd6f8d592b7e4e930feb7f4313aeb8e1c4ad3154c27ce1cf6a512fc30d8cc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9b72f93be69ca894d8492c244259615c4a742afc8d63720dbc8bb81087d9b238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/introspection/ERC165Checker.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Library used to query support of an interface declared via {IERC165}.\\n *\\n * Note that these functions return the actual result of the query: they do not\\n * `revert` if an interface is not supported. It is up to the caller to decide\\n * what to do in these cases.\\n */\\nlibrary ERC165Checker {\\n    // As per the EIP-165 spec, no interface should ever match 0xffffffff\\n    bytes4 private constant _INTERFACE_ID_INVALID = 0xffffffff;\\n\\n    /**\\n     * @dev Returns true if `account` supports the {IERC165} interface.\\n     */\\n    function supportsERC165(address account) internal view returns (bool) {\\n        // Any contract that implements ERC165 must explicitly indicate support of\\n        // InterfaceId_ERC165 and explicitly indicate non-support of InterfaceId_Invalid\\n        return\\n            supportsERC165InterfaceUnchecked(account, type(IERC165).interfaceId) &&\\n            !supportsERC165InterfaceUnchecked(account, _INTERFACE_ID_INVALID);\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports the interface defined by\\n     * `interfaceId`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // query support of both ERC165 as per the spec and support of _interfaceId\\n        return supportsERC165(account) && supportsERC165InterfaceUnchecked(account, interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns a boolean array where each value corresponds to the\\n     * interfaces passed in and whether they're supported or not. This allows\\n     * you to batch check interfaces for a contract where your expectation\\n     * is that some interfaces may not be supported.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function getSupportedInterfaces(address account, bytes4[] memory interfaceIds)\\n        internal\\n        view\\n        returns (bool[] memory)\\n    {\\n        // an array of booleans corresponding to interfaceIds and whether they're supported or not\\n        bool[] memory interfaceIdsSupported = new bool[](interfaceIds.length);\\n\\n        // query support of ERC165 itself\\n        if (supportsERC165(account)) {\\n            // query support of each interface in interfaceIds\\n            for (uint256 i = 0; i < interfaceIds.length; i++) {\\n                interfaceIdsSupported[i] = supportsERC165InterfaceUnchecked(account, interfaceIds[i]);\\n            }\\n        }\\n\\n        return interfaceIdsSupported;\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports all the interfaces defined in\\n     * `interfaceIds`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * Batch-querying can lead to gas savings by skipping repeated checks for\\n     * {IERC165} support.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsAllInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool) {\\n        // query support of ERC165 itself\\n        if (!supportsERC165(account)) {\\n            return false;\\n        }\\n\\n        // query support of each interface in interfaceIds\\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\\n            if (!supportsERC165InterfaceUnchecked(account, interfaceIds[i])) {\\n                return false;\\n            }\\n        }\\n\\n        // all interfaces supported\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Query if a contract implements an interface, does not check ERC165 support\\n     * @param account The address of the contract to query for support of an interface\\n     * @param interfaceId The interface identifier, as specified in ERC-165\\n     * @return true if the contract at account indicates support of the interface with\\n     * identifier interfaceId, false otherwise\\n     * @dev Assumes that account contains a contract that supports ERC165, otherwise\\n     * the behavior of this method is undefined. This precondition can be checked\\n     * with {supportsERC165}.\\n     * Interface identification is specified in ERC-165.\\n     */\\n    function supportsERC165InterfaceUnchecked(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // prepare call\\n        bytes memory encodedParams = abi.encodeWithSelector(IERC165.supportsInterface.selector, interfaceId);\\n\\n        // perform static call\\n        bool success;\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly {\\n            success := staticcall(30000, account, add(encodedParams, 0x20), mload(encodedParams), 0x00, 0x20)\\n            returnSize := returndatasize()\\n            returnValue := mload(0x00)\\n        }\\n\\n        return success && returnSize >= 0x20 && returnValue > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x0812bc73d6e30558840122fa48d6f64ae978ccc1b1fc42e616bac190c6360f46\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\"},\"contracts/FundABusiness.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport \\\"./interfaces/IFundABusiness.sol\\\";\\nimport \\\"./interfaces/INftPerks.sol\\\";\\n\\n/**@title MOAT Crowd-funding Contract\\n * @custom:security-contact hello@moat.com\\n * @notice This contract is for crowd-funding a business by interested parties and\\n * to release funds to the business in a transparent but monitored way. Rewards, in form\\n * of NFTs are distributed to funders after the funding round has been declared successful.\\n * @dev This implements ERC-721 NFT as the rewards (NFT perks) to be minted to the funders.\\n */\\ncontract FundABusiness is IFundABusiness, AccessControl, ReentrancyGuard, Pausable {\\n    // defensive as not required after pragma ^0.8\\n    using SafeMath for uint256;\\n    using ERC165Checker for address;\\n    using SafeERC20 for IERC20;\\n\\n    // address of the MOAT treasury wallet\\n    address private treasuryAddress;\\n    // address of the busineess raising fund\\n    address public businessAddress;\\n    // addresses of all the contributors\\n    address[] private fundersAddresses;\\n    // unix time at which the funding campaign opens\\n    uint256 public campaignStartTime;\\n    // unix time at which the funding campaign closes\\n    uint256 public campaignEndTime;\\n    // unix time at which decision period ends\\n    uint256 public campaignDecisionTime;\\n    // minimum amount of tokens that the business wishes to raise\\n    uint256 public minTargetAmount;\\n    // optimum amount of tokens that the business wishes to raise\\n    uint256 public targetAmount;\\n    // actual amount of tokens raised by the business\\n    uint256 public fundRaised;\\n    // amount of tokens raised after MOAT fee has been deducted\\n    uint256 public fundRaisedMinusFee;\\n    // numerator of the %ge MOAT fee e.g 5% fee => 5 * (10**5) / 100 = 5000\\n    uint256 public moatFeeNumerator;\\n    // amount of tokens deducted as MOAT fees\\n    uint256 private moatFee;\\n    // cumulative amount of tokens released to business based on milestones completed so far\\n    uint256 public cumFundReleased;\\n    // returns true if the NFT perks contracts have been set\\n    bool public areNftTokensSet = false;\\n    // returns true if the MOAT fee has been deducted\\n    bool isFeeTaken = false;\\n    // ERC20 token approved for campaign funding e.g USDC, USDT\\n    IERC20 public allowedErc20Token;\\n\\n    // returns number of tier perks purchased by a funder\\n    mapping(address => mapping(uint256 => uint256)) public tierBalanceOf;\\n    // returns the price of a tier\\n    mapping(uint256 => uint256) public tierCost;\\n    // returns the corresponding  NFT contract of a tier perk\\n    mapping(uint256 => INftPerks) public nftContractOf;\\n    // returns true if a given funder has claimed his NFT perk\\n    mapping(address => mapping(uint256 => bool)) public hasClaimedNft;\\n    // returns true if a given address has contributed for the curent campaign\\n    mapping(address => bool) public isAFunder;\\n    // returns the numerator of the fraction of fund to be released after a milestone has been approved\\n    mapping(uint256 => uint256) public fractionOfMilestone;\\n    // returns true if a given milestone has been approved\\n    mapping(uint256 => bool) public isMilestoneApproved;\\n    // returns the amount of tokens available for the business to claim\\n    mapping(address => uint256) public businessBalance;\\n    // returns the quantities of tier perks bought\\n    mapping(uint256 => uint256) private quantityOfTierBought;\\n\\n    // array of tiers available and thier prices\\n    FundingTierCost[] fundingTiersCosts;\\n    // array of tiers available and their corresponding NFT contracts\\n    NftTierContract[] nftTierContracts;\\n    // decision made whether the campaign was sucessful\\n    CampaignState public verdict;\\n    // reason for closing the campaign abruptly\\n    EndCampaign private reasonForEnding;\\n\\n    // access control roles\\n    bytes32 public constant PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\n    bytes32 public constant MANAGER_ROLE = keccak256(\\\"MANAGER_ROLE\\\");\\n\\n    constructor(address _allowedErc20Token, address _businessAddress, address _treasuryAddress, uint256 _feeFraction, uint256[] memory _amountsToBeRaised, uint256[] memory _campaignAndDecisionPeriod, FundingTierCost[] memory _fundingTiers, MilestoneStruct[] memory _milestonesData) {\\n        // initialise the contract\\n        if (_campaignAndDecisionPeriod.length != 3) revert InvalidValues();\\n        campaignStartTime = _campaignAndDecisionPeriod[0];\\n        campaignEndTime = _campaignAndDecisionPeriod[1];\\n        campaignDecisionTime = _campaignAndDecisionPeriod[1].add(_campaignAndDecisionPeriod[2]);\\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _grantRole(MANAGER_ROLE, msg.sender);\\n        _grantRole(PAUSER_ROLE, msg.sender);\\n        setAllowedToken(_allowedErc20Token);\\n        setTargetAmounts(_amountsToBeRaised);\\n        setFundingTiersAndCosts(_fundingTiers);\\n        setTreasuryAddress(_treasuryAddress);\\n        setBusinessAddress(_businessAddress);\\n        setMilestones(_milestonesData);\\n        setMOATFee(_feeFraction);\\n        verdict = CampaignState.UNDECIDED;\\n    }\\n\\n    //////////////////////////////////////////////////\\n    //////////////// Modifiers //////////////////////\\n    /////////////////////////////////////////////////\\n\\n    // checks whether the given is zero address\\n    modifier noZeroAddress(address newAddress) {\\n        if (newAddress == address(0)) revert ZeroAddress();\\n        _;\\n    }\\n    // checks whether the given address has contributed for the current campaign\\n    modifier onlyFunders(address _funder) {\\n        if (!isAFunder[_funder]) revert NotAFunder();\\n        _;\\n    }\\n    // checks if nft token address is set\\n    modifier nftTokensAreSet() {\\n        if (!areNftTokensSet) revert NftTokensNotSet();\\n        _;\\n    }\\n\\n    //////////////////////////////////////////////////\\n    //////////////// Setters Functions //////////////\\n    /////////////////////////////////////////////////\\n\\n    ///@dev sets the allowed ERC20 tokens for the campaign\\n    function setAllowedToken(address _allowedErc20Token) public onlyRole(MANAGER_ROLE) noZeroAddress(_allowedErc20Token) {\\n        allowedErc20Token = IERC20(_allowedErc20Token);\\n    }\\n\\n    ///@dev sets the NFT perks contracts\\n    function setNftPerkContracts(NftTierContract[] memory _nftTierContracts) external onlyRole(MANAGER_ROLE) {\\n        for (uint256 i = 0; i < _nftTierContracts.length; ++i) {\\n            if (_nftTierContracts[i].nftTokenAddress == address(0)) revert ZeroAddress();\\n            nftContractOf[_nftTierContracts[i].fundingTier] = INftPerks(_nftTierContracts[i].nftTokenAddress);\\n        }\\n        areNftTokensSet = true;\\n    }\\n\\n    ///@dev sets the MOAT treasury address\\n    function setTreasuryAddress(address _treasuryAddress) public onlyRole(MANAGER_ROLE) noZeroAddress(_treasuryAddress) {\\n        treasuryAddress = _treasuryAddress;\\n    }\\n\\n    /// @dev Set the wallet address of the business raising fund through this contract\\n    function setBusinessAddress(address _businessAddress) public onlyRole(MANAGER_ROLE) noZeroAddress(_businessAddress) {\\n        businessAddress = _businessAddress;\\n    }\\n\\n    ///@dev sets the available tiers and their corresponding prices\\n    function setFundingTiersAndCosts(FundingTierCost[] memory _fundingTiers) public onlyRole(MANAGER_ROLE) {\\n        if (block.timestamp > campaignStartTime) revert TooLateToChange();\\n        for (uint256 i = 0; i < _fundingTiers.length; ++i) {\\n            tierCost[_fundingTiers[i].fundingTier] = _fundingTiers[i].tierCost;\\n        }\\n    }\\n\\n    /// @param _amountsToBeRaised array of length 2.\\n    function setTargetAmounts(uint256[] memory _amountsToBeRaised) public onlyRole(MANAGER_ROLE) {\\n        if (block.timestamp > campaignDecisionTime) revert TooLateToChange();\\n        if (_amountsToBeRaised.length != 2) revert InvalidValues();\\n        minTargetAmount = _amountsToBeRaised[0];\\n        targetAmount = _amountsToBeRaised[1];\\n    }\\n\\n    /// @param _campaignTimesAndDecision array of length 3.\\n    function setCampaignAndDecisionPeriod(uint256[] memory _campaignTimesAndDecision) public onlyRole(MANAGER_ROLE) {\\n        if (_campaignTimesAndDecision.length != 3) revert InvalidValues();\\n        if (block.timestamp < campaignStartTime) {\\n            campaignStartTime = _campaignTimesAndDecision[0];\\n            campaignEndTime = _campaignTimesAndDecision[1];\\n            campaignDecisionTime = _campaignTimesAndDecision[1].add(_campaignTimesAndDecision[2]);\\n        } else if (_isCampaignOpen()) {\\n            campaignEndTime = _campaignTimesAndDecision[1];\\n            campaignDecisionTime = _campaignTimesAndDecision[1].add(_campaignTimesAndDecision[2]);\\n        } else if (block.timestamp >= campaignEndTime && block.timestamp < campaignDecisionTime) {\\n            campaignDecisionTime = campaignEndTime.add(_campaignTimesAndDecision[2]);\\n        } else {\\n            revert CampaignEnded();\\n        }\\n    }\\n\\n    ///@dev sets the milestones\\n    function setMilestones(MilestoneStruct[] memory _milestonesData) public onlyRole(MANAGER_ROLE) {\\n        for (uint256 i = 0; i < _milestonesData.length; ++i) {\\n            if (_milestonesData[i].fractionToBeReleased > 100000) revert FractionTooHigh();\\n            fractionOfMilestone[_milestonesData[i].milestoneNumber] = _milestonesData[i].fractionToBeReleased;\\n        }\\n    }\\n\\n    /// @param _feeFraction e.g 5% => 5 * (10**5) / 100 = 5000\\n    function setMOATFee(uint256 _feeFraction) public onlyRole(MANAGER_ROLE) {\\n        if (_feeFraction > 100000) revert InvalidValues();\\n        if (block.timestamp > campaignStartTime) revert TooLateToChange();\\n        moatFeeNumerator = _feeFraction;\\n    }\\n\\n    //////////////////////////////////////////////////\\n    //////////////// Main Functions /////////////////\\n    /////////////////////////////////////////////////\\n\\n    /// @notice Contribute fund on behalf of another address for the open campaign.\\n    /// @dev only accepts ERC-20 deposit when campaign is open\\n    /// @param _funder the contributor address\\n    /// @param _tier funding category\\n    /// @param _quantity number of tiers\\n    function contributeOnBehalfOf(address _funder, uint256 _tier, uint256 _quantity) public nonReentrant whenNotPaused noZeroAddress(_funder) {\\n        if (_isCampaignOpen() != true) revert CampaignNotOpen();\\n        uint256 _fundingAmount = tierCost[_tier].mul(_quantity);\\n        // check whether the _tier is allowed\\n        if (_fundingAmount <= 0) revert InvalidTierAndQuantity();\\n        _receiveToken(msg.sender, _fundingAmount);\\n        fundRaised += _fundingAmount;\\n        _updateFunderBalance(_funder, _tier, _quantity);\\n    }\\n\\n    /// @notice Contribute fund from the connected wallet for the open campaign\\n    /// @dev only accepts ERC-20 deposit when campaign is open\\n    /// @param _tier funding category\\n    /// @param _quantity number of tiers\\n    function contribute(uint256 _tier, uint256 _quantity) external {\\n        contributeOnBehalfOf(msg.sender, _tier, _quantity);\\n    }\\n\\n    /// @notice The funders can claim refund only when the campaign failed\\n    /// @dev Claim a refund on behalf of a funder\\n    /// @param _funder the funder address\\n    /// @param _tier funding category\\n    function claimRefundFor(address _funder, uint256 _tier) public nonReentrant whenNotPaused {\\n        verdict = _campaignVerdict();\\n        // check if campaign failed\\n        if (verdict == CampaignState.SUCCESS) revert NoRefund();\\n        uint256 _quantity = tierBalanceOf[_funder][_tier];\\n        // get the amount to refund to the funder\\n        uint256 _amount = tierCost[_tier].mul(_quantity);\\n        if (_amount <= 0) revert NoRefund();\\n        // set funder's balance to zero\\n        tierBalanceOf[_funder][_tier] = 0;\\n        _sendToken(_funder, _amount);\\n        emit ContributionRefunded(_funder, _tier);\\n    }\\n\\n    /// @notice The funders can claim refund only when the campaign failed\\n    /// @dev Claim a refund for the connected wallet\\n    /// @param _tier funding category\\n    function claimRefund(uint256 _tier) external onlyFunders(msg.sender) {\\n        claimRefundFor(msg.sender, _tier);\\n    }\\n\\n    /// @notice The funders can claim NFT perks when the campaign is successful\\n    /// @dev NFT with tokenId = _tier is transfer to the connected wallet\\n    /// @param _tier funding category\\n    function claimNft(uint256 _tier) external onlyFunders(msg.sender) {\\n        claimNftFor(msg.sender, _tier);\\n    }\\n\\n    /// @notice The funders can claim NFT perks when the campaign is successful\\n    /// @dev Claim NFT for another _funder. NFT with tokenId = _tier is transfer to the _funder\\n    /// @param _funder the funder address\\n    /// @param _tier funding category\\n    function claimNftFor(address _funder, uint256 _tier) public nftTokensAreSet nonReentrant whenNotPaused {\\n        verdict = _campaignVerdict();\\n        // check whether the campaign was successful\\n        if (verdict != CampaignState.SUCCESS) revert CampaignUnsuccessful();\\n        // check whether the funder has unclaimed NFT\\n        if (hasClaimedNft[_funder][_tier]) revert FunderHasClaimedNft();\\n        // get the number of unclaimed NFT tokens\\n        uint256 _quantity = tierBalanceOf[_funder][_tier];\\n        hasClaimedNft[_funder][_tier] = true;\\n        tierBalanceOf[_funder][_tier] = 0;\\n        // transfer the unclaimed NFT tokens to the funder\\n        for (uint256 i = 0; i < _quantity; ++i) {\\n            nftContractOf[_tier].mintNft(_funder);\\n        }\\n    }\\n\\n    /// @notice Funds are released to the authorised business wallet based on the\\n    /// milestone schedule.\\n    /// @dev Only the authorised business wallet can withdraw\\n    function withdrawFundRaised() external nonReentrant whenNotPaused {\\n        // check whether it is the business wallet that is calling this function\\n        if (msg.sender != businessAddress) revert NotTheOwner();\\n        verdict = _campaignVerdict();\\n        // check whether the campaign was successful\\n        if (block.timestamp > campaignDecisionTime && verdict != CampaignState.SUCCESS) revert CampaignUnsuccessful();\\n        // get the amount to release from the milestone schedule\\n        uint256 _amount = businessBalance[businessAddress];\\n        if (_amount <= 0) revert NoFundDue();\\n        businessBalance[businessAddress] = 0;\\n        _sendToken(businessAddress, _amount);\\n        emit FundReleased(businessAddress, _amount, block.timestamp);\\n    }\\n\\n    /// @notice Manager role can contribute fund on behalf of other addresses before decision time passed.\\n    /// @dev only accepts ERC-20 deposit before campaign decision time passed\\n    /// @param _funders array of funder addresses\\n    /// @param _tiers array of funding category\\n    /// @param _quantities array of number of tiers purchased by each funder\\n    /// All the arrays must be the same length\\n    function fiatContributeOnBehalfOf(address[] memory _funders, uint256[] memory _tiers, uint256[] memory _quantities, uint256 _totalAmount) external onlyRole(MANAGER_ROLE) nonReentrant whenNotPaused {\\n        verdict = _campaignVerdict();\\n        // check whether decision time has passed and decision has been made\\n        if (block.timestamp < campaignStartTime || block.timestamp > campaignDecisionTime || verdict != CampaignState.UNDECIDED) revert NotReceivingFunds();\\n        // check the arrays have the same length\\n        if (_funders.length != _tiers.length || _funders.length != _quantities.length) revert InvalidValues();\\n        _receiveToken(msg.sender, _totalAmount);\\n        fundRaised += _totalAmount;\\n        // update state\\n        for (uint256 i = 0; i < _funders.length; ++i) {\\n            if (_funders[i] == address(0)) revert ZeroAddress();\\n            uint256 _fundingAmount = tierCost[_tiers[i]].mul(_quantities[i]);\\n            // check whether the _tier is allowed\\n            if (_fundingAmount <= 0) revert InvalidTierAndQuantity();\\n            _updateFunderBalance(_funders[i], _tiers[i], _quantities[i]);\\n        }\\n        emit FiatContributionReceived(msg.sender, _totalAmount);\\n    }\\n\\n    /// @notice Manager role can close the funding round before the decision time passed\\n    /// @dev reason for closing the campaign is required\\n    /// @param _reasonForEnding enum only accepts TARGETMET or FAILURE\\n    function closeFundingRound(EndCampaign _reasonForEnding) external onlyRole(MANAGER_ROLE) {\\n        verdict = _campaignVerdict();\\n        // check whether decision has been made\\n        if (block.timestamp > campaignDecisionTime && verdict != CampaignState.UNDECIDED) revert DecisionMade();\\n        // update state\\n        campaignEndTime = block.timestamp;\\n        campaignDecisionTime = block.timestamp;\\n        if (_reasonForEnding == EndCampaign.TARGETMET) {\\n            verdict = CampaignState.SUCCESS;\\n            _deductFeeAndSend();\\n        } else if (_reasonForEnding == EndCampaign.FAILURE) {\\n            verdict = CampaignState.FAILURE;\\n            emit CampaignFailed(block.timestamp);\\n        } else {\\n            revert InvalidValues();\\n        }\\n    }\\n\\n    /// @notice Manager role can approve the milestones at any time\\n    /// @dev milestone can be approved in any order\\n    /// @param _milestoneNumber the milestone to be approved\\n    function approveMilestoneAndReleaseFund(uint256 _milestoneNumber) external onlyRole(MANAGER_ROLE) whenNotPaused {\\n        verdict = _campaignVerdict();\\n        // check whether the campaign was successful\\n        if (block.timestamp < campaignDecisionTime) revert Undecided();\\n        if (verdict != CampaignState.SUCCESS) revert CampaignUnsuccessful();\\n        if (isMilestoneApproved[_milestoneNumber] == true) revert AlreadyApproved();\\n        isMilestoneApproved[_milestoneNumber] = true;\\n        _releaseFundToBusiness(_milestoneNumber);\\n    }\\n\\n    /// @dev Proves that a caller owns a particular NFT token by emitting IsTheTrueOwner event\\n    /// It emits NotTheTrueOwner event if the caller is not the owner\\n    /// @param _tier funding or perks category\\n    /// @param _tokenId id of the nft token\\n    function isOwnerOf(uint256 _tier, uint256 _tokenId) external {\\n        address _owner = nftContractOf[_tier].ownerOf(_tokenId);\\n        if (msg.sender == _owner) {\\n            emit IsTheTrueOwner(_owner, _tier, _tokenId);\\n        } else {\\n            emit NotTheTrueOwner(msg.sender, _tier, _tokenId);\\n        }\\n    }\\n\\n    /// @dev Decides the campaign state at any point in time\\n    /// @return verdict enum which can only be SUCCESS, FAILURE or UNDECIDED\\n    /// based on the outcome of the campaign\\n    function _campaignVerdict() internal returns (CampaignState) {\\n        if (block.timestamp > campaignDecisionTime && fundRaised >= minTargetAmount && verdict != CampaignState.FAILURE) {\\n            _deductFeeAndSend();\\n            return CampaignState.SUCCESS;\\n        } else if (block.timestamp > campaignDecisionTime && fundRaised < minTargetAmount && verdict != CampaignState.SUCCESS) {\\n            emit CampaignFailed(block.timestamp);\\n            return CampaignState.FAILURE;\\n        }\\n        return verdict;\\n    }\\n\\n    /// @dev To check whether the funding round is open. Returns a boolean\\n    function _isCampaignOpen() internal returns (bool) {\\n        verdict = _campaignVerdict();\\n        if ((block.timestamp > campaignStartTime) && (block.timestamp <= campaignEndTime) && (verdict == CampaignState.UNDECIDED)) {\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    /// @dev release fund to business\\n    /// @param _milestoneNumber the milestone to be approved\\n    function _releaseFundToBusiness(uint256 _milestoneNumber) internal {\\n        uint256 _milestoneFraction = fractionOfMilestone[_milestoneNumber];\\n        // get the amount to release from the milestone schedule\\n        uint256 _amountToRelease = (_milestoneFraction.mul(fundRaisedMinusFee).div(10 ** 5));\\n        if (cumFundReleased.add(_amountToRelease) > fundRaisedMinusFee) revert ReleasingMoreThanFundRaised();\\n        cumFundReleased += _amountToRelease;\\n        businessBalance[businessAddress] += _amountToRelease;\\n    }\\n\\n    /// @dev contract cannot receive ether\\n    receive() external payable {\\n        revert();\\n    }\\n\\n    /// @notice Transfer token from a sender to the contract\\n    /// @param _from The recipient address\\n    /// @param _amount The amount of tokens to transfer from the sender\\n    function _receiveToken(address _from, uint256 _amount) internal {\\n        // check how much the sender has approved for this transaction\\n        if (allowedErc20Token.allowance(_from, address(this)) < _amount) revert NeedMoreTokens();\\n        // receive deposit and update state\\n        allowedErc20Token.safeTransferFrom(_from, address(this), _amount);\\n    }\\n\\n    /// @notice Transfer token from the contract to the recipient\\n    /// @param _to The recipient address\\n    /// @param _amount The amount of tokens to transfer\\n    function _sendToken(address _to, uint256 _amount) internal {\\n        address payable _recipient = payable(_to);\\n        // send token to the recipient\\n        allowedErc20Token.safeTransfer(_recipient, _amount);\\n    }\\n\\n    function _updateFunderBalance(address _funder, uint256 _tier, uint256 _quantity) internal {\\n        tierBalanceOf[_funder][_tier] += _quantity;\\n        quantityOfTierBought[_tier] += _quantity;\\n        emit ContributionReceived(_funder, _tier);\\n        // check whether is an existing funder\\n        if (!isAFunder[_funder]) {\\n            fundersAddresses.push(_funder);\\n            isAFunder[_funder] = true;\\n        }\\n    }\\n\\n    /// @dev deducts fee and send to the treasury account\\n    function _deductFeeAndSend() internal {\\n        // check whether fee has been deducted and sent before\\n        if (isFeeTaken == false) {\\n            moatFee = fundRaised.mul(moatFeeNumerator).div(100000);\\n            fundRaisedMinusFee = fundRaised.sub(moatFee);\\n            isFeeTaken = true;\\n            _sendToken(treasuryAddress, moatFee);\\n            emit CampaignSuccessful(block.timestamp);\\n        }\\n    }\\n\\n    /// @dev Pauses the contract\\n    function pause() public onlyRole(PAUSER_ROLE) {\\n        _pause();\\n    }\\n\\n    /// @dev Unpauses the contract\\n    function unpause() public onlyRole(PAUSER_ROLE) {\\n        _unpause();\\n    }\\n\\n    //////////////////////////////////////////////////\\n    //////////////// Getter /////////////////////////\\n    /////////////////////////////////////////////////\\n\\n    /// @dev returns the array of all funder addresses\\n    function getFundersAddresses() external view onlyRole(MANAGER_ROLE) returns (address[] memory) {\\n        address[] memory _fundersAddresses = fundersAddresses;\\n        return _fundersAddresses;\\n    }\\n\\n    /// @dev returns the quantities of tier perks bought so far\\n    /// @param _tier funding or perks category\\n    function getQuantityOfTierBought(uint256 _tier) external view onlyRole(MANAGER_ROLE) returns (uint256) {\\n        return quantityOfTierBought[_tier];\\n    }\\n\\n    /// @dev returns the price of a given tier\\n    /// @param _tier funding or perks category\\n    function getTierPrice(uint256 _tier) external view returns (uint256) {\\n        if (tierCost[_tier] == 0) revert InvalidTier();\\n        return tierCost[_tier];\\n    }\\n\\n    /// @dev returns the balance of the business address\\n    function getBusinessBalance() external view returns (uint256) {\\n        return businessBalance[businessAddress];\\n    }\\n\\n}\\n\",\"keccak256\":\"0xfff33b6383451b7a290f6b44b72d8007e6db62d86ed1fba657406a50c48ba45b\",\"license\":\"MIT\"},\"contracts/interfaces/IFundABusiness.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\ninterface IFundABusiness {\\n    error ZeroAddress();\\n    error TransactionFailed();\\n    error InsufficientBalance();\\n    error TooLateToChange();\\n    error InvalidTierAndQuantity();\\n    error NeedMoreTokens();\\n    error CampaignNotOpen();\\n    error InvalidValues();\\n    error InvalidTier();\\n    error NotAFunder();\\n    error Undecided();\\n    error NoRefund();\\n    error CampaignUnsuccessful();\\n    error NotTheOwner();\\n    error NoFundDue();\\n    error NftTokensNotSet();\\n    error FunderHasClaimedNft();\\n    error NotReceivingFunds();\\n    error CampaignEnded();\\n    error FractionTooHigh();\\n    error DecisionMade();\\n    error AlreadyApproved();\\n    error ReleasingMoreThanFundRaised();\\n\\n    struct FundingTierCost {\\n        // Tier of NFT available\\n        uint256 fundingTier;\\n        // corresponding cost of the Tier\\n        uint256 tierCost;\\n    }\\n\\n    struct NftTierContract {\\n        // Tier of NFT available\\n        uint256 fundingTier;\\n        // corresponding NFT address\\n        address nftTokenAddress;\\n    }\\n\\n    struct MilestoneStruct {\\n        // id of the milestone\\n        uint256 milestoneNumber;\\n        // fraction of fund raised to be released * 100000\\n        uint256 fractionToBeReleased;\\n    }\\n    // decision made whether the campaign was sucessful\\n    enum CampaignState {\\n        SUCCESS,\\n        FAILURE,\\n        UNDECIDED\\n    }\\n    // reason for closing the campaign abruptly\\n    enum EndCampaign {\\n        TARGETMET,\\n        FAILURE\\n    }\\n\\n    // emitted when a contribution is received from an address\\n    event ContributionReceived(address funder, uint256 tier);\\n    // emmitted when manager role contributess on behalf of funders who contributed through fiat\\n    event FiatContributionReceived(address funder, uint256 amount);\\n    // emitted when a funder claims his refund after a campaign has been declared a failure\\n    event ContributionRefunded(address funder, uint256 tier);\\n    // emitted when campaign is declared successful\\n    event CampaignSuccessful(uint256 time);\\n    // emitted when campaign is declared unsuccessful\\n    event CampaignFailed(uint256 time);\\n    // emitted when fund is released to the business for withdrawal\\n    event FundReleased(address business, uint256 amount, uint256 time);\\n    // emitted when a funder claims his NFT perks after the campaign has been declared successful\\n    event NFTRewardClaimed(address funder, uint256 tier);\\n    // emmited if the caller is the owner of the given NFTtier\\n    event IsTheTrueOwner(address indexed owner, uint256 tier, uint256 tokenId);\\n    // emmited if the caller is not the owner of a given NFTtier\\n    event NotTheTrueOwner(address indexed caller, uint256 tier, uint256 tokenId);\\n\\n    ///@dev sets the allowed ERC20 tokens for the campaign\\n    function setAllowedToken(address _allowedErc20Token) external;\\n\\n    ///@dev sets the NFT perks contracts\\n    function setNftPerkContracts(NftTierContract[] memory _nftTierContracts) external;\\n\\n    ///@dev sets the MOAT treasury address\\n    function setTreasuryAddress(address _treasuryAddress) external;\\n\\n    /// @dev Set the wallet address of the business raising fund through this contract\\n    function setBusinessAddress(address _businessAddress) external;\\n\\n    ///@dev sets the available tiers and their corresponding prices\\n    function setFundingTiersAndCosts(FundingTierCost[] memory _fundingTiers) external;\\n\\n    /// @param _amountsToBeRaised array of length 2.\\n    function setTargetAmounts(uint256[] memory _amountsToBeRaised) external;\\n\\n    /// @param _campaignTimesAndDecision array of length 3.\\n    function setCampaignAndDecisionPeriod(uint256[] memory _campaignTimesAndDecision) external;\\n\\n    ///@dev sets the milestones\\n    function setMilestones(MilestoneStruct[] memory _milestonesData) external;\\n\\n    /// @param _feeFraction e.g 5% => 5 * (10**5) / 100 = 5000\\n    function setMOATFee(uint256 _feeFraction) external;\\n\\n    //////////////////////////////////////////////////\\n    //////////////// Main Functions /////////////////\\n    /////////////////////////////////////////////////\\n\\n    /// @notice Contribute fund on behalf of another address for the open campaign.\\n    /// @dev only accepts ERC-20 deposit when campaign is open\\n    /// @param _funder the contributor address\\n    /// @param _tier funding category\\n    /// @param _quantity number of tiers\\n    function contributeOnBehalfOf(address _funder, uint256 _tier, uint256 _quantity) external;\\n\\n    /// @notice Contribute fund from the connected wallet for the open campaign\\n    /// @dev only accepts ERC-20 deposit when campaign is open\\n    /// @param _tier funding category\\n    /// @param _quantity number of tiers\\n    function contribute(uint256 _tier, uint256 _quantity) external;\\n\\n    /// @notice The funders can claim refund only when the campaign failed\\n    /// @dev Claim a refund on behalf of a funder\\n    /// @param _funder the funder address\\n    /// @param _tier funding category\\n    function claimRefundFor(address _funder, uint256 _tier) external;\\n\\n    /// @notice The funders can claim refund only when the campaign failed\\n    /// @dev Claim a refund for the connected wallet\\n    /// @param _tier funding category\\n    function claimRefund(uint256 _tier) external;\\n\\n    /// @notice The funders can claim NFT perks when the campaign is successful\\n    /// @dev NFT with tokenId = _tier is transfer to the connected wallet\\n    /// @param _tier funding category\\n    function claimNft(uint256 _tier) external;\\n\\n    /// @notice The funders can claim NFT perks when the campaign is successful\\n    /// @dev Claim NFT for another _funder. NFT with tokenId = _tier is transfer to the _funder\\n    /// @param _funder the funder address\\n    /// @param _tier funding category\\n    function claimNftFor(address _funder, uint256 _tier) external;\\n\\n    /// @notice Funds are released to the authorised business wallet based on the\\n    /// milestone schedule.\\n    /// @dev Only the authorised business wallet can withdraw\\n    function withdrawFundRaised() external;\\n\\n    /// @notice Manager role can contribute fund on behalf of other addresses before decision time passed.\\n    /// @dev only accepts ERC-20 deposit before campaign decision time passed\\n    /// @param _funders array of funder addresses\\n    /// @param _tiers array of funding category\\n    /// @param _quantities array of number of tiers purchased by each funder\\n    /// All the arrays must be the same length\\n    function fiatContributeOnBehalfOf(address[] memory _funders, uint256[] memory _tiers, uint256[] memory _quantities, uint256 _totalAmount) external;\\n\\n    /// @notice Manager role can close the funding round before the decision time passed\\n    /// @dev reason for closing the campaign is required\\n    /// @param _reasonForEnding enum only accepts TARGETMET or FAILURE\\n    function closeFundingRound(EndCampaign _reasonForEnding) external;\\n\\n    /// @notice Manager role can approve the milestones at any time\\n    /// @dev milestone can be approved in any order\\n    /// @param _milestoneNumber the milestone to be approved\\n    function approveMilestoneAndReleaseFund(uint256 _milestoneNumber) external;\\n\\n    /// @dev Proves that a caller owns a particular NFT token by emitting IsTheTrueOwner event\\n    /// It emits NotTheTrueOwner event if the caller is not the owner\\n    /// @param _tier funding or perks category\\n    /// @param _tokenId id of the nft token\\n    function isOwnerOf(uint256 _tier, uint256 _tokenId) external;\\n\\n    /// @dev returns the array of all funder addresses\\n    function getFundersAddresses() external view returns (address[] memory);\\n\\n    /// @dev returns the quantities of tier perks bought so far\\n    /// @param _tier funding or perks category\\n    function getQuantityOfTierBought(uint256 _tier) external view returns (uint256);\\n\\n    /// @dev returns the price of a given tier\\n    /// @param _tier funding or perks category\\n    function getTierPrice(uint256 _tier) external view returns (uint256);\\n\\n    /// @dev returns the balance of the business address\\n    function getBusinessBalance() external view returns (uint256);\\n\\n}\\n\",\"keccak256\":\"0xde17c3e56b79b75621f0330a16277b82f7acd9fdff9120c47a7206c7de38542c\",\"license\":\"MIT\"},\"contracts/interfaces/INftPerks.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\ninterface INftPerks is IERC721 {\\n    error MaxSupplyReached();\\n    error NonexistentToken();\\n    error InvalidTokenUri();\\n    error InvalidValue();\\n\\n    struct RoyaltyInfo {\\n        // address to receive the royalties\\n        address recipient;\\n        // amount tokens to be paid as royalty\\n        uint256 amount;\\n    }\\n\\n    // Emitted when NFTs are minted\\n    event NFTMinted(uint256 indexed tokenId, address to);\\n    // Emitted when the base URI is updated\\n    event UriUpdated(string value);\\n\\n    /// @notice Mint NFT perks to the campaigner funders.\\n    /// @dev only the MINTER_ROLE can mint the NFT.\\n    /// @param _to the contributor address\\n    function mintNft(address _to) external;\\n\\n    /// @notice token uri must be set before calling this function\\n    /// @param _tokenId minted token id\\n    /// @return tokenUri token uri\\n    function tokenURI(uint256 _tokenId) external view returns (string memory);\\n\\n    /// @dev returns true if the maxSupply of the NFT tokens has been reacheds\\n    function hasReachedCap() external view returns (bool);\\n\\n    /// @dev returns true for all the interfaces supported by this contract.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n\\n    /// @notice Sets royalty address and fee\\n    /// @dev only MANAGER_ROLE can set the royalty fee\\n    /// @param _recipient funding category\\n    /// @param _royaltyFee numerator of %ge of the sales price to be paid as royalty\\n    /// e.g 5% => 5 * (10**5) / 100 = 5000\\n    function setRoyalties(address _recipient, uint256 _royaltyFee) external;\\n\\n    /// @dev The secondary marketplace have to call this function to get the royalty data\\n    /// @param _salePrice sales price of the NFT in the secondary market\\n    /// @return receiver address for receiving royalties\\n    /// @return royaltyAmount amount of tokens to be paid to the receiver address as royalty.\\n    function royaltyInfo(uint256, uint256 _salePrice) external view returns (address receiver, uint256 royaltyAmount);\\n}\\n\",\"keccak256\":\"0x429f2ae31cc0de0d1fbcbd502db3451b40996ce8df8a1ed03a43e7eccf39f2e3\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x60806040526004361061037a5760003560e01c80636aba253c116101d1578063b0100cf711610102578063d3717a02116100a0578063ec87621c1161006f578063ec87621c14610aba578063f35f206c14610adc578063f5e3dbdb14610b12578063fd4234e814610b3257600080fd5b8063d3717a0214610a26578063d547741f14610a46578063d84ed96614610a66578063e63ab1e914610a8657600080fd5b8063b68490bc116100dc578063b68490bc146109a3578063bc015f47146109c3578063bf3ea472146109e3578063c71c0b4014610a1057600080fd5b8063b0100cf714610931578063b0786fad14610961578063b2ab56e11461098357600080fd5b80638c5909171161016f578063a217fddf11610149578063a217fddf1461089f578063a4334daa146108b4578063a95185f0146108d4578063a9a4cab11461090457600080fd5b80638c5909171461082557806391d1485414610845578063953b8fb81461088957600080fd5b80637dd4ad2f116101ab5780637dd4ad2f146107ad5780637e3e010a146107da57806380961ad3146107f05780638456cb591461081057600080fd5b80636aba253c14610750578063750d0b67146107775780637b8b29ac1461079757600080fd5b80632ec09d39116102ab5780634e43ccb4116102495780635c975abb116102235780635c975abb146106e35780636605bfda146106fb57806366d021cb1461071b578063685406ca1461073057600080fd5b80634e43ccb41461068d5780634eb49482146106a35780635b7baf64146106c357600080fd5b8063371edcb211610285578063371edcb2146106185780633f4ba83a1461063257806341e1c716146106475780634c3adbfd1461066d57600080fd5b80632ec09d39146105b85780632f2ff15d146105d857806336568abe146105f857600080fd5b806313e7b33e11610318578063248a9ca3116102f2578063248a9ca314610503578063252a8875146105335780632669e8e3146105535780632b32e9ca1461058057600080fd5b806313e7b33e1461049f5780631583deb2146104b55780631a99dbaa146104ed57600080fd5b8063038b68dd11610354578063038b68dd1461041b5780630f01ec651461043b57806312498a701461045b578063134f275c1461047f57600080fd5b806301ffc9a714610389578063026686ee146103be57806302866962146103f957600080fd5b3661038457600080fd5b600080fd5b34801561039557600080fd5b506103a96103a4366004612e9d565b610b48565b60405190151581526020015b60405180910390f35b3480156103ca57600080fd5b506103a96103d9366004612edc565b601360209081526000928352604080842090915290825290205460ff1681565b34801561040557600080fd5b50610419610414366004613016565b610bb1565b005b34801561042757600080fd5b50610419610436366004612edc565b610c97565b34801561044757600080fd5b506104196104563660046130c5565b610e98565b34801561046757600080fd5b5061047160065481565b6040519081526020016103b5565b34801561048b57600080fd5b5061041961049a3660046130c5565b610f3b565b3480156104ab57600080fd5b5061047160055481565b3480156104c157600080fd5b506003546104d5906001600160a01b031681565b6040516001600160a01b0390911681526020016103b5565b3480156104f957600080fd5b5061047160075481565b34801561050f57600080fd5b5061047161051e3660046130fa565b60009081526020819052604090206001015490565b34801561053f57600080fd5b5061047161054e3660046130fa565b6110a8565b34801561055f57600080fd5b5061047161056e3660046130fa565b60116020526000908152604090205481565b34801561058c57600080fd5b5061047161059b366004612edc565b601060209081526000928352604080842090915290825290205481565b3480156105c457600080fd5b506104196105d33660046130fa565b611102565b3480156105e457600080fd5b506104196105f3366004613113565b61113c565b34801561060457600080fd5b50610419610613366004613113565b611161565b34801561062457600080fd5b50600f546103a99060ff1681565b34801561063e57600080fd5b506104196111ee565b34801561065357600080fd5b50600f546104d5906201000090046001600160a01b031681565b34801561067957600080fd5b50610419610688366004612edc565b611223565b34801561069957600080fd5b50610471600b5481565b3480156106af57600080fd5b506104196106be366004613143565b61136a565b3480156106cf57600080fd5b506104196106de3660046130fa565b611459565b3480156106ef57600080fd5b5060025460ff166103a9565b34801561070757600080fd5b50610419610716366004613178565b611493565b34801561072757600080fd5b50610419611514565b34801561073c57600080fd5b5061041961074b366004613016565b6116ab565b34801561075c57600080fd5b50601b5461076a9060ff1681565b6040516103b591906131ab565b34801561078357600080fd5b506104196107923660046131d3565b611755565b3480156107a357600080fd5b50610471600e5481565b3480156107b957600080fd5b506104716107c83660046130fa565b60156020526000908152604090205481565b3480156107e657600080fd5b5061047160085481565b3480156107fc57600080fd5b5061047161080b3660046130fa565b61189f565b34801561081c57600080fd5b506104196118cd565b34801561083157600080fd5b506104196108403660046131f4565b6118ff565b34801561085157600080fd5b506103a9610860366004613113565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b34801561089557600080fd5b5061047160095481565b3480156108ab57600080fd5b50610471600081565b3480156108c057600080fd5b506104196108cf3660046130fa565b61190a565b3480156108e057600080fd5b506103a96108ef3660046130fa565b60166020526000908152604090205460ff1681565b34801561091057600080fd5b506003546001600160a01b0316600090815260176020526040902054610471565b34801561093d57600080fd5b506103a961094c366004613178565b60146020526000908152604090205460ff1681565b34801561096d57600080fd5b50610976611a35565b6040516103b59190613216565b34801561098f57600080fd5b5061041961099e366004613263565b611ab4565b3480156109af57600080fd5b506104196109be366004613178565b611bbd565b3480156109cf57600080fd5b506104196109de3660046130fa565b611c3f565b3480156109ef57600080fd5b506104716109fe366004613178565b60176020526000908152604090205481565b348015610a1c57600080fd5b50610471600a5481565b348015610a3257600080fd5b50610419610a41366004613178565b611ca4565b348015610a5257600080fd5b50610419610a61366004613113565b611d15565b348015610a7257600080fd5b50610419610a81366004613318565b611d3a565b348015610a9257600080fd5b506104717f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a81565b348015610ac657600080fd5b5061047160008051602061360e83398151915281565b348015610ae857600080fd5b506104d5610af73660046130fa565b6012602052600090815260409020546001600160a01b031681565b348015610b1e57600080fd5b50610419610b2d3660046131f4565b611fce565b348015610b3e57600080fd5b50610471600c5481565b60006001600160e01b031982167f7965db0b000000000000000000000000000000000000000000000000000000001480610bab57507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b03198316145b92915050565b60008051602061360e833981519152610bc9816122fa565b60005b8251811015610c9257620186a0838281518110610beb57610beb613406565b6020026020010151602001511115610c2f576040517f6db0b76a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b828181518110610c4157610c41613406565b60200260200101516020015160156000858481518110610c6357610c63613406565b60200260200101516000015181526020019081526020016000208190555080610c8b90613432565b9050610bcc565b505050565b600f5460ff16610cd3576040517f85cd26fd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610cdb612304565b610ce361235d565b610ceb6123b0565b601b805460ff19166001836002811115610d0757610d07613195565b02179055506000601b5460ff166002811115610d2557610d25613195565b14610d4357604051638d05f51560e01b815260040160405180910390fd5b6001600160a01b038216600090815260136020908152604080832084845290915290205460ff1615610da1576040517f708d73f200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b03821660008181526010602090815260408083208584528083528184208054958552601384528285208786528452918420805460ff191660011790559091528190555b81811015610e8957600083815260126020526040908190205490517fe9c2e14b0000000000000000000000000000000000000000000000000000000081526001600160a01b0386811660048301529091169063e9c2e14b90602401600060405180830381600087803b158015610e6057600080fd5b505af1158015610e74573d6000803e3d6000fd5b5050505080610e8290613432565b9050610deb565b5050610e9460018055565b5050565b60008051602061360e833981519152610eb0816122fa565b600754421115610ed35760405163488e80ff60e01b815260040160405180910390fd5b8151600214610ef55760405163516e361d60e11b815260040160405180910390fd5b81600081518110610f0857610f08613406565b602002602001015160088190555081600181518110610f2957610f29613406565b60200260200101516009819055505050565b60008051602061360e833981519152610f53816122fa565b8151600314610f755760405163516e361d60e11b815260040160405180910390fd5b60055442101561100f5781600081518110610f9257610f92613406565b602002602001015160058190555081600181518110610fb357610fb3613406565b602002602001015160068190555061100882600281518110610fd757610fd7613406565b602002602001015183600181518110610ff257610ff2613406565b60200260200101516120f490919063ffffffff16565b6007555050565b61101761247c565b1561102f5781600181518110610fb357610fb3613406565b6006544210158015611042575060075442105b15611076576110088260028151811061105d5761105d613406565b60200260200101516006546120f490919063ffffffff16565b6040517f553ae05400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008181526011602052604081205481036110ef576040517fe142361700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5060009081526011602052604090205490565b3360008181526014602052604090205460ff166111325760405163e02a527360e01b815260040160405180910390fd5b610e943383610c97565b600082815260208190526040902060010154611157816122fa565b610c9283836124e7565b6001600160a01b03811633146111e45760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c66000000000000000000000000000000000060648201526084015b60405180910390fd5b610e948282612585565b7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a611218816122fa565b611220612604565b50565b61122b612304565b61123361235d565b61123b6123b0565b601b805460ff1916600183600281111561125757611257613195565b02179055506000601b5460ff16600281111561127557611275613195565b036112935760405163c6dfc20160e01b815260040160405180910390fd5b6001600160a01b038216600090815260106020908152604080832084845282528083205460119092528220549091906112cc9083612657565b9050600081116112ef5760405163c6dfc20160e01b815260040160405180910390fd5b6001600160a01b038416600090815260106020908152604080832086845290915281205561131d8482612663565b604080516001600160a01b0386168152602081018590527f2ef47cadc7e07ee6cea296446c8ca85ff6955693411d8868f7a04b6850034f08910160405180910390a15050610e9460018055565b611372612304565b61137a61235d565b826001600160a01b0381166113a25760405163d92e233d60e01b815260040160405180910390fd5b6113aa61247c565b15156001146113e5576040517fdf2d6b2800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000838152601160205260408120546113fe9084612657565b9050600081116114215760405163029819b760e01b815260040160405180910390fd5b61142b3382612682565b80600a600082825461143d919061344b565b9091555061144e905085858561276b565b5050610c9260018055565b3360008181526014602052604090205460ff166114895760405163e02a527360e01b815260040160405180910390fd5b610e943383611223565b60008051602061360e8339815191526114ab816122fa565b816001600160a01b0381166114d35760405163d92e233d60e01b815260040160405180910390fd5b5050600280546001600160a01b03909216610100027fffffffffffffffffffffff0000000000000000000000000000000000000000ff909216919091179055565b61151c612304565b61152461235d565b6003546001600160a01b03163314611568576040517f36b6b89500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6115706123b0565b601b805460ff1916600183600281111561158c5761158c613195565b0217905550600754421180156115b957506000601b5460ff1660028111156115b6576115b6613195565b14155b156115d757604051638d05f51560e01b815260040160405180910390fd5b6003546001600160a01b031660009081526017602052604090205480611629576040517f569323d200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600380546001600160a01b039081166000908152601760205260408120559054611654911682612663565b600354604080516001600160a01b039092168252602082018390524282820152517f3df25ea0269b814fac9e2b26b3cc6971a48c7bdd35be407f416e44a16466325b9181900360600190a1506116a960018055565b565b60008051602061360e8339815191526116c3816122fa565b6005544211156116e65760405163488e80ff60e01b815260040160405180910390fd5b60005b8251811015610c925782818151811061170457611704613406565b6020026020010151602001516011600085848151811061172657611726613406565b6020026020010151600001518152602001908152602001600020819055508061174e90613432565b90506116e9565b60008051602061360e83398151915261176d816122fa565b6117756123b0565b601b805460ff1916600183600281111561179157611791613195565b0217905550600754421180156117be57506002601b5460ff1660028111156117bb576117bb613195565b14155b156117f5576040517f61a7916f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b426006819055600755600082600181111561181257611812613195565b0361182957601b805460ff19169055610e9461289e565b600182600181111561183d5761183d613195565b0361188657601b805460ff191660011790556040514281527f7b1418b19a03b176f641639ee79855da661fa88a08377ecd32ad6d38152b95369060200160405180910390a15050565b60405163516e361d60e11b815260040160405180910390fd5b600060008051602061360e8339815191526118b9816122fa565b505060009081526018602052604090205490565b7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a6118f7816122fa565b611220612949565b610e9433838361136a565b60008051602061360e833981519152611922816122fa565b61192a61235d565b6119326123b0565b601b805460ff1916600183600281111561194e5761194e613195565b021790555060075442101561198f576040517fc8dcac8200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000601b5460ff1660028111156119a8576119a8613195565b146119c657604051638d05f51560e01b815260040160405180910390fd5b60008281526016602052604090205460ff161515600103611a13576040517f101f817a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000828152601660205260409020805460ff19166001179055610e9482612986565b606060008051602061360e833981519152611a4f816122fa565b60006004805480602002602001604051908101604052809291908181526020018280548015611aa757602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611a89575b5093965050505050505090565b60008051602061360e833981519152611acc816122fa565b60005b8251811015611bab5760006001600160a01b0316838281518110611af557611af5613406565b6020026020010151602001516001600160a01b031603611b285760405163d92e233d60e01b815260040160405180910390fd5b828181518110611b3a57611b3a613406565b60200260200101516020015160126000858481518110611b5c57611b5c613406565b602002602001015160000151815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b0316021790555080611ba490613432565b9050611acf565b5050600f805460ff1916600117905550565b60008051602061360e833981519152611bd5816122fa565b816001600160a01b038116611bfd5760405163d92e233d60e01b815260040160405180910390fd5b5050600f80546001600160a01b0390921662010000027fffffffffffffffffffff0000000000000000000000000000000000000000ffff909216919091179055565b60008051602061360e833981519152611c57816122fa565b620186a0821115611c7b5760405163516e361d60e11b815260040160405180910390fd5b600554421115611c9e5760405163488e80ff60e01b815260040160405180910390fd5b50600c55565b60008051602061360e833981519152611cbc816122fa565b816001600160a01b038116611ce45760405163d92e233d60e01b815260040160405180910390fd5b50506003805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b600082815260208190526040902060010154611d30816122fa565b610c928383612585565b60008051602061360e833981519152611d52816122fa565b611d5a612304565b611d6261235d565b611d6a6123b0565b601b805460ff19166001836002811115611d8657611d86613195565b0217905550600554421080611d9c575060075442115b80611dbe57506002601b5460ff166002811115611dbb57611dbb613195565b14155b15611df5576040517f6c9007f600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b83518551141580611e0857508251855114155b15611e265760405163516e361d60e11b815260040160405180910390fd5b611e303383612682565b81600a6000828254611e42919061344b565b90915550600090505b8551811015611f845760006001600160a01b0316868281518110611e7157611e71613406565b60200260200101516001600160a01b031603611ea05760405163d92e233d60e01b815260040160405180910390fd5b6000611efa858381518110611eb757611eb7613406565b602002602001015160116000898681518110611ed557611ed5613406565b602002602001015181526020019081526020016000205461265790919063ffffffff16565b905060008111611f1d5760405163029819b760e01b815260040160405180910390fd5b611f73878381518110611f3257611f32613406565b6020026020010151878481518110611f4c57611f4c613406565b6020026020010151878581518110611f6657611f66613406565b602002602001015161276b565b50611f7d81613432565b9050611e4b565b5060408051338152602081018490527fe239e1105983e10084987392ebe93c0f25988539d0d3af5edef1734822bb4054910160405180910390a1611fc760018055565b5050505050565b6000828152601260205260408082205490517f6352211e000000000000000000000000000000000000000000000000000000008152600481018490526001600160a01b0390911690636352211e90602401602060405180830381865afa15801561203c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612060919061345e565b90506001600160a01b03811633036120bc5760408051848152602081018490526001600160a01b038316917fedd4554240dd1a638b09c980f40dc703eb268830b6c510fe08bb85ad718a49a491015b60405180910390a2505050565b604080518481526020810184905233917fc47708ace68bd929f19b2bd1463a10f326d7cedb49787e9cab6539032e5d518691016120af565b6000612100828461344b565b9392505050565b6060610bab6001600160a01b03831660145b6060600061212883600261347b565b61213390600261344b565b67ffffffffffffffff81111561214b5761214b612f08565b6040519080825280601f01601f191660200182016040528015612175576020820181803683370190505b5090507f3000000000000000000000000000000000000000000000000000000000000000816000815181106121ac576121ac613406565b60200101906001600160f81b031916908160001a9053507f7800000000000000000000000000000000000000000000000000000000000000816001815181106121f7576121f7613406565b60200101906001600160f81b031916908160001a905350600061221b84600261347b565b61222690600161344b565b90505b60018111156122ab577f303132333435363738396162636465660000000000000000000000000000000085600f166010811061226757612267613406565b1a60f81b82828151811061227d5761227d613406565b60200101906001600160f81b031916908160001a90535060049490941c936122a481613492565b9050612229565b5083156121005760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016111db565b6112208133612a4c565b6002600154036123565760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016111db565b6002600155565b60025460ff16156116a95760405162461bcd60e51b815260206004820152601060248201527f5061757361626c653a207061757365640000000000000000000000000000000060448201526064016111db565b6000600754421180156123c75750600854600a5410155b80156123ea57506001601b5460ff1660028111156123e7576123e7613195565b14155b156123fd576123f761289e565b50600090565b600754421180156124115750600854600a54105b801561243457506000601b5460ff16600281111561243157612431613195565b14155b15612472576040514281527f7b1418b19a03b176f641639ee79855da661fa88a08377ecd32ad6d38152b95369060200160405180910390a150600190565b50601b5460ff1690565b60006124866123b0565b601b805460ff191660018360028111156124a2576124a2613195565b0217905550600554421180156124ba57506006544211155b80156124dc57506002601b5460ff1660028111156124da576124da613195565b145b156123f75750600190565b6000828152602081815260408083206001600160a01b038516845290915290205460ff16610e94576000828152602081815260408083206001600160a01b03851684529091529020805460ff191660011790556125413390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000828152602081815260408083206001600160a01b038516845290915290205460ff1615610e94576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b61260c612abf565b6002805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b0390911681526020015b60405180910390a1565b6000612100828461347b565b600f548290610c92906201000090046001600160a01b03168284612b11565b600f546040517fdd62ed3e0000000000000000000000000000000000000000000000000000000081526001600160a01b0384811660048301523060248301528392620100009004169063dd62ed3e90604401602060405180830381865afa1580156126f1573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061271591906134a9565b101561274d576040517ffc8bf36c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600f54610e94906201000090046001600160a01b0316833084612ba2565b6001600160a01b03831660009081526010602090815260408083208584529091528120805483929061279e90849061344b565b9091555050600082815260186020526040812080548392906127c190849061344b565b9091555050604080516001600160a01b0385168152602081018490527f1bb460ccaaf70fbacfec17a376f8acbd278c1405590ffcc8ebe4b88daf4f64ad910160405180910390a16001600160a01b03831660009081526014602052604090205460ff16610c92576004805460018181019092557f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b0180546001600160a01b03861673ffffffffffffffffffffffffffffffffffffffff1990911681179091556000908152601460205260409020805460ff19169091179055505050565b600f54610100900460ff1615156000036116a9576128d6620186a06128d0600c54600a5461265790919063ffffffff16565b90612bf9565b600d819055600a546128e791612c05565b600b55600f805461010061ff00199091168117909155600254600d54612919929091046001600160a01b031690612663565b6040514281527ff2460a88147f5180b9df3609a3c66dda39614029da9fdf0b90564b7154374d2f9060200161264d565b61295161235d565b6002805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586126393390565b600081815260156020526040812054600b549091906129af90620186a0906128d0908590612657565b9050600b546129c982600e546120f490919063ffffffff16565b1115612a01576040517fb24d2a1c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80600e6000828254612a13919061344b565b90915550506003546001600160a01b031660009081526017602052604081208054839290612a4290849061344b565b9091555050505050565b6000828152602081815260408083206001600160a01b038516845290915290205460ff16610e9457612a7d81612107565b612a88836020612119565b604051602001612a999291906134e6565b60408051601f198184030181529082905262461bcd60e51b82526111db91600401613567565b60025460ff166116a95760405162461bcd60e51b815260206004820152601460248201527f5061757361626c653a206e6f742070617573656400000000000000000000000060448201526064016111db565b6040516001600160a01b038316602482015260448101829052610c929084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166001600160e01b031990931692909217909152612c11565b6040516001600160a01b0380851660248301528316604482015260648101829052612bf39085907f23b872dd0000000000000000000000000000000000000000000000000000000090608401612b56565b50505050565b6000612100828461359a565b600061210082846135bc565b6000612c66826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316612cf69092919063ffffffff16565b805190915015610c925780806020019051810190612c8491906135cf565b610c925760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084016111db565b6060612d058484600085612d0d565b949350505050565b606082471015612d855760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c000000000000000000000000000000000000000000000000000060648201526084016111db565b600080866001600160a01b03168587604051612da191906135f1565b60006040518083038185875af1925050503d8060008114612dde576040519150601f19603f3d011682016040523d82523d6000602084013e612de3565b606091505b5091509150612df487838387612dff565b979650505050505050565b60608315612e6e578251600003612e67576001600160a01b0385163b612e675760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016111db565b5081612d05565b612d058383815115612e835781518083602001fd5b8060405162461bcd60e51b81526004016111db9190613567565b600060208284031215612eaf57600080fd5b81356001600160e01b03198116811461210057600080fd5b6001600160a01b038116811461122057600080fd5b60008060408385031215612eef57600080fd5b8235612efa81612ec7565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff81118282101715612f4157612f41612f08565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715612f7057612f70612f08565b604052919050565b600067ffffffffffffffff821115612f9257612f92612f08565b5060051b60200190565b6000612faf612faa84612f78565b612f47565b8381529050602080820190600685901b840186811115612fce57600080fd5b845b8181101561300b5760408189031215612fe95760008081fd5b612ff1612f1e565b813581528382013584820152845292820192604001612fd0565b505050509392505050565b60006020828403121561302857600080fd5b813567ffffffffffffffff81111561303f57600080fd5b8201601f8101841361305057600080fd5b612d0584823560208401612f9c565b600082601f83011261307057600080fd5b81356020613080612faa83612f78565b82815260059290921b8401810191818101908684111561309f57600080fd5b8286015b848110156130ba57803583529183019183016130a3565b509695505050505050565b6000602082840312156130d757600080fd5b813567ffffffffffffffff8111156130ee57600080fd5b612d058482850161305f565b60006020828403121561310c57600080fd5b5035919050565b6000806040838503121561312657600080fd5b82359150602083013561313881612ec7565b809150509250929050565b60008060006060848603121561315857600080fd5b833561316381612ec7565b95602085013595506040909401359392505050565b60006020828403121561318a57600080fd5b813561210081612ec7565b634e487b7160e01b600052602160045260246000fd5b60208101600383106131cd57634e487b7160e01b600052602160045260246000fd5b91905290565b6000602082840312156131e557600080fd5b81356002811061210057600080fd5b6000806040838503121561320757600080fd5b50508035926020909101359150565b6020808252825182820181905260009190848201906040850190845b818110156132575783516001600160a01b031683529284019291840191600101613232565b50909695505050505050565b6000602080838503121561327657600080fd5b823567ffffffffffffffff81111561328d57600080fd5b8301601f8101851361329e57600080fd5b80356132ac612faa82612f78565b81815260069190911b820183019083810190878311156132cb57600080fd5b928401925b82841015612df457604084890312156132e95760008081fd5b6132f1612f1e565b843581528585013561330281612ec7565b81870152825260409390930192908401906132d0565b6000806000806080858703121561332e57600080fd5b843567ffffffffffffffff8082111561334657600080fd5b818701915087601f83011261335a57600080fd5b8135602061336a612faa83612f78565b82815260059290921b8401810191818101908b84111561338957600080fd5b948201945b838610156133b05785356133a181612ec7565b8252948201949082019061338e565b985050880135925050808211156133c657600080fd5b6133d28883890161305f565b945060408701359150808211156133e857600080fd5b506133f58782880161305f565b949793965093946060013593505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600182016134445761344461341c565b5060010190565b80820180821115610bab57610bab61341c565b60006020828403121561347057600080fd5b815161210081612ec7565b8082028115828204841417610bab57610bab61341c565b6000816134a1576134a161341c565b506000190190565b6000602082840312156134bb57600080fd5b5051919050565b60005b838110156134dd5781810151838201526020016134c5565b50506000910152565b7f416363657373436f6e74726f6c3a206163636f756e742000000000000000000081526000835161351e8160178501602088016134c2565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000601791840191820152835161355b8160288401602088016134c2565b01602801949350505050565b60208152600082518060208401526135868160408501602087016134c2565b601f01601f19169190910160400192915050565b6000826135b757634e487b7160e01b600052601260045260246000fd5b500490565b81810381811115610bab57610bab61341c565b6000602082840312156135e157600080fd5b8151801515811461210057600080fd5b600082516136038184602087016134c2565b919091019291505056fe241ecf16d79d0f8dbfb92cbc07fe17840425976cf0667f022fe9877caa831b08a2646970667358221220db9318572f9b1f522a4a00d7a49f276316879a537d59385098c5be0ea99b7c7564736f6c63430008110033",
  "devdoc": {
    "custom:security-contact": "hello@moat.com",
    "details": "This implements ERC-721 NFT as the rewards (NFT perks) to be minted to the funders.",
    "kind": "dev",
    "methods": {
      "approveMilestoneAndReleaseFund(uint256)": {
        "details": "milestone can be approved in any order",
        "params": {
          "_milestoneNumber": "the milestone to be approved"
        }
      },
      "claimNft(uint256)": {
        "details": "NFT with tokenId = _tier is transfer to the connected wallet",
        "params": {
          "_tier": "funding category"
        }
      },
      "claimNftFor(address,uint256)": {
        "details": "Claim NFT for another _funder. NFT with tokenId = _tier is transfer to the _funder",
        "params": {
          "_funder": "the funder address",
          "_tier": "funding category"
        }
      },
      "claimRefund(uint256)": {
        "details": "Claim a refund for the connected wallet",
        "params": {
          "_tier": "funding category"
        }
      },
      "claimRefundFor(address,uint256)": {
        "details": "Claim a refund on behalf of a funder",
        "params": {
          "_funder": "the funder address",
          "_tier": "funding category"
        }
      },
      "closeFundingRound(uint8)": {
        "details": "reason for closing the campaign is required",
        "params": {
          "_reasonForEnding": "enum only accepts TARGETMET or FAILURE"
        }
      },
      "contribute(uint256,uint256)": {
        "details": "only accepts ERC-20 deposit when campaign is open",
        "params": {
          "_quantity": "number of tiers",
          "_tier": "funding category"
        }
      },
      "contributeOnBehalfOf(address,uint256,uint256)": {
        "details": "only accepts ERC-20 deposit when campaign is open",
        "params": {
          "_funder": "the contributor address",
          "_quantity": "number of tiers",
          "_tier": "funding category"
        }
      },
      "fiatContributeOnBehalfOf(address[],uint256[],uint256[],uint256)": {
        "details": "only accepts ERC-20 deposit before campaign decision time passed",
        "params": {
          "_funders": "array of funder addresses",
          "_quantities": "array of number of tiers purchased by each funder All the arrays must be the same length",
          "_tiers": "array of funding category"
        }
      },
      "getBusinessBalance()": {
        "details": "returns the balance of the business address"
      },
      "getFundersAddresses()": {
        "details": "returns the array of all funder addresses"
      },
      "getQuantityOfTierBought(uint256)": {
        "details": "returns the quantities of tier perks bought so far",
        "params": {
          "_tier": "funding or perks category"
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getTierPrice(uint256)": {
        "details": "returns the price of a given tier",
        "params": {
          "_tier": "funding or perks category"
        }
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "isOwnerOf(uint256,uint256)": {
        "details": "Proves that a caller owns a particular NFT token by emitting IsTheTrueOwner event It emits NotTheTrueOwner event if the caller is not the owner",
        "params": {
          "_tier": "funding or perks category",
          "_tokenId": "id of the nft token"
        }
      },
      "pause()": {
        "details": "Pauses the contract"
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "setAllowedToken(address)": {
        "details": "sets the allowed ERC20 tokens for the campaign"
      },
      "setBusinessAddress(address)": {
        "details": "Set the wallet address of the business raising fund through this contract"
      },
      "setCampaignAndDecisionPeriod(uint256[])": {
        "params": {
          "_campaignTimesAndDecision": "array of length 3."
        }
      },
      "setFundingTiersAndCosts((uint256,uint256)[])": {
        "details": "sets the available tiers and their corresponding prices"
      },
      "setMOATFee(uint256)": {
        "params": {
          "_feeFraction": "e.g 5% => 5 * (10**5) / 100 = 5000"
        }
      },
      "setMilestones((uint256,uint256)[])": {
        "details": "sets the milestones"
      },
      "setNftPerkContracts((uint256,address)[])": {
        "details": "sets the NFT perks contracts"
      },
      "setTargetAmounts(uint256[])": {
        "params": {
          "_amountsToBeRaised": "array of length 2."
        }
      },
      "setTreasuryAddress(address)": {
        "details": "sets the MOAT treasury address"
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "unpause()": {
        "details": "Unpauses the contract"
      },
      "withdrawFundRaised()": {
        "details": "Only the authorised business wallet can withdraw"
      }
    },
    "title": "MOAT Crowd-funding Contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "approveMilestoneAndReleaseFund(uint256)": {
        "notice": "Manager role can approve the milestones at any time"
      },
      "claimNft(uint256)": {
        "notice": "The funders can claim NFT perks when the campaign is successful"
      },
      "claimNftFor(address,uint256)": {
        "notice": "The funders can claim NFT perks when the campaign is successful"
      },
      "claimRefund(uint256)": {
        "notice": "The funders can claim refund only when the campaign failed"
      },
      "claimRefundFor(address,uint256)": {
        "notice": "The funders can claim refund only when the campaign failed"
      },
      "closeFundingRound(uint8)": {
        "notice": "Manager role can close the funding round before the decision time passed"
      },
      "contribute(uint256,uint256)": {
        "notice": "Contribute fund from the connected wallet for the open campaign"
      },
      "contributeOnBehalfOf(address,uint256,uint256)": {
        "notice": "Contribute fund on behalf of another address for the open campaign."
      },
      "fiatContributeOnBehalfOf(address[],uint256[],uint256[],uint256)": {
        "notice": "Manager role can contribute fund on behalf of other addresses before decision time passed."
      },
      "withdrawFundRaised()": {
        "notice": "Funds are released to the authorised business wallet based on the milestone schedule."
      }
    },
    "notice": "This contract is for crowd-funding a business by interested parties and to release funds to the business in a transparent but monitored way. Rewards, in form of NFTs are distributed to funders after the funding round has been declared successful.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 24,
        "contract": "contracts/FundABusiness.sol:FundABusiness",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)"
      },
      {
        "astId": 507,
        "contract": "contracts/FundABusiness.sol:FundABusiness",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 406,
        "contract": "contracts/FundABusiness.sol:FundABusiness",
        "label": "_paused",
        "offset": 0,
        "slot": "2",
        "type": "t_bool"
      },
      {
        "astId": 3028,
        "contract": "contracts/FundABusiness.sol:FundABusiness",
        "label": "treasuryAddress",
        "offset": 1,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 3030,
        "contract": "contracts/FundABusiness.sol:FundABusiness",
        "label": "businessAddress",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 3033,
        "contract": "contracts/FundABusiness.sol:FundABusiness",
        "label": "fundersAddresses",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 3035,
        "contract": "contracts/FundABusiness.sol:FundABusiness",
        "label": "campaignStartTime",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 3037,
        "contract": "contracts/FundABusiness.sol:FundABusiness",
        "label": "campaignEndTime",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 3039,
        "contract": "contracts/FundABusiness.sol:FundABusiness",
        "label": "campaignDecisionTime",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 3041,
        "contract": "contracts/FundABusiness.sol:FundABusiness",
        "label": "minTargetAmount",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 3043,
        "contract": "contracts/FundABusiness.sol:FundABusiness",
        "label": "targetAmount",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 3045,
        "contract": "contracts/FundABusiness.sol:FundABusiness",
        "label": "fundRaised",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 3047,
        "contract": "contracts/FundABusiness.sol:FundABusiness",
        "label": "fundRaisedMinusFee",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 3049,
        "contract": "contracts/FundABusiness.sol:FundABusiness",
        "label": "moatFeeNumerator",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 3051,
        "contract": "contracts/FundABusiness.sol:FundABusiness",
        "label": "moatFee",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 3053,
        "contract": "contracts/FundABusiness.sol:FundABusiness",
        "label": "cumFundReleased",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 3056,
        "contract": "contracts/FundABusiness.sol:FundABusiness",
        "label": "areNftTokensSet",
        "offset": 0,
        "slot": "15",
        "type": "t_bool"
      },
      {
        "astId": 3059,
        "contract": "contracts/FundABusiness.sol:FundABusiness",
        "label": "isFeeTaken",
        "offset": 1,
        "slot": "15",
        "type": "t_bool"
      },
      {
        "astId": 3062,
        "contract": "contracts/FundABusiness.sol:FundABusiness",
        "label": "allowedErc20Token",
        "offset": 2,
        "slot": "15",
        "type": "t_contract(IERC20)628"
      },
      {
        "astId": 3068,
        "contract": "contracts/FundABusiness.sol:FundABusiness",
        "label": "tierBalanceOf",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 3072,
        "contract": "contracts/FundABusiness.sol:FundABusiness",
        "label": "tierCost",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 3077,
        "contract": "contracts/FundABusiness.sol:FundABusiness",
        "label": "nftContractOf",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_uint256,t_contract(INftPerks)5017)"
      },
      {
        "astId": 3083,
        "contract": "contracts/FundABusiness.sol:FundABusiness",
        "label": "hasClaimedNft",
        "offset": 0,
        "slot": "19",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))"
      },
      {
        "astId": 3087,
        "contract": "contracts/FundABusiness.sol:FundABusiness",
        "label": "isAFunder",
        "offset": 0,
        "slot": "20",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 3091,
        "contract": "contracts/FundABusiness.sol:FundABusiness",
        "label": "fractionOfMilestone",
        "offset": 0,
        "slot": "21",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 3095,
        "contract": "contracts/FundABusiness.sol:FundABusiness",
        "label": "isMilestoneApproved",
        "offset": 0,
        "slot": "22",
        "type": "t_mapping(t_uint256,t_bool)"
      },
      {
        "astId": 3099,
        "contract": "contracts/FundABusiness.sol:FundABusiness",
        "label": "businessBalance",
        "offset": 0,
        "slot": "23",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3103,
        "contract": "contracts/FundABusiness.sol:FundABusiness",
        "label": "quantityOfTierBought",
        "offset": 0,
        "slot": "24",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 3107,
        "contract": "contracts/FundABusiness.sol:FundABusiness",
        "label": "fundingTiersCosts",
        "offset": 0,
        "slot": "25",
        "type": "t_array(t_struct(FundingTierCost)4689_storage)dyn_storage"
      },
      {
        "astId": 3111,
        "contract": "contracts/FundABusiness.sol:FundABusiness",
        "label": "nftTierContracts",
        "offset": 0,
        "slot": "26",
        "type": "t_array(t_struct(NftTierContract)4694_storage)dyn_storage"
      },
      {
        "astId": 3114,
        "contract": "contracts/FundABusiness.sol:FundABusiness",
        "label": "verdict",
        "offset": 0,
        "slot": "27",
        "type": "t_enum(CampaignState)4703"
      },
      {
        "astId": 3117,
        "contract": "contracts/FundABusiness.sol:FundABusiness",
        "label": "reasonForEnding",
        "offset": 1,
        "slot": "27",
        "type": "t_enum(EndCampaign)4706"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(FundingTierCost)4689_storage)dyn_storage": {
        "base": "t_struct(FundingTierCost)4689_storage",
        "encoding": "dynamic_array",
        "label": "struct IFundABusiness.FundingTierCost[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(NftTierContract)4694_storage)dyn_storage": {
        "base": "t_struct(NftTierContract)4694_storage",
        "encoding": "dynamic_array",
        "label": "struct IFundABusiness.NftTierContract[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)628": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(INftPerks)5017": {
        "encoding": "inplace",
        "label": "contract INftPerks",
        "numberOfBytes": "20"
      },
      "t_enum(CampaignState)4703": {
        "encoding": "inplace",
        "label": "enum IFundABusiness.CampaignState",
        "numberOfBytes": "1"
      },
      "t_enum(EndCampaign)4706": {
        "encoding": "inplace",
        "label": "enum IFundABusiness.EndCampaign",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)19_storage"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_contract(INftPerks)5017)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => contract INftPerks)",
        "numberOfBytes": "32",
        "value": "t_contract(INftPerks)5017"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(FundingTierCost)4689_storage": {
        "encoding": "inplace",
        "label": "struct IFundABusiness.FundingTierCost",
        "members": [
          {
            "astId": 4686,
            "contract": "contracts/FundABusiness.sol:FundABusiness",
            "label": "fundingTier",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4688,
            "contract": "contracts/FundABusiness.sol:FundABusiness",
            "label": "tierCost",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(NftTierContract)4694_storage": {
        "encoding": "inplace",
        "label": "struct IFundABusiness.NftTierContract",
        "members": [
          {
            "astId": 4691,
            "contract": "contracts/FundABusiness.sol:FundABusiness",
            "label": "fundingTier",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4693,
            "contract": "contracts/FundABusiness.sol:FundABusiness",
            "label": "nftTokenAddress",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(RoleData)19_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 16,
            "contract": "contracts/FundABusiness.sol:FundABusiness",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 18,
            "contract": "contracts/FundABusiness.sol:FundABusiness",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
