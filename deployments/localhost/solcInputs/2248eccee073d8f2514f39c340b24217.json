{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/AccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\nimport \"../utils/Context.sol\";\nimport \"../utils/Strings.sol\";\nimport \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\n     *\n     * Format of the revert message is described in {_checkRole}.\n     *\n     * _Available since v4.6._\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        Strings.toHexString(account),\n                        \" is missing role \",\n                        Strings.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * May emit a {RoleGranted} event.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/IAccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
    },
    "@openzeppelin/contracts/security/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        require(!paused(), \"Pausable: paused\");\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        require(paused(), \"Pausable: not paused\");\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../extensions/draft-IERC20Permit.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165Checker.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/introspection/ERC165Checker.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Library used to query support of an interface declared via {IERC165}.\n *\n * Note that these functions return the actual result of the query: they do not\n * `revert` if an interface is not supported. It is up to the caller to decide\n * what to do in these cases.\n */\nlibrary ERC165Checker {\n    // As per the EIP-165 spec, no interface should ever match 0xffffffff\n    bytes4 private constant _INTERFACE_ID_INVALID = 0xffffffff;\n\n    /**\n     * @dev Returns true if `account` supports the {IERC165} interface.\n     */\n    function supportsERC165(address account) internal view returns (bool) {\n        // Any contract that implements ERC165 must explicitly indicate support of\n        // InterfaceId_ERC165 and explicitly indicate non-support of InterfaceId_Invalid\n        return\n            supportsERC165InterfaceUnchecked(account, type(IERC165).interfaceId) &&\n            !supportsERC165InterfaceUnchecked(account, _INTERFACE_ID_INVALID);\n    }\n\n    /**\n     * @dev Returns true if `account` supports the interface defined by\n     * `interfaceId`. Support for {IERC165} itself is queried automatically.\n     *\n     * See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(address account, bytes4 interfaceId) internal view returns (bool) {\n        // query support of both ERC165 as per the spec and support of _interfaceId\n        return supportsERC165(account) && supportsERC165InterfaceUnchecked(account, interfaceId);\n    }\n\n    /**\n     * @dev Returns a boolean array where each value corresponds to the\n     * interfaces passed in and whether they're supported or not. This allows\n     * you to batch check interfaces for a contract where your expectation\n     * is that some interfaces may not be supported.\n     *\n     * See {IERC165-supportsInterface}.\n     *\n     * _Available since v3.4._\n     */\n    function getSupportedInterfaces(address account, bytes4[] memory interfaceIds)\n        internal\n        view\n        returns (bool[] memory)\n    {\n        // an array of booleans corresponding to interfaceIds and whether they're supported or not\n        bool[] memory interfaceIdsSupported = new bool[](interfaceIds.length);\n\n        // query support of ERC165 itself\n        if (supportsERC165(account)) {\n            // query support of each interface in interfaceIds\n            for (uint256 i = 0; i < interfaceIds.length; i++) {\n                interfaceIdsSupported[i] = supportsERC165InterfaceUnchecked(account, interfaceIds[i]);\n            }\n        }\n\n        return interfaceIdsSupported;\n    }\n\n    /**\n     * @dev Returns true if `account` supports all the interfaces defined in\n     * `interfaceIds`. Support for {IERC165} itself is queried automatically.\n     *\n     * Batch-querying can lead to gas savings by skipping repeated checks for\n     * {IERC165} support.\n     *\n     * See {IERC165-supportsInterface}.\n     */\n    function supportsAllInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool) {\n        // query support of ERC165 itself\n        if (!supportsERC165(account)) {\n            return false;\n        }\n\n        // query support of each interface in interfaceIds\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\n            if (!supportsERC165InterfaceUnchecked(account, interfaceIds[i])) {\n                return false;\n            }\n        }\n\n        // all interfaces supported\n        return true;\n    }\n\n    /**\n     * @notice Query if a contract implements an interface, does not check ERC165 support\n     * @param account The address of the contract to query for support of an interface\n     * @param interfaceId The interface identifier, as specified in ERC-165\n     * @return true if the contract at account indicates support of the interface with\n     * identifier interfaceId, false otherwise\n     * @dev Assumes that account contains a contract that supports ERC165, otherwise\n     * the behavior of this method is undefined. This precondition can be checked\n     * with {supportsERC165}.\n     * Interface identification is specified in ERC-165.\n     */\n    function supportsERC165InterfaceUnchecked(address account, bytes4 interfaceId) internal view returns (bool) {\n        // prepare call\n        bytes memory encodedParams = abi.encodeWithSelector(IERC165.supportsInterface.selector, interfaceId);\n\n        // perform static call\n        bool success;\n        uint256 returnSize;\n        uint256 returnValue;\n        assembly {\n            success := staticcall(30000, account, add(encodedParams, 0x20), mload(encodedParams), 0x00, 0x20)\n            returnSize := returndatasize()\n            returnValue := mload(0x00)\n        }\n\n        return success && returnSize >= 0x20 && returnValue > 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1);\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator,\n        Rounding rounding\n    ) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10**64) {\n                value /= 10**64;\n                result += 64;\n            }\n            if (value >= 10**32) {\n                value /= 10**32;\n                result += 32;\n            }\n            if (value >= 10**16) {\n                value /= 10**16;\n                result += 16;\n            }\n            if (value >= 10**8) {\n                value /= 10**8;\n                result += 8;\n            }\n            if (value >= 10**4) {\n                value /= 10**4;\n                result += 4;\n            }\n            if (value >= 10**2) {\n                value /= 10**2;\n                result += 2;\n            }\n            if (value >= 10**1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
    },
    "contracts/FundABusiness.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/security/Pausable.sol\";\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\";\nimport \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\nimport \"./interfaces/IFundABusiness.sol\";\nimport \"./interfaces/INftPerks.sol\";\n\n/**@title MOAT Crowd-funding Contract\n * @custom:security-contact hello@moat.com\n * @notice This contract is for crowd-funding a business by interested parties and\n * to release funds to the business in a transparent but monitored way. Rewards, in form\n * of NFTs are distributed to funders after the funding round has been declared successful.\n * @dev This implements ERC-721 NFT as the rewards (NFT perks) to be minted to the funders.\n */\ncontract FundABusiness is IFundABusiness, AccessControl, ReentrancyGuard, Pausable {\n    // defensive as not required after pragma ^0.8\n    using SafeMath for uint256;\n    using ERC165Checker for address;\n    using SafeERC20 for IERC20;\n\n    // address of the MOAT treasury wallet\n    address private treasuryAddress;\n    // address of the busineess raising fund\n    address public businessAddress;\n    // addresses of all the contributors\n    address[] private fundersAddresses;\n    // unix time at which the funding campaign opens\n    uint256 public campaignStartTime;\n    // unix time at which the funding campaign closes\n    uint256 public campaignEndTime;\n    // unix time at which decision period ends\n    uint256 public campaignDecisionTime;\n    // minimum amount of tokens that the business wishes to raise\n    uint256 public minTargetAmount;\n    // optimum amount of tokens that the business wishes to raise\n    uint256 public targetAmount;\n    // actual amount of tokens raised by the business\n    uint256 public fundRaised;\n    // amount of tokens raised after MOAT fee has been deducted\n    uint256 public fundRaisedMinusFee;\n    // numerator of the %ge MOAT fee e.g 5% fee => 5 * (10**5) / 100 = 5000\n    uint256 public moatFeeNumerator;\n    // amount of tokens deducted as MOAT fees\n    uint256 private moatFee;\n    // cumulative amount of tokens released to business based on milestones completed so far\n    uint256 public cumFundReleased;\n    // returns true if the NFT perks contracts have been set\n    bool public areNftTokensSet = false;\n    // returns true if the MOAT fee has been deducted\n    bool isFeeTaken = false;\n    // ERC20 token approved for campaign funding e.g USDC, USDT\n    IERC20 public allowedErc20Token;\n\n    // returns number of tier perks purchased by a funder\n    mapping(address => mapping(uint256 => uint256)) public tierBalanceOf;\n    // returns the price of a tier\n    mapping(uint256 => uint256) public tierCost;\n    // returns the corresponding  NFT contract of a tier perk\n    mapping(uint256 => INftPerks) public nftContractOf;\n    // returns true if a given funder has claimed his NFT perk\n    mapping(address => mapping(uint256 => bool)) public hasClaimedNft;\n    // returns true if a given address has contributed for the curent campaign\n    mapping(address => bool) public isAFunder;\n    // returns the numerator of the fraction of fund to be released after a milestone has been approved\n    mapping(uint256 => uint256) public fractionOfMilestone;\n    // returns true if a given milestone has been approved\n    mapping(uint256 => bool) public isMilestoneApproved;\n    // returns the amount of tokens available for the business to claim\n    mapping(address => uint256) public businessBalance;\n    // returns the quantities of tier perks bought\n    mapping(uint256 => uint256) private quantityOfTierBought;\n\n    // array of tiers available and thier prices\n    FundingTierCost[] fundingTiersCosts;\n    // array of tiers available and their corresponding NFT contracts\n    NftTierContract[] nftTierContracts;\n    // decision made whether the campaign was sucessful\n    CampaignState public verdict;\n    // reason for closing the campaign abruptly\n    EndCampaign private reasonForEnding;\n\n    // access control roles\n    bytes32 public constant PAUSER_ROLE = keccak256(\"PAUSER_ROLE\");\n    bytes32 public constant MANAGER_ROLE = keccak256(\"MANAGER_ROLE\");\n\n    constructor(address _allowedErc20Token, address _businessAddress, address _treasuryAddress, uint256 _feeFraction, uint256[] memory _amountsToBeRaised, uint256[] memory _campaignAndDecisionPeriod, FundingTierCost[] memory _fundingTiers, MilestoneStruct[] memory _milestonesData) {\n        // initialise the contract\n        if (_campaignAndDecisionPeriod.length != 3) revert InvalidValues();\n        campaignStartTime = _campaignAndDecisionPeriod[0];\n        campaignEndTime = _campaignAndDecisionPeriod[1];\n        campaignDecisionTime = _campaignAndDecisionPeriod[1].add(_campaignAndDecisionPeriod[2]);\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\n        _grantRole(MANAGER_ROLE, msg.sender);\n        _grantRole(PAUSER_ROLE, msg.sender);\n        setAllowedToken(_allowedErc20Token);\n        setTargetAmounts(_amountsToBeRaised);\n        setFundingTiersAndCosts(_fundingTiers);\n        setTreasuryAddress(_treasuryAddress);\n        setBusinessAddress(_businessAddress);\n        setMilestones(_milestonesData);\n        setMOATFee(_feeFraction);\n        verdict = CampaignState.UNDECIDED;\n    }\n\n    //////////////////////////////////////////////////\n    //////////////// Modifiers //////////////////////\n    /////////////////////////////////////////////////\n\n    // checks whether the given is zero address\n    modifier noZeroAddress(address newAddress) {\n        if (newAddress == address(0)) revert ZeroAddress();\n        _;\n    }\n    // checks whether the given address has contributed for the current campaign\n    modifier onlyFunders(address _funder) {\n        if (!isAFunder[_funder]) revert NotAFunder();\n        _;\n    }\n    // checks if nft token address is set\n    modifier nftTokensAreSet() {\n        if (!areNftTokensSet) revert NftTokensNotSet();\n        _;\n    }\n\n    //////////////////////////////////////////////////\n    //////////////// Setters Functions //////////////\n    /////////////////////////////////////////////////\n\n    ///@dev sets the allowed ERC20 tokens for the campaign\n    function setAllowedToken(address _allowedErc20Token) public onlyRole(MANAGER_ROLE) noZeroAddress(_allowedErc20Token) {\n        allowedErc20Token = IERC20(_allowedErc20Token);\n    }\n\n    ///@dev sets the NFT perks contracts\n    function setNftPerkContracts(NftTierContract[] memory _nftTierContracts) external onlyRole(MANAGER_ROLE) {\n        for (uint256 i = 0; i < _nftTierContracts.length; ++i) {\n            if (_nftTierContracts[i].nftTokenAddress == address(0)) revert ZeroAddress();\n            nftContractOf[_nftTierContracts[i].fundingTier] = INftPerks(_nftTierContracts[i].nftTokenAddress);\n        }\n        areNftTokensSet = true;\n    }\n\n    ///@dev sets the MOAT treasury address\n    function setTreasuryAddress(address _treasuryAddress) public onlyRole(MANAGER_ROLE) noZeroAddress(_treasuryAddress) {\n        treasuryAddress = _treasuryAddress;\n    }\n\n    /// @dev Set the wallet address of the business raising fund through this contract\n    function setBusinessAddress(address _businessAddress) public onlyRole(MANAGER_ROLE) noZeroAddress(_businessAddress) {\n        businessAddress = _businessAddress;\n    }\n\n    ///@dev sets the available tiers and their corresponding prices\n    function setFundingTiersAndCosts(FundingTierCost[] memory _fundingTiers) public onlyRole(MANAGER_ROLE) {\n        if (block.timestamp > campaignStartTime) revert TooLateToChange();\n        for (uint256 i = 0; i < _fundingTiers.length; ++i) {\n            tierCost[_fundingTiers[i].fundingTier] = _fundingTiers[i].tierCost;\n        }\n    }\n\n    /// @param _amountsToBeRaised array of length 2.\n    function setTargetAmounts(uint256[] memory _amountsToBeRaised) public onlyRole(MANAGER_ROLE) {\n        if (block.timestamp > campaignDecisionTime) revert TooLateToChange();\n        if (_amountsToBeRaised.length != 2) revert InvalidValues();\n        minTargetAmount = _amountsToBeRaised[0];\n        targetAmount = _amountsToBeRaised[1];\n    }\n\n    /// @param _campaignTimesAndDecision array of length 3.\n    function setCampaignAndDecisionPeriod(uint256[] memory _campaignTimesAndDecision) public onlyRole(MANAGER_ROLE) {\n        if (_campaignTimesAndDecision.length != 3) revert InvalidValues();\n        if (block.timestamp < campaignStartTime) {\n            campaignStartTime = _campaignTimesAndDecision[0];\n            campaignEndTime = _campaignTimesAndDecision[1];\n            campaignDecisionTime = _campaignTimesAndDecision[1].add(_campaignTimesAndDecision[2]);\n        } else if (_isCampaignOpen()) {\n            campaignEndTime = _campaignTimesAndDecision[1];\n            campaignDecisionTime = _campaignTimesAndDecision[1].add(_campaignTimesAndDecision[2]);\n        } else if (block.timestamp >= campaignEndTime && block.timestamp < campaignDecisionTime) {\n            campaignDecisionTime = campaignEndTime.add(_campaignTimesAndDecision[2]);\n        } else {\n            revert CampaignEnded();\n        }\n    }\n\n    ///@dev sets the milestones\n    function setMilestones(MilestoneStruct[] memory _milestonesData) public onlyRole(MANAGER_ROLE) {\n        for (uint256 i = 0; i < _milestonesData.length; ++i) {\n            if (_milestonesData[i].fractionToBeReleased > 100000) revert FractionTooHigh();\n            fractionOfMilestone[_milestonesData[i].milestoneNumber] = _milestonesData[i].fractionToBeReleased;\n        }\n    }\n\n    /// @param _feeFraction e.g 5% => 5 * (10**5) / 100 = 5000\n    function setMOATFee(uint256 _feeFraction) public onlyRole(MANAGER_ROLE) {\n        if (_feeFraction > 100000) revert InvalidValues();\n        if (block.timestamp > campaignStartTime) revert TooLateToChange();\n        moatFeeNumerator = _feeFraction;\n    }\n\n    //////////////////////////////////////////////////\n    //////////////// Main Functions /////////////////\n    /////////////////////////////////////////////////\n\n    /// @notice Contribute fund on behalf of another address for the open campaign.\n    /// @dev only accepts ERC-20 deposit when campaign is open\n    /// @param _funder the contributor address\n    /// @param _tier funding category\n    /// @param _quantity number of tiers\n    function contributeOnBehalfOf(address _funder, uint256 _tier, uint256 _quantity) public nonReentrant whenNotPaused noZeroAddress(_funder) {\n        if (_isCampaignOpen() != true) revert CampaignNotOpen();\n        uint256 _fundingAmount = tierCost[_tier].mul(_quantity);\n        // check whether the _tier is allowed\n        if (_fundingAmount <= 0) revert InvalidTierAndQuantity();\n        _receiveToken(msg.sender, _fundingAmount);\n        fundRaised += _fundingAmount;\n        _updateFunderBalance(_funder, _tier, _quantity);\n    }\n\n    /// @notice Contribute fund from the connected wallet for the open campaign\n    /// @dev only accepts ERC-20 deposit when campaign is open\n    /// @param _tier funding category\n    /// @param _quantity number of tiers\n    function contribute(uint256 _tier, uint256 _quantity) external {\n        contributeOnBehalfOf(msg.sender, _tier, _quantity);\n    }\n\n    /// @notice The funders can claim refund only when the campaign failed\n    /// @dev Claim a refund on behalf of a funder\n    /// @param _funder the funder address\n    /// @param _tier funding category\n    function claimRefundFor(address _funder, uint256 _tier) public nonReentrant whenNotPaused {\n        verdict = _campaignVerdict();\n        // check if campaign failed\n        if (verdict == CampaignState.SUCCESS) revert NoRefund();\n        uint256 _quantity = tierBalanceOf[_funder][_tier];\n        // get the amount to refund to the funder\n        uint256 _amount = tierCost[_tier].mul(_quantity);\n        if (_amount <= 0) revert NoRefund();\n        // set funder's balance to zero\n        tierBalanceOf[_funder][_tier] = 0;\n        _sendToken(_funder, _amount);\n        emit ContributionRefunded(_funder, _tier);\n    }\n\n    /// @notice The funders can claim refund only when the campaign failed\n    /// @dev Claim a refund for the connected wallet\n    /// @param _tier funding category\n    function claimRefund(uint256 _tier) external onlyFunders(msg.sender) {\n        claimRefundFor(msg.sender, _tier);\n    }\n\n    /// @notice The funders can claim NFT perks when the campaign is successful\n    /// @dev NFT with tokenId = _tier is transfer to the connected wallet\n    /// @param _tier funding category\n    function claimNft(uint256 _tier) external onlyFunders(msg.sender) {\n        claimNftFor(msg.sender, _tier);\n    }\n\n    /// @notice The funders can claim NFT perks when the campaign is successful\n    /// @dev Claim NFT for another _funder. NFT with tokenId = _tier is transfer to the _funder\n    /// @param _funder the funder address\n    /// @param _tier funding category\n    function claimNftFor(address _funder, uint256 _tier) public nftTokensAreSet nonReentrant whenNotPaused {\n        verdict = _campaignVerdict();\n        // check whether the campaign was successful\n        if (verdict != CampaignState.SUCCESS) revert CampaignUnsuccessful();\n        // check whether the funder has unclaimed NFT\n        if (hasClaimedNft[_funder][_tier]) revert FunderHasClaimedNft();\n        // get the number of unclaimed NFT tokens\n        uint256 _quantity = tierBalanceOf[_funder][_tier];\n        hasClaimedNft[_funder][_tier] = true;\n        tierBalanceOf[_funder][_tier] = 0;\n        // transfer the unclaimed NFT tokens to the funder\n        for (uint256 i = 0; i < _quantity; ++i) {\n            nftContractOf[_tier].mintNft(_funder);\n        }\n    }\n\n    /// @notice Funds are released to the authorised business wallet based on the\n    /// milestone schedule.\n    /// @dev Only the authorised business wallet can withdraw\n    function withdrawFundRaised() external nonReentrant whenNotPaused {\n        // check whether it is the business wallet that is calling this function\n        if (msg.sender != businessAddress) revert NotTheOwner();\n        verdict = _campaignVerdict();\n        // check whether the campaign was successful\n        if (block.timestamp > campaignDecisionTime && verdict != CampaignState.SUCCESS) revert CampaignUnsuccessful();\n        // get the amount to release from the milestone schedule\n        uint256 _amount = businessBalance[businessAddress];\n        if (_amount <= 0) revert NoFundDue();\n        businessBalance[businessAddress] = 0;\n        _sendToken(businessAddress, _amount);\n        emit FundReleased(businessAddress, _amount, block.timestamp);\n    }\n\n    /// @notice Manager role can contribute fund on behalf of other addresses before decision time passed.\n    /// @dev only accepts ERC-20 deposit before campaign decision time passed\n    /// @param _funders array of funder addresses\n    /// @param _tiers array of funding category\n    /// @param _quantities array of number of tiers purchased by each funder\n    /// All the arrays must be the same length\n    function fiatContributeOnBehalfOf(address[] memory _funders, uint256[] memory _tiers, uint256[] memory _quantities, uint256 _totalAmount) external onlyRole(MANAGER_ROLE) nonReentrant whenNotPaused {\n        verdict = _campaignVerdict();\n        // check whether decision time has passed and decision has been made\n        if (block.timestamp < campaignStartTime || block.timestamp > campaignDecisionTime || verdict != CampaignState.UNDECIDED) revert NotReceivingFunds();\n        // check the arrays have the same length\n        if (_funders.length != _tiers.length || _funders.length != _quantities.length) revert InvalidValues();\n        _receiveToken(msg.sender, _totalAmount);\n        fundRaised += _totalAmount;\n        // update state\n        for (uint256 i = 0; i < _funders.length; ++i) {\n            if (_funders[i] == address(0)) revert ZeroAddress();\n            uint256 _fundingAmount = tierCost[_tiers[i]].mul(_quantities[i]);\n            // check whether the _tier is allowed\n            if (_fundingAmount <= 0) revert InvalidTierAndQuantity();\n            _updateFunderBalance(_funders[i], _tiers[i], _quantities[i]);\n        }\n        emit FiatContributionReceived(msg.sender, _totalAmount);\n    }\n\n    /// @notice Manager role can close the funding round before the decision time passed\n    /// @dev reason for closing the campaign is required\n    /// @param _reasonForEnding enum only accepts TARGETMET or FAILURE\n    function closeFundingRound(EndCampaign _reasonForEnding) external onlyRole(MANAGER_ROLE) {\n        verdict = _campaignVerdict();\n        // check whether decision has been made\n        if (block.timestamp > campaignDecisionTime && verdict != CampaignState.UNDECIDED) revert DecisionMade();\n        // update state\n        campaignEndTime = block.timestamp;\n        campaignDecisionTime = block.timestamp;\n        if (_reasonForEnding == EndCampaign.TARGETMET) {\n            verdict = CampaignState.SUCCESS;\n            _deductFeeAndSend();\n        } else if (_reasonForEnding == EndCampaign.FAILURE) {\n            verdict = CampaignState.FAILURE;\n            emit CampaignFailed(block.timestamp);\n        } else {\n            revert InvalidValues();\n        }\n    }\n\n    /// @notice Manager role can approve the milestones at any time\n    /// @dev milestone can be approved in any order\n    /// @param _milestoneNumber the milestone to be approved\n    function approveMilestoneAndReleaseFund(uint256 _milestoneNumber) external onlyRole(MANAGER_ROLE) whenNotPaused {\n        verdict = _campaignVerdict();\n        // check whether the campaign was successful\n        if (block.timestamp < campaignDecisionTime) revert Undecided();\n        if (verdict != CampaignState.SUCCESS) revert CampaignUnsuccessful();\n        if (isMilestoneApproved[_milestoneNumber] == true) revert AlreadyApproved();\n        isMilestoneApproved[_milestoneNumber] = true;\n        _releaseFundToBusiness(_milestoneNumber);\n    }\n\n    /// @dev Proves that a caller owns a particular NFT token by emitting IsTheTrueOwner event\n    /// It emits NotTheTrueOwner event if the caller is not the owner\n    /// @param _tier funding or perks category\n    /// @param _tokenId id of the nft token\n    function isOwnerOf(uint256 _tier, uint256 _tokenId) external {\n        address _owner = nftContractOf[_tier].ownerOf(_tokenId);\n        if (msg.sender == _owner) {\n            emit IsTheTrueOwner(_owner, _tier, _tokenId);\n        } else {\n            emit NotTheTrueOwner(msg.sender, _tier, _tokenId);\n        }\n    }\n\n    /// @dev Decides the campaign state at any point in time\n    /// @return verdict enum which can only be SUCCESS, FAILURE or UNDECIDED\n    /// based on the outcome of the campaign\n    function _campaignVerdict() internal returns (CampaignState) {\n        if (block.timestamp > campaignDecisionTime && fundRaised >= minTargetAmount && verdict != CampaignState.FAILURE) {\n            _deductFeeAndSend();\n            return CampaignState.SUCCESS;\n        } else if (block.timestamp > campaignDecisionTime && fundRaised < minTargetAmount && verdict != CampaignState.SUCCESS) {\n            emit CampaignFailed(block.timestamp);\n            return CampaignState.FAILURE;\n        }\n        return verdict;\n    }\n\n    /// @dev To check whether the funding round is open. Returns a boolean\n    function _isCampaignOpen() internal returns (bool) {\n        verdict = _campaignVerdict();\n        if ((block.timestamp > campaignStartTime) && (block.timestamp <= campaignEndTime) && (verdict == CampaignState.UNDECIDED)) {\n            return true;\n        }\n        return false;\n    }\n\n    /// @dev release fund to business\n    /// @param _milestoneNumber the milestone to be approved\n    function _releaseFundToBusiness(uint256 _milestoneNumber) internal {\n        uint256 _milestoneFraction = fractionOfMilestone[_milestoneNumber];\n        // get the amount to release from the milestone schedule\n        uint256 _amountToRelease = (_milestoneFraction.mul(fundRaisedMinusFee).div(10 ** 5));\n        if (cumFundReleased.add(_amountToRelease) > fundRaisedMinusFee) revert ReleasingMoreThanFundRaised();\n        cumFundReleased += _amountToRelease;\n        businessBalance[businessAddress] += _amountToRelease;\n    }\n\n    /// @dev contract cannot receive ether\n    receive() external payable {\n        revert();\n    }\n\n    /// @notice Transfer token from a sender to the contract\n    /// @param _from The recipient address\n    /// @param _amount The amount of tokens to transfer from the sender\n    function _receiveToken(address _from, uint256 _amount) internal {\n        // check how much the sender has approved for this transaction\n        if (allowedErc20Token.allowance(_from, address(this)) < _amount) revert NeedMoreTokens();\n        // receive deposit and update state\n        allowedErc20Token.safeTransferFrom(_from, address(this), _amount);\n    }\n\n    /// @notice Transfer token from the contract to the recipient\n    /// @param _to The recipient address\n    /// @param _amount The amount of tokens to transfer\n    function _sendToken(address _to, uint256 _amount) internal {\n        address payable _recipient = payable(_to);\n        // send token to the recipient\n        allowedErc20Token.safeTransfer(_recipient, _amount);\n    }\n\n    function _updateFunderBalance(address _funder, uint256 _tier, uint256 _quantity) internal {\n        tierBalanceOf[_funder][_tier] += _quantity;\n        quantityOfTierBought[_tier] += _quantity;\n        emit ContributionReceived(_funder, _tier);\n        // check whether is an existing funder\n        if (!isAFunder[_funder]) {\n            fundersAddresses.push(_funder);\n            isAFunder[_funder] = true;\n        }\n    }\n\n    /// @dev deducts fee and send to the treasury account\n    function _deductFeeAndSend() internal {\n        // check whether fee has been deducted and sent before\n        if (isFeeTaken == false) {\n            moatFee = fundRaised.mul(moatFeeNumerator).div(100000);\n            fundRaisedMinusFee = fundRaised.sub(moatFee);\n            isFeeTaken = true;\n            _sendToken(treasuryAddress, moatFee);\n            emit CampaignSuccessful(block.timestamp);\n        }\n    }\n\n    /// @dev Pauses the contract\n    function pause() public onlyRole(PAUSER_ROLE) {\n        _pause();\n    }\n\n    /// @dev Unpauses the contract\n    function unpause() public onlyRole(PAUSER_ROLE) {\n        _unpause();\n    }\n\n    //////////////////////////////////////////////////\n    //////////////// Getter /////////////////////////\n    /////////////////////////////////////////////////\n\n    /// @dev returns the array of all funder addresses\n    function getFundersAddresses() external view onlyRole(MANAGER_ROLE) returns (address[] memory) {\n        address[] memory _fundersAddresses = fundersAddresses;\n        return _fundersAddresses;\n    }\n\n    /// @dev returns the quantities of tier perks bought so far\n    /// @param _tier funding or perks category\n    function getQuantityOfTierBought(uint256 _tier) external view onlyRole(MANAGER_ROLE) returns (uint256) {\n        return quantityOfTierBought[_tier];\n    }\n\n    /// @dev returns the price of a given tier\n    /// @param _tier funding or perks category\n    function getTierPrice(uint256 _tier) external view returns (uint256) {\n        if (tierCost[_tier] == 0) revert InvalidTier();\n        return tierCost[_tier];\n    }\n\n    /// @dev returns the balance of the business address\n    function getBusinessBalance() external view returns (uint256) {\n        return businessBalance[businessAddress];\n    }\n\n}\n"
    },
    "contracts/interfaces/IFundABusiness.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\ninterface IFundABusiness {\n    error ZeroAddress();\n    error TransactionFailed();\n    error InsufficientBalance();\n    error TooLateToChange();\n    error InvalidTierAndQuantity();\n    error NeedMoreTokens();\n    error CampaignNotOpen();\n    error InvalidValues();\n    error InvalidTier();\n    error NotAFunder();\n    error Undecided();\n    error NoRefund();\n    error CampaignUnsuccessful();\n    error NotTheOwner();\n    error NoFundDue();\n    error NftTokensNotSet();\n    error FunderHasClaimedNft();\n    error NotReceivingFunds();\n    error CampaignEnded();\n    error FractionTooHigh();\n    error DecisionMade();\n    error AlreadyApproved();\n    error ReleasingMoreThanFundRaised();\n\n    struct FundingTierCost {\n        // Tier of NFT available\n        uint256 fundingTier;\n        // corresponding cost of the Tier\n        uint256 tierCost;\n    }\n\n    struct NftTierContract {\n        // Tier of NFT available\n        uint256 fundingTier;\n        // corresponding NFT address\n        address nftTokenAddress;\n    }\n\n    struct MilestoneStruct {\n        // id of the milestone\n        uint256 milestoneNumber;\n        // fraction of fund raised to be released * 100000\n        uint256 fractionToBeReleased;\n    }\n    // decision made whether the campaign was sucessful\n    enum CampaignState {\n        SUCCESS,\n        FAILURE,\n        UNDECIDED\n    }\n    // reason for closing the campaign abruptly\n    enum EndCampaign {\n        TARGETMET,\n        FAILURE\n    }\n\n    // emitted when a contribution is received from an address\n    event ContributionReceived(address funder, uint256 tier);\n    // emmitted when manager role contributess on behalf of funders who contributed through fiat\n    event FiatContributionReceived(address funder, uint256 amount);\n    // emitted when a funder claims his refund after a campaign has been declared a failure\n    event ContributionRefunded(address funder, uint256 tier);\n    // emitted when campaign is declared successful\n    event CampaignSuccessful(uint256 time);\n    // emitted when campaign is declared unsuccessful\n    event CampaignFailed(uint256 time);\n    // emitted when fund is released to the business for withdrawal\n    event FundReleased(address business, uint256 amount, uint256 time);\n    // emitted when a funder claims his NFT perks after the campaign has been declared successful\n    event NFTRewardClaimed(address funder, uint256 tier);\n    // emmited if the caller is the owner of the given NFTtier\n    event IsTheTrueOwner(address indexed owner, uint256 tier, uint256 tokenId);\n    // emmited if the caller is not the owner of a given NFTtier\n    event NotTheTrueOwner(address indexed caller, uint256 tier, uint256 tokenId);\n\n    ///@dev sets the allowed ERC20 tokens for the campaign\n    function setAllowedToken(address _allowedErc20Token) external;\n\n    ///@dev sets the NFT perks contracts\n    function setNftPerkContracts(NftTierContract[] memory _nftTierContracts) external;\n\n    ///@dev sets the MOAT treasury address\n    function setTreasuryAddress(address _treasuryAddress) external;\n\n    /// @dev Set the wallet address of the business raising fund through this contract\n    function setBusinessAddress(address _businessAddress) external;\n\n    ///@dev sets the available tiers and their corresponding prices\n    function setFundingTiersAndCosts(FundingTierCost[] memory _fundingTiers) external;\n\n    /// @param _amountsToBeRaised array of length 2.\n    function setTargetAmounts(uint256[] memory _amountsToBeRaised) external;\n\n    /// @param _campaignTimesAndDecision array of length 3.\n    function setCampaignAndDecisionPeriod(uint256[] memory _campaignTimesAndDecision) external;\n\n    ///@dev sets the milestones\n    function setMilestones(MilestoneStruct[] memory _milestonesData) external;\n\n    /// @param _feeFraction e.g 5% => 5 * (10**5) / 100 = 5000\n    function setMOATFee(uint256 _feeFraction) external;\n\n    //////////////////////////////////////////////////\n    //////////////// Main Functions /////////////////\n    /////////////////////////////////////////////////\n\n    /// @notice Contribute fund on behalf of another address for the open campaign.\n    /// @dev only accepts ERC-20 deposit when campaign is open\n    /// @param _funder the contributor address\n    /// @param _tier funding category\n    /// @param _quantity number of tiers\n    function contributeOnBehalfOf(address _funder, uint256 _tier, uint256 _quantity) external;\n\n    /// @notice Contribute fund from the connected wallet for the open campaign\n    /// @dev only accepts ERC-20 deposit when campaign is open\n    /// @param _tier funding category\n    /// @param _quantity number of tiers\n    function contribute(uint256 _tier, uint256 _quantity) external;\n\n    /// @notice The funders can claim refund only when the campaign failed\n    /// @dev Claim a refund on behalf of a funder\n    /// @param _funder the funder address\n    /// @param _tier funding category\n    function claimRefundFor(address _funder, uint256 _tier) external;\n\n    /// @notice The funders can claim refund only when the campaign failed\n    /// @dev Claim a refund for the connected wallet\n    /// @param _tier funding category\n    function claimRefund(uint256 _tier) external;\n\n    /// @notice The funders can claim NFT perks when the campaign is successful\n    /// @dev NFT with tokenId = _tier is transfer to the connected wallet\n    /// @param _tier funding category\n    function claimNft(uint256 _tier) external;\n\n    /// @notice The funders can claim NFT perks when the campaign is successful\n    /// @dev Claim NFT for another _funder. NFT with tokenId = _tier is transfer to the _funder\n    /// @param _funder the funder address\n    /// @param _tier funding category\n    function claimNftFor(address _funder, uint256 _tier) external;\n\n    /// @notice Funds are released to the authorised business wallet based on the\n    /// milestone schedule.\n    /// @dev Only the authorised business wallet can withdraw\n    function withdrawFundRaised() external;\n\n    /// @notice Manager role can contribute fund on behalf of other addresses before decision time passed.\n    /// @dev only accepts ERC-20 deposit before campaign decision time passed\n    /// @param _funders array of funder addresses\n    /// @param _tiers array of funding category\n    /// @param _quantities array of number of tiers purchased by each funder\n    /// All the arrays must be the same length\n    function fiatContributeOnBehalfOf(address[] memory _funders, uint256[] memory _tiers, uint256[] memory _quantities, uint256 _totalAmount) external;\n\n    /// @notice Manager role can close the funding round before the decision time passed\n    /// @dev reason for closing the campaign is required\n    /// @param _reasonForEnding enum only accepts TARGETMET or FAILURE\n    function closeFundingRound(EndCampaign _reasonForEnding) external;\n\n    /// @notice Manager role can approve the milestones at any time\n    /// @dev milestone can be approved in any order\n    /// @param _milestoneNumber the milestone to be approved\n    function approveMilestoneAndReleaseFund(uint256 _milestoneNumber) external;\n\n    /// @dev Proves that a caller owns a particular NFT token by emitting IsTheTrueOwner event\n    /// It emits NotTheTrueOwner event if the caller is not the owner\n    /// @param _tier funding or perks category\n    /// @param _tokenId id of the nft token\n    function isOwnerOf(uint256 _tier, uint256 _tokenId) external;\n\n    /// @dev returns the array of all funder addresses\n    function getFundersAddresses() external view returns (address[] memory);\n\n    /// @dev returns the quantities of tier perks bought so far\n    /// @param _tier funding or perks category\n    function getQuantityOfTierBought(uint256 _tier) external view returns (uint256);\n\n    /// @dev returns the price of a given tier\n    /// @param _tier funding or perks category\n    function getTierPrice(uint256 _tier) external view returns (uint256);\n\n    /// @dev returns the balance of the business address\n    function getBusinessBalance() external view returns (uint256);\n\n}\n"
    },
    "contracts/interfaces/INftPerks.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\n\ninterface INftPerks is IERC721 {\n    error MaxSupplyReached();\n    error NonexistentToken();\n    error InvalidTokenUri();\n    error InvalidValue();\n\n    struct RoyaltyInfo {\n        // address to receive the royalties\n        address recipient;\n        // amount tokens to be paid as royalty\n        uint256 amount;\n    }\n\n    // Emitted when NFTs are minted\n    event NFTMinted(uint256 indexed tokenId, address to);\n    // Emitted when the base URI is updated\n    event UriUpdated(string value);\n\n    /// @notice Mint NFT perks to the campaigner funders.\n    /// @dev only the MINTER_ROLE can mint the NFT.\n    /// @param _to the contributor address\n    function mintNft(address _to) external;\n\n    /// @notice token uri must be set before calling this function\n    /// @param _tokenId minted token id\n    /// @return tokenUri token uri\n    function tokenURI(uint256 _tokenId) external view returns (string memory);\n\n    /// @dev returns true if the maxSupply of the NFT tokens has been reacheds\n    function hasReachedCap() external view returns (bool);\n\n    /// @dev returns true for all the interfaces supported by this contract.\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n\n    /// @notice Sets royalty address and fee\n    /// @dev only MANAGER_ROLE can set the royalty fee\n    /// @param _recipient funding category\n    /// @param _royaltyFee numerator of %ge of the sales price to be paid as royalty\n    /// e.g 5% => 5 * (10**5) / 100 = 5000\n    function setRoyalties(address _recipient, uint256 _royaltyFee) external;\n\n    /// @dev The secondary marketplace have to call this function to get the royalty data\n    /// @param _salePrice sales price of the NFT in the secondary market\n    /// @return receiver address for receiving royalties\n    /// @return royaltyAmount amount of tokens to be paid to the receiver address as royalty.\n    function royaltyInfo(uint256, uint256 _salePrice) external view returns (address receiver, uint256 royaltyAmount);\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 1000
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}