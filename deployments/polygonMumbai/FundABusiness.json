{
  "address": "0xE426E6cE71D1883B6F3104AD581a61A3c6C32b83",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_allowedErc20Token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_businessAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_treasuryAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_feeFraction",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "_amountsToBeRaised",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_campaignAndDecisionPeriod",
          "type": "uint256[]"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "fundingTier",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tierCost",
              "type": "uint256"
            }
          ],
          "internalType": "struct IFundABusiness.FundingTierCost[]",
          "name": "_fundingTiers",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "milestoneNumber",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "fractionToBeReleased",
              "type": "uint256"
            }
          ],
          "internalType": "struct IFundABusiness.MilestoneStruct[]",
          "name": "_milestonesData",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AlreadyApproved",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CampaignEnded",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CampaignNotOpen",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CampaignUnsuccessful",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DecisionMade",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FractionTooHigh",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FunderHasClaimedNft",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidTierAndQuantity",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidValues",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NeedMoreTokens",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NftTokensNotSet",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoFundDue",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoRefund",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotAFunder",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotReceivingFunds",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotTheOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReleasingMoreThanFundRaised",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TooLateToChange",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransactionFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Undecided",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroAddress",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "funder",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tier",
          "type": "uint256"
        }
      ],
      "name": "ContributionReceived",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "funder",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tier",
          "type": "uint256"
        }
      ],
      "name": "ContributionRefunded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "funder",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "FiatContributionReceived",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "business",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "time",
          "type": "uint256"
        }
      ],
      "name": "FundReleased",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "funder",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tier",
          "type": "uint256"
        }
      ],
      "name": "NFTRewardClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tier",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "TheOwnerIs",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MANAGER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PAUSER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allowedErc20Token",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_milestoneNumber",
          "type": "uint256"
        }
      ],
      "name": "approveMilestoneAndReleaseFund",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "businessAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "businessBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "campaignDecisionTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "campaignEndTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "campaignStartTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tier",
          "type": "uint256"
        }
      ],
      "name": "claimNft",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_funder",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tier",
          "type": "uint256"
        }
      ],
      "name": "claimNftFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tier",
          "type": "uint256"
        }
      ],
      "name": "claimRefund",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_funder",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tier",
          "type": "uint256"
        }
      ],
      "name": "claimRefundFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum IFundABusiness.EndCampaign",
          "name": "_reasonForEnding",
          "type": "uint8"
        }
      ],
      "name": "closeFundingRound",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tier",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_quantity",
          "type": "uint256"
        }
      ],
      "name": "contribute",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_funder",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tier",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_quantity",
          "type": "uint256"
        }
      ],
      "name": "contributeOnBehalfOf",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cumFundReleased",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_funders",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_tiers",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_quantities",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "_totalAmount",
          "type": "uint256"
        }
      ],
      "name": "fiatContributeOnBehalfOf",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "fractionOfMilestone",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fundRaised",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fundRaisedMinusFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getFundersAddresses",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "hasClaimedNft",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isAFunder",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "isMilestoneApproved",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tier",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "isOwnerOf",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minTargetAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "moatFeeNumerator",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "nftContractOf",
      "outputs": [
        {
          "internalType": "contract INftPerks",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_allowedErc20Token",
          "type": "address"
        }
      ],
      "name": "setAllowedToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_businessAddress",
          "type": "address"
        }
      ],
      "name": "setBusinessAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_campaignTimesAndDecision",
          "type": "uint256[]"
        }
      ],
      "name": "setCampaignAndDecisionPeriod",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "fundingTier",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tierCost",
              "type": "uint256"
            }
          ],
          "internalType": "struct IFundABusiness.FundingTierCost[]",
          "name": "_fundingTiers",
          "type": "tuple[]"
        }
      ],
      "name": "setFundingTiersAndCosts",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "milestoneNumber",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "fractionToBeReleased",
              "type": "uint256"
            }
          ],
          "internalType": "struct IFundABusiness.MilestoneStruct[]",
          "name": "_milestonesData",
          "type": "tuple[]"
        }
      ],
      "name": "setMilestones",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_feeFraction",
          "type": "uint256"
        }
      ],
      "name": "setMoatFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "fundingTier",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "nftTokenAddress",
              "type": "address"
            }
          ],
          "internalType": "struct IFundABusiness.NftTierContract[]",
          "name": "_nftTierContracts",
          "type": "tuple[]"
        }
      ],
      "name": "setNftPerkContracts",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_amountsToBeRaised",
          "type": "uint256[]"
        }
      ],
      "name": "setTargetAmounts",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_treasuryAddress",
          "type": "address"
        }
      ],
      "name": "setTreasuryAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "targetAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tierBalanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tierCost",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "verdict",
      "outputs": [
        {
          "internalType": "enum IFundABusiness.CampaignState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawFundRaised",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x728ccdf40a77232e00e3ce89b31523cc7273834459f0800bda25dc07fb0bbcfa",
  "receipt": {
    "to": null,
    "from": "0xEcE425Bc97E85A208949B9449252C40C9AA356C1",
    "contractAddress": "0xE426E6cE71D1883B6F3104AD581a61A3c6C32b83",
    "transactionIndex": 4,
    "gasUsed": "3466248",
    "logsBloom": "0x
    "blockHash": "0x5427073636642fddba3d92f2005278e7e1777a57d3cf9b2894ec54d905d7af1a",
    "transactionHash": "0x728ccdf40a77232e00e3ce89b31523cc7273834459f0800bda25dc07fb0bbcfa",
    "logs": [
      {
        "transactionIndex": 4,
        "blockNumber": 33953029,
        "transactionHash": "0x728ccdf40a77232e00e3ce89b31523cc7273834459f0800bda25dc07fb0bbcfa",
        "address": "0xE426E6cE71D1883B6F3104AD581a61A3c6C32b83",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000ece425bc97e85a208949b9449252c40c9aa356c1",
          "0x000000000000000000000000ece425bc97e85a208949b9449252c40c9aa356c1"
        ],
        "data": "0x",
        "logIndex": 13,
        "blockHash": "0x5427073636642fddba3d92f2005278e7e1777a57d3cf9b2894ec54d905d7af1a"
      },
      {
        "transactionIndex": 4,
        "blockNumber": 33953029,
        "transactionHash": "0x728ccdf40a77232e00e3ce89b31523cc7273834459f0800bda25dc07fb0bbcfa",
        "address": "0xE426E6cE71D1883B6F3104AD581a61A3c6C32b83",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x241ecf16d79d0f8dbfb92cbc07fe17840425976cf0667f022fe9877caa831b08",
          "0x000000000000000000000000ece425bc97e85a208949b9449252c40c9aa356c1",
          "0x000000000000000000000000ece425bc97e85a208949b9449252c40c9aa356c1"
        ],
        "data": "0x",
        "logIndex": 14,
        "blockHash": "0x5427073636642fddba3d92f2005278e7e1777a57d3cf9b2894ec54d905d7af1a"
      },
      {
        "transactionIndex": 4,
        "blockNumber": 33953029,
        "transactionHash": "0x728ccdf40a77232e00e3ce89b31523cc7273834459f0800bda25dc07fb0bbcfa",
        "address": "0xE426E6cE71D1883B6F3104AD581a61A3c6C32b83",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a",
          "0x000000000000000000000000ece425bc97e85a208949b9449252c40c9aa356c1",
          "0x000000000000000000000000ece425bc97e85a208949b9449252c40c9aa356c1"
        ],
        "data": "0x",
        "logIndex": 15,
        "blockHash": "0x5427073636642fddba3d92f2005278e7e1777a57d3cf9b2894ec54d905d7af1a"
      },
      {
        "transactionIndex": 4,
        "blockNumber": 33953029,
        "transactionHash": "0x728ccdf40a77232e00e3ce89b31523cc7273834459f0800bda25dc07fb0bbcfa",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000ece425bc97e85a208949b9449252c40c9aa356c1",
          "0x0000000000000000000000003a22c8bc68e98b0faf40f349dd2b2890fae01484"
        ],
        "data": "0x000000000000000000000000000000000000000000000000001278cd211d7800000000000000000000000000000000000000000000000000190fd45f010d1ca7000000000000000000000000000000000000000000000559bf0dc3286f36f51500000000000000000000000000000000000000000000000018fd5b91dfefa4a7000000000000000000000000000000000000000000000559bf203bf590546d15",
        "logIndex": 16,
        "blockHash": "0x5427073636642fddba3d92f2005278e7e1777a57d3cf9b2894ec54d905d7af1a"
      }
    ],
    "blockNumber": 33953029,
    "cumulativeGasUsed": "3834689",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xcBd1c83AbfE43E3b4Ad0f790e67e369d8F2faDE7",
    "0xAC59544C7ab4116A319991E6792040fb530B1d1c",
    "0xF5a371Da53eB54493C1FfAd90995c0474743f416",
    10000,
    [
      "1000000000000000000000",
      "100000000000000000000000"
    ],
    [
      1680714000,
      1680807600,
      79200
    ],
    [
      [
        1,
        "100000000000000000000"
      ],
      [
        2,
        "200000000000000000000"
      ],
      [
        3,
        "300000000000000000000"
      ]
    ],
    [
      [
        0,
        20000
      ],
      [
        1,
        30000
      ],
      [
        2,
        40000
      ],
      [
        3,
        10000
      ]
    ]
  ],
  "numDeployments": 1,
  "solcInputHash": "6b9f6925208dea98ac1f573aa6a56962",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_allowedErc20Token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_businessAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_treasuryAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_feeFraction\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_amountsToBeRaised\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_campaignAndDecisionPeriod\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"fundingTier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tierCost\",\"type\":\"uint256\"}],\"internalType\":\"struct IFundABusiness.FundingTierCost[]\",\"name\":\"_fundingTiers\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"milestoneNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fractionToBeReleased\",\"type\":\"uint256\"}],\"internalType\":\"struct IFundABusiness.MilestoneStruct[]\",\"name\":\"_milestonesData\",\"type\":\"tuple[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AlreadyApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CampaignEnded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CampaignNotOpen\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CampaignUnsuccessful\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DecisionMade\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FractionTooHigh\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FunderHasClaimedNft\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidTierAndQuantity\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidValues\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NeedMoreTokens\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NftTokensNotSet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoFundDue\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoRefund\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotAFunder\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotReceivingFunds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotTheOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReleasingMoreThanFundRaised\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TooLateToChange\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransactionFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Undecided\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"funder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tier\",\"type\":\"uint256\"}],\"name\":\"ContributionReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"funder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tier\",\"type\":\"uint256\"}],\"name\":\"ContributionRefunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"funder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FiatContributionReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"business\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"FundReleased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"funder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tier\",\"type\":\"uint256\"}],\"name\":\"NFTRewardClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tier\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"TheOwnerIs\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MANAGER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PAUSER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allowedErc20Token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_milestoneNumber\",\"type\":\"uint256\"}],\"name\":\"approveMilestoneAndReleaseFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"businessAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"businessBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"campaignDecisionTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"campaignEndTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"campaignStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tier\",\"type\":\"uint256\"}],\"name\":\"claimNft\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_funder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tier\",\"type\":\"uint256\"}],\"name\":\"claimNftFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tier\",\"type\":\"uint256\"}],\"name\":\"claimRefund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_funder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tier\",\"type\":\"uint256\"}],\"name\":\"claimRefundFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IFundABusiness.EndCampaign\",\"name\":\"_reasonForEnding\",\"type\":\"uint8\"}],\"name\":\"closeFundingRound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_quantity\",\"type\":\"uint256\"}],\"name\":\"contribute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_funder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_quantity\",\"type\":\"uint256\"}],\"name\":\"contributeOnBehalfOf\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cumFundReleased\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_funders\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_tiers\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_quantities\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_totalAmount\",\"type\":\"uint256\"}],\"name\":\"fiatContributeOnBehalfOf\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"fractionOfMilestone\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundRaised\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundRaisedMinusFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFundersAddresses\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"hasClaimedNft\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isAFunder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"isMilestoneApproved\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"isOwnerOf\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minTargetAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"moatFeeNumerator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nftContractOf\",\"outputs\":[{\"internalType\":\"contract INftPerks\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_allowedErc20Token\",\"type\":\"address\"}],\"name\":\"setAllowedToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_businessAddress\",\"type\":\"address\"}],\"name\":\"setBusinessAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_campaignTimesAndDecision\",\"type\":\"uint256[]\"}],\"name\":\"setCampaignAndDecisionPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"fundingTier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tierCost\",\"type\":\"uint256\"}],\"internalType\":\"struct IFundABusiness.FundingTierCost[]\",\"name\":\"_fundingTiers\",\"type\":\"tuple[]\"}],\"name\":\"setFundingTiersAndCosts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"milestoneNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fractionToBeReleased\",\"type\":\"uint256\"}],\"internalType\":\"struct IFundABusiness.MilestoneStruct[]\",\"name\":\"_milestonesData\",\"type\":\"tuple[]\"}],\"name\":\"setMilestones\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_feeFraction\",\"type\":\"uint256\"}],\"name\":\"setMoatFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"fundingTier\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"nftTokenAddress\",\"type\":\"address\"}],\"internalType\":\"struct IFundABusiness.NftTierContract[]\",\"name\":\"_nftTierContracts\",\"type\":\"tuple[]\"}],\"name\":\"setNftPerkContracts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_amountsToBeRaised\",\"type\":\"uint256[]\"}],\"name\":\"setTargetAmounts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasuryAddress\",\"type\":\"address\"}],\"name\":\"setTreasuryAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tierBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tierCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"verdict\",\"outputs\":[{\"internalType\":\"enum IFundABusiness.CampaignState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFundRaised\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"custom:security-contact\":\"hello@moat.com\",\"details\":\"This implements ERC-721 NFT as the rewards (NFT perks) to be minted to the funders.\",\"kind\":\"dev\",\"methods\":{\"approveMilestoneAndReleaseFund(uint256)\":{\"details\":\"milestone can be approved in any order\",\"params\":{\"_milestoneNumber\":\"the milestone to be approved\"}},\"claimNft(uint256)\":{\"details\":\"NFT with tokenId = _tier is transfer to the connected wallet\",\"params\":{\"_tier\":\"funding category\"}},\"claimNftFor(address,uint256)\":{\"details\":\"Claim NFT for another _funder. NFT with tokenId = _tier is transfer to the _funder\",\"params\":{\"_funder\":\"the funder address\",\"_tier\":\"funding category\"}},\"claimRefund(uint256)\":{\"details\":\"Claim a refund for the connected wallet\",\"params\":{\"_tier\":\"funding category\"}},\"claimRefundFor(address,uint256)\":{\"details\":\"Claim a refund on behalf of a funder\",\"params\":{\"_funder\":\"the funder address\",\"_tier\":\"funding category\"}},\"closeFundingRound(uint8)\":{\"details\":\"reason for closing the campaign is required\",\"params\":{\"_reasonForEnding\":\"enum only accepts TARGETMET or FAILURE\"}},\"contribute(uint256,uint256)\":{\"details\":\"only accepts ERC-20 deposit when campaign is open\",\"params\":{\"_quantity\":\"number of tiers\",\"_tier\":\"funding category\"}},\"contributeOnBehalfOf(address,uint256,uint256)\":{\"details\":\"only accepts ERC-20 deposit when campaign is open\",\"params\":{\"_funder\":\"the contributor address\",\"_quantity\":\"number of tiers\",\"_tier\":\"funding category\"}},\"fiatContributeOnBehalfOf(address[],uint256[],uint256[],uint256)\":{\"details\":\"only accepts ERC-20 deposit before campaign decision time passed\",\"params\":{\"_funders\":\"array of funder addresses\",\"_quantities\":\"array of number of tiers purchased by each funder All the arrays must be the same length\",\"_tiers\":\"array of funding category\"}},\"getFundersAddresses()\":{\"details\":\"returns the array of all funder addresses\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"isOwnerOf(uint256,uint256)\":{\"details\":\"Proves that a caller owns a particular NFT token by emitting TheOwnerIs event\",\"params\":{\"_tier\":\"funding or perks category\",\"_tokenId\":\"id of the nft token\"}},\"pause()\":{\"details\":\"Pauses the contract\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"setAllowedToken(address)\":{\"details\":\"sets the allowed ERC20 tokens for the campaign\"},\"setBusinessAddress(address)\":{\"details\":\"Set the wallet address of the business raising fund through this contract\"},\"setCampaignAndDecisionPeriod(uint256[])\":{\"params\":{\"_campaignTimesAndDecision\":\"array of length 3.\"}},\"setFundingTiersAndCosts((uint256,uint256)[])\":{\"details\":\"sets the available tiers and their corresponding prices\"},\"setMilestones((uint256,uint256)[])\":{\"details\":\"sets the milestones\"},\"setMoatFee(uint256)\":{\"params\":{\"_feeFraction\":\"e.g 5% => 5 * (10**5) / 100 = 5000\"}},\"setNftPerkContracts((uint256,address)[])\":{\"details\":\"sets the NFT perks contracts\"},\"setTargetAmounts(uint256[])\":{\"params\":{\"_amountsToBeRaised\":\"array of length 2.\"}},\"setTreasuryAddress(address)\":{\"details\":\"sets the MOAT treasury address\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"unpause()\":{\"details\":\"Unpauses the contract\"},\"withdrawFundRaised()\":{\"details\":\"Only the authorised business wallet can withdraw\"}},\"title\":\"MOAT Crowd-funding Contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"approveMilestoneAndReleaseFund(uint256)\":{\"notice\":\"Manager role can approve the milestones at any time\"},\"claimNft(uint256)\":{\"notice\":\"The funders can claim NFT perks when the campaign is successful\"},\"claimNftFor(address,uint256)\":{\"notice\":\"The funders can claim NFT perks when the campaign is successful\"},\"claimRefund(uint256)\":{\"notice\":\"The funders can claim refund only when the campaign failed\"},\"claimRefundFor(address,uint256)\":{\"notice\":\"The funders can claim refund only when the campaign failed\"},\"closeFundingRound(uint8)\":{\"notice\":\"Manager role can close the funding round before the decision time passed\"},\"contribute(uint256,uint256)\":{\"notice\":\"Contribute fund from the connected wallet for the open campaign\"},\"contributeOnBehalfOf(address,uint256,uint256)\":{\"notice\":\"Contribute fund on behalf of another address for the open campaign.\"},\"fiatContributeOnBehalfOf(address[],uint256[],uint256[],uint256)\":{\"notice\":\"Manager role can contribute fund on behalf of other addresses before decision time passed.\"},\"withdrawFundRaised()\":{\"notice\":\"Funds are released to the authorised business wallet based on the milestone schedule.\"}},\"notice\":\"This contract is for crowd-funding a business by interested parties and to release funds to the business in a transparent but monitored way. Rewards, in form of NFTs are distributed to funders after the funding round has been declared successful.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundABusiness.sol\":\"FundABusiness\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x67e3daf189111d6d5b0464ed09cf9f0605a22c4b965a7fcecd707101faff008a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x0849d93b16c9940beb286a7864ed02724b248b93e0d80ef6355af5ef15c64773\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x190dd6f8d592b7e4e930feb7f4313aeb8e1c4ad3154c27ce1cf6a512fc30d8cc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9b72f93be69ca894d8492c244259615c4a742afc8d63720dbc8bb81087d9b238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/introspection/ERC165Checker.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Library used to query support of an interface declared via {IERC165}.\\n *\\n * Note that these functions return the actual result of the query: they do not\\n * `revert` if an interface is not supported. It is up to the caller to decide\\n * what to do in these cases.\\n */\\nlibrary ERC165Checker {\\n    // As per the EIP-165 spec, no interface should ever match 0xffffffff\\n    bytes4 private constant _INTERFACE_ID_INVALID = 0xffffffff;\\n\\n    /**\\n     * @dev Returns true if `account` supports the {IERC165} interface.\\n     */\\n    function supportsERC165(address account) internal view returns (bool) {\\n        // Any contract that implements ERC165 must explicitly indicate support of\\n        // InterfaceId_ERC165 and explicitly indicate non-support of InterfaceId_Invalid\\n        return\\n            supportsERC165InterfaceUnchecked(account, type(IERC165).interfaceId) &&\\n            !supportsERC165InterfaceUnchecked(account, _INTERFACE_ID_INVALID);\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports the interface defined by\\n     * `interfaceId`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // query support of both ERC165 as per the spec and support of _interfaceId\\n        return supportsERC165(account) && supportsERC165InterfaceUnchecked(account, interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns a boolean array where each value corresponds to the\\n     * interfaces passed in and whether they're supported or not. This allows\\n     * you to batch check interfaces for a contract where your expectation\\n     * is that some interfaces may not be supported.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function getSupportedInterfaces(address account, bytes4[] memory interfaceIds)\\n        internal\\n        view\\n        returns (bool[] memory)\\n    {\\n        // an array of booleans corresponding to interfaceIds and whether they're supported or not\\n        bool[] memory interfaceIdsSupported = new bool[](interfaceIds.length);\\n\\n        // query support of ERC165 itself\\n        if (supportsERC165(account)) {\\n            // query support of each interface in interfaceIds\\n            for (uint256 i = 0; i < interfaceIds.length; i++) {\\n                interfaceIdsSupported[i] = supportsERC165InterfaceUnchecked(account, interfaceIds[i]);\\n            }\\n        }\\n\\n        return interfaceIdsSupported;\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports all the interfaces defined in\\n     * `interfaceIds`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * Batch-querying can lead to gas savings by skipping repeated checks for\\n     * {IERC165} support.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsAllInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool) {\\n        // query support of ERC165 itself\\n        if (!supportsERC165(account)) {\\n            return false;\\n        }\\n\\n        // query support of each interface in interfaceIds\\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\\n            if (!supportsERC165InterfaceUnchecked(account, interfaceIds[i])) {\\n                return false;\\n            }\\n        }\\n\\n        // all interfaces supported\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Query if a contract implements an interface, does not check ERC165 support\\n     * @param account The address of the contract to query for support of an interface\\n     * @param interfaceId The interface identifier, as specified in ERC-165\\n     * @return true if the contract at account indicates support of the interface with\\n     * identifier interfaceId, false otherwise\\n     * @dev Assumes that account contains a contract that supports ERC165, otherwise\\n     * the behavior of this method is undefined. This precondition can be checked\\n     * with {supportsERC165}.\\n     * Interface identification is specified in ERC-165.\\n     */\\n    function supportsERC165InterfaceUnchecked(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // prepare call\\n        bytes memory encodedParams = abi.encodeWithSelector(IERC165.supportsInterface.selector, interfaceId);\\n\\n        // perform static call\\n        bool success;\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly {\\n            success := staticcall(30000, account, add(encodedParams, 0x20), mload(encodedParams), 0x00, 0x20)\\n            returnSize := returndatasize()\\n            returnValue := mload(0x00)\\n        }\\n\\n        return success && returnSize >= 0x20 && returnValue > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x0812bc73d6e30558840122fa48d6f64ae978ccc1b1fc42e616bac190c6360f46\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\"},\"contracts/FundABusiness.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport \\\"./interfaces/IFundABusiness.sol\\\";\\nimport \\\"./interfaces/INftPerks.sol\\\";\\n\\n/**@title MOAT Crowd-funding Contract\\n * @custom:security-contact hello@moat.com\\n * @notice This contract is for crowd-funding a business by interested parties and\\n * to release funds to the business in a transparent but monitored way. Rewards, in form\\n * of NFTs are distributed to funders after the funding round has been declared successful.\\n * @dev This implements ERC-721 NFT as the rewards (NFT perks) to be minted to the funders.\\n */\\ncontract FundABusiness is IFundABusiness, AccessControl, ReentrancyGuard, Pausable {\\n    // defensive as not required after pragma ^0.8\\n    using SafeMath for uint256;\\n    using ERC165Checker for address;\\n    using SafeERC20 for IERC20;\\n\\n    // address of the MOAT treasury wallet\\n    address private treasuryAddress;\\n    // address of the busineess raising fund\\n    address public businessAddress;\\n    // addresses of all the contributors\\n    address[] private fundersAddresses;\\n    // unix time at which the funding campaign opens\\n    uint256 public campaignStartTime;\\n    // unix time at which the funding campaign closes\\n    uint256 public campaignEndTime;\\n    // unix time at which decision period ends\\n    uint256 public campaignDecisionTime;\\n    // minimum amount of tokens that the business wishes to raise\\n    uint256 public minTargetAmount;\\n    // optimum amount of tokens that the business wishes to raise\\n    uint256 public targetAmount;\\n    // actual amount of tokens raised by the business\\n    uint256 public fundRaised;\\n    // amount of tokens raised after MOAT fee has been deducted\\n    uint256 public fundRaisedMinusFee;\\n    // numerator of the %ge MOAT fee e.g 5% fee => 5 * (10**5) / 100 = 5000\\n    uint256 public moatFeeNumerator;\\n    // amount of tokens deducted as MOAT fees\\n    uint256 private moatFee;\\n    // cumulative amount of tokens released to business based on milestones completed so far\\n    uint256 public cumFundReleased;\\n    // returns true if the NFT perks contracts have been set\\n    bool areNftTokensSet = false;\\n    // returns true if the MOAT fee has been deducted\\n    bool isFeeTaken = false;\\n    // ERC20 token approved for campaign funding e.g USDC, USDT\\n    IERC20 public allowedErc20Token;\\n\\n    // returns number of tier perks purchased by a funder\\n    mapping(address => mapping(uint256 => uint256)) public tierBalanceOf;\\n    // returns the price of a tier\\n    mapping(uint256 => uint256) public tierCost;\\n    // returns the corresponding  NFT contract of a tier perk\\n    mapping(uint256 => INftPerks) public nftContractOf;\\n    // returns true if a given funder has claimed his NFT perk\\n    mapping(address => mapping(uint256 => bool)) public hasClaimedNft;\\n    // returns true if a given address has contributed for the curent campaign\\n    mapping(address => bool) public isAFunder;\\n    // returns the numerator of the fraction of fund to be released after a milestone has been approved\\n    mapping(uint256 => uint256) public fractionOfMilestone;\\n    // returns true if a given milestone has been approved\\n    mapping(uint256 => bool) public isMilestoneApproved;\\n    // returns the amount of tokens available for the business to claim\\n    mapping(address => uint256) public businessBalance;\\n\\n    // array of tiers available and thier prices\\n    FundingTierCost[] fundingTiersCosts;\\n    // array of tiers available and their corresponding NFT contracts\\n    NftTierContract[] nftTierContracts;\\n    // decision made whether the campaign was sucessful\\n    CampaignState public verdict;\\n    // reason for closing the campaign abruptly\\n    EndCampaign private reasonForEnding;\\n\\n    // access control roles\\n    bytes32 public constant PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\n    bytes32 public constant MANAGER_ROLE = keccak256(\\\"MANAGER_ROLE\\\");\\n\\n    constructor(address _allowedErc20Token, address _businessAddress, address _treasuryAddress, uint256 _feeFraction, uint256[] memory _amountsToBeRaised, uint256[] memory _campaignAndDecisionPeriod, FundingTierCost[] memory _fundingTiers, MilestoneStruct[] memory _milestonesData) {\\n        // initialise the contract\\n        if (_campaignAndDecisionPeriod.length != 3) revert InvalidValues();\\n        campaignStartTime = _campaignAndDecisionPeriod[0];\\n        campaignEndTime = _campaignAndDecisionPeriod[1];\\n        campaignDecisionTime = _campaignAndDecisionPeriod[1].add(_campaignAndDecisionPeriod[2]);\\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _grantRole(MANAGER_ROLE, msg.sender);\\n        _grantRole(PAUSER_ROLE, msg.sender);\\n        setAllowedToken(_allowedErc20Token);\\n        setTargetAmounts(_amountsToBeRaised);\\n        setFundingTiersAndCosts(_fundingTiers);\\n        setTreasuryAddress(_treasuryAddress);\\n        setBusinessAddress(_businessAddress);\\n        setMilestones(_milestonesData);\\n        setMoatFee(_feeFraction);\\n        verdict = CampaignState.UNDECIDED;\\n    }\\n\\n    //////////////////////////////////////////////////\\n    //////////////// Modifiers //////////////////////\\n    /////////////////////////////////////////////////\\n\\n    // checks whether the given is zero address\\n    modifier noZeroAddress(address newAddress) {\\n        if (newAddress == address(0)) revert ZeroAddress();\\n        _;\\n    }\\n    // checks whether the given address has contributed for the current campaign\\n    modifier onlyFunders(address _funder) {\\n        if (!isAFunder[_funder]) revert NotAFunder();\\n        _;\\n    }\\n    // checks if nft token address is set\\n    modifier nftTokensAreSet() {\\n        if (!areNftTokensSet) revert NftTokensNotSet();\\n        _;\\n    }\\n\\n    //////////////////////////////////////////////////\\n    //////////////// Setters Functions //////////////\\n    /////////////////////////////////////////////////\\n\\n    ///@dev sets the allowed ERC20 tokens for the campaign\\n    function setAllowedToken(address _allowedErc20Token) public onlyRole(MANAGER_ROLE) noZeroAddress(_allowedErc20Token) {\\n        allowedErc20Token = IERC20(_allowedErc20Token);\\n    }\\n\\n    ///@dev sets the NFT perks contracts\\n    function setNftPerkContracts(NftTierContract[] memory _nftTierContracts) external onlyRole(MANAGER_ROLE) {\\n        for (uint256 i = 0; i < _nftTierContracts.length; ++i) {\\n            if (_nftTierContracts[i].nftTokenAddress == address(0)) revert ZeroAddress();\\n            nftContractOf[_nftTierContracts[i].fundingTier] = INftPerks(_nftTierContracts[i].nftTokenAddress);\\n        }\\n        areNftTokensSet = true;\\n    }\\n\\n    ///@dev sets the MOAT treasury address\\n    function setTreasuryAddress(address _treasuryAddress) public onlyRole(MANAGER_ROLE) noZeroAddress(_treasuryAddress) {\\n        treasuryAddress = _treasuryAddress;\\n    }\\n\\n    /// @dev Set the wallet address of the business raising fund through this contract\\n    function setBusinessAddress(address _businessAddress) public onlyRole(MANAGER_ROLE) noZeroAddress(_businessAddress) {\\n        businessAddress = _businessAddress;\\n    }\\n\\n    ///@dev sets the available tiers and their corresponding prices\\n    function setFundingTiersAndCosts(FundingTierCost[] memory _fundingTiers) public onlyRole(MANAGER_ROLE) {\\n        if (block.timestamp > campaignStartTime) revert TooLateToChange();\\n        for (uint256 i = 0; i < _fundingTiers.length; ++i) {\\n            tierCost[_fundingTiers[i].fundingTier] = _fundingTiers[i].tierCost;\\n        }\\n    }\\n\\n    /// @param _amountsToBeRaised array of length 2.\\n    function setTargetAmounts(uint256[] memory _amountsToBeRaised) public onlyRole(MANAGER_ROLE) {\\n        if (block.timestamp > campaignDecisionTime) revert TooLateToChange();\\n        if (_amountsToBeRaised.length != 2) revert InvalidValues();\\n        minTargetAmount = _amountsToBeRaised[0];\\n        targetAmount = _amountsToBeRaised[1];\\n    }\\n\\n    /// @param _campaignTimesAndDecision array of length 3.\\n    function setCampaignAndDecisionPeriod(uint256[] memory _campaignTimesAndDecision) public onlyRole(MANAGER_ROLE) {\\n        if (_campaignTimesAndDecision.length != 3) revert InvalidValues();\\n        if (block.timestamp < campaignStartTime) {\\n            campaignStartTime = _campaignTimesAndDecision[0];\\n            campaignEndTime = _campaignTimesAndDecision[1];\\n            campaignDecisionTime = _campaignTimesAndDecision[1].add(_campaignTimesAndDecision[2]);\\n        } else if (_isCampaignOpen()) {\\n            campaignEndTime = _campaignTimesAndDecision[1];\\n            campaignDecisionTime = _campaignTimesAndDecision[1].add(_campaignTimesAndDecision[2]);\\n        } else if (block.timestamp >= campaignEndTime && block.timestamp < campaignDecisionTime) {\\n            campaignDecisionTime = campaignEndTime.add(_campaignTimesAndDecision[2]);\\n        } else {\\n            revert CampaignEnded();\\n        }\\n    }\\n\\n    ///@dev sets the milestones\\n    function setMilestones(MilestoneStruct[] memory _milestonesData) public onlyRole(MANAGER_ROLE) {\\n        for (uint256 i = 0; i < _milestonesData.length; ++i) {\\n            if (_milestonesData[i].fractionToBeReleased > 100000) revert FractionTooHigh();\\n            fractionOfMilestone[_milestonesData[i].milestoneNumber] = _milestonesData[i].fractionToBeReleased;\\n        }\\n    }\\n\\n    /// @param _feeFraction e.g 5% => 5 * (10**5) / 100 = 5000\\n    function setMoatFee(uint256 _feeFraction) public onlyRole(MANAGER_ROLE) {\\n        if (_feeFraction > 100000) revert InvalidValues();\\n        if (block.timestamp > campaignStartTime) revert TooLateToChange();\\n        moatFeeNumerator = _feeFraction;\\n    }\\n\\n    //////////////////////////////////////////////////\\n    //////////////// Main Functions /////////////////\\n    /////////////////////////////////////////////////\\n\\n    /// @notice Contribute fund on behalf of another address for the open campaign.\\n    /// @dev only accepts ERC-20 deposit when campaign is open\\n    /// @param _funder the contributor address\\n    /// @param _tier funding category\\n    /// @param _quantity number of tiers\\n    function contributeOnBehalfOf(address _funder, uint256 _tier, uint256 _quantity) public nonReentrant whenNotPaused noZeroAddress(_funder) {\\n        if (_isCampaignOpen() != true) revert CampaignNotOpen();\\n        uint256 _fundingAmount = tierCost[_tier].mul(_quantity);\\n        // check whether the _tier is allowed\\n        if (_fundingAmount <= 0) revert InvalidTierAndQuantity();\\n        _receiveToken(msg.sender, _fundingAmount);\\n        fundRaised += _fundingAmount;\\n        _updateFunderBalance(_funder, _tier, _quantity);\\n    }\\n\\n    /// @notice Contribute fund from the connected wallet for the open campaign\\n    /// @dev only accepts ERC-20 deposit when campaign is open\\n    /// @param _tier funding category\\n    /// @param _quantity number of tiers\\n    function contribute(uint256 _tier, uint256 _quantity) external {\\n        contributeOnBehalfOf(msg.sender, _tier, _quantity);\\n    }\\n\\n    /// @notice The funders can claim refund only when the campaign failed\\n    /// @dev Claim a refund on behalf of a funder\\n    /// @param _funder the funder address\\n    /// @param _tier funding category\\n    function claimRefundFor(address _funder, uint256 _tier) public onlyFunders(_funder) nonReentrant whenNotPaused {\\n        verdict = _campaignVerdict();\\n        // check if campaign failed\\n        if (verdict == CampaignState.SUCCESS) revert NoRefund();\\n        uint256 _quantity = tierBalanceOf[_funder][_tier];\\n        // get the amount to refund to the funder\\n        uint256 _amount = tierCost[_tier].mul(_quantity);\\n        // set funder's balance to zero\\n        tierBalanceOf[_funder][_tier] = 0;\\n        _sendToken(_funder, _amount);\\n        emit ContributionRefunded(_funder, _tier);\\n    }\\n\\n    /// @notice The funders can claim refund only when the campaign failed\\n    /// @dev Claim a refund for the connected wallet\\n    /// @param _tier funding category\\n    function claimRefund(uint256 _tier) external {\\n        claimRefundFor(msg.sender, _tier);\\n    }\\n\\n    /// @notice The funders can claim NFT perks when the campaign is successful\\n    /// @dev NFT with tokenId = _tier is transfer to the connected wallet\\n    /// @param _tier funding category\\n    function claimNft(uint256 _tier) external {\\n        claimNftFor(msg.sender, _tier);\\n    }\\n\\n    /// @notice The funders can claim NFT perks when the campaign is successful\\n    /// @dev Claim NFT for another _funder. NFT with tokenId = _tier is transfer to the _funder\\n    /// @param _funder the funder address\\n    /// @param _tier funding category\\n    function claimNftFor(address _funder, uint256 _tier) public onlyFunders(_funder) nftTokensAreSet nonReentrant whenNotPaused {\\n        verdict = _campaignVerdict();\\n        // check whether the campaign was successful\\n        if (verdict != CampaignState.SUCCESS) revert CampaignUnsuccessful();\\n        // check whether the funder has unclaimed NFT\\n        if (hasClaimedNft[_funder][_tier]) revert FunderHasClaimedNft();\\n        // get the number of unclaimed NFT tokens\\n        uint256 _quantity = tierBalanceOf[_funder][_tier];\\n        hasClaimedNft[_funder][_tier] = true;\\n        tierBalanceOf[_funder][_tier] = 0;\\n        // transfer the unclaimed NFT tokens to the funder\\n        for (uint256 i = 0; i < _quantity; ++i) {\\n            nftContractOf[_tier].mintNft(_funder);\\n        }\\n    }\\n\\n    /// @notice Funds are released to the authorised business wallet based on the\\n    /// milestone schedule.\\n    /// @dev Only the authorised business wallet can withdraw\\n    function withdrawFundRaised() external nonReentrant whenNotPaused {\\n        // check whether it is the business wallet that is calling this function\\n        if (msg.sender != businessAddress) revert NotTheOwner();\\n        verdict = _campaignVerdict();\\n        // check whether the campaign was successful\\n        if (block.timestamp > campaignDecisionTime && verdict != CampaignState.SUCCESS) revert CampaignUnsuccessful();\\n        // get the amount to release from the milestone schedule\\n        uint256 _amount = businessBalance[businessAddress];\\n        if (_amount <= 0) revert NoFundDue();\\n        _sendToken(businessAddress, _amount);\\n        emit FundReleased(businessAddress, _amount, block.timestamp);\\n    }\\n\\n    /// @notice Manager role can contribute fund on behalf of other addresses before decision time passed.\\n    /// @dev only accepts ERC-20 deposit before campaign decision time passed\\n    /// @param _funders array of funder addresses\\n    /// @param _tiers array of funding category\\n    /// @param _quantities array of number of tiers purchased by each funder\\n    /// All the arrays must be the same length\\n    function fiatContributeOnBehalfOf(address[] memory _funders, uint256[] memory _tiers, uint256[] memory _quantities, uint256 _totalAmount) external onlyRole(MANAGER_ROLE) nonReentrant whenNotPaused {\\n        verdict = _campaignVerdict();\\n        // check whether decision time has passed and decision has been made\\n        if (block.timestamp < campaignStartTime || block.timestamp > campaignDecisionTime || verdict != CampaignState.UNDECIDED) revert NotReceivingFunds();\\n        // check the arrays have the same length\\n        if (_funders.length != _tiers.length || _funders.length != _quantities.length) revert InvalidValues();\\n        _receiveToken(msg.sender, _totalAmount);\\n        fundRaised += _totalAmount;\\n        // update state\\n        for (uint256 i = 0; i < _funders.length; ++i) {\\n            if (_funders[i] == address(0)) revert ZeroAddress();\\n            uint256 _fundingAmount = tierCost[_tiers[i]].mul(_quantities[i]);\\n            // check whether the _tier is allowed\\n            if (_fundingAmount <= 0) revert InvalidTierAndQuantity();\\n            _updateFunderBalance(_funders[i], _tiers[i], _quantities[i]);\\n        }\\n        emit FiatContributionReceived(msg.sender, _totalAmount);\\n    }\\n\\n    /// @notice Manager role can close the funding round before the decision time passed\\n    /// @dev reason for closing the campaign is required\\n    /// @param _reasonForEnding enum only accepts TARGETMET or FAILURE\\n    function closeFundingRound(EndCampaign _reasonForEnding) external onlyRole(MANAGER_ROLE) {\\n        verdict = _campaignVerdict();\\n        // check whether decision has been made\\n        if (block.timestamp > campaignDecisionTime && verdict != CampaignState.UNDECIDED) revert DecisionMade();\\n        // update state\\n        campaignEndTime = block.timestamp;\\n        campaignDecisionTime = block.timestamp;\\n        if (_reasonForEnding == EndCampaign.TARGETMET) {\\n            verdict = CampaignState.SUCCESS;\\n            _deductFeeAndSend();\\n        } else if (_reasonForEnding == EndCampaign.FAILURE) {\\n            verdict = CampaignState.FAILURE;\\n        } else {\\n            revert InvalidValues();\\n        }\\n    }\\n\\n    /// @notice Manager role can approve the milestones at any time\\n    /// @dev milestone can be approved in any order\\n    /// @param _milestoneNumber the milestone to be approved\\n    function approveMilestoneAndReleaseFund(uint256 _milestoneNumber) external onlyRole(MANAGER_ROLE) whenNotPaused {\\n        verdict = _campaignVerdict();\\n        // check whether the campaign was successful\\n        if (block.timestamp < campaignDecisionTime) revert Undecided();\\n        if (verdict != CampaignState.SUCCESS) revert CampaignUnsuccessful();\\n        if (isMilestoneApproved[_milestoneNumber] == true) revert AlreadyApproved();\\n        isMilestoneApproved[_milestoneNumber] = true;\\n        _releaseFundToBusiness(_milestoneNumber);\\n    }\\n\\n    /// @dev Proves that a caller owns a particular NFT token by emitting TheOwnerIs event\\n    /// @param _tier funding or perks category\\n    /// @param _tokenId id of the nft token\\n    function isOwnerOf(uint256 _tier, uint256 _tokenId) external {\\n        address _owner = nftContractOf[_tier].ownerOf(_tokenId);\\n        if (msg.sender == _owner) {\\n            emit TheOwnerIs(_owner, _tier, _tokenId);\\n        } else {\\n            revert NotTheOwner();\\n        }\\n    }\\n\\n    /// @dev Decides the campaign state at any point in time\\n    /// @return verdict enum which can only be SUCCESS, FAILURE or UNDECIDED\\n    /// based on the outcome of the campaign\\n    function _campaignVerdict() internal returns (CampaignState) {\\n        if (block.timestamp > campaignDecisionTime && fundRaised >= minTargetAmount && verdict != CampaignState.FAILURE) {\\n            _deductFeeAndSend();\\n            return CampaignState.SUCCESS;\\n        } else if (block.timestamp > campaignDecisionTime && fundRaised < minTargetAmount && verdict != CampaignState.SUCCESS) {\\n            return CampaignState.FAILURE;\\n        }\\n        return verdict;\\n    }\\n\\n    /// @dev To check whether the funding round is open. Returns a boolean\\n    function _isCampaignOpen() internal returns (bool) {\\n        verdict = _campaignVerdict();\\n        if ((block.timestamp > campaignStartTime) && (block.timestamp <= campaignEndTime) && (verdict == CampaignState.UNDECIDED)) {\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    /// @dev release fund to business\\n    /// @param _milestoneNumber the milestone to be approved\\n    function _releaseFundToBusiness(uint256 _milestoneNumber) internal {\\n        uint256 _milestoneFraction = fractionOfMilestone[_milestoneNumber];\\n        // get the amount to release from the milestone schedule\\n        uint256 _amountToRelease = (_milestoneFraction.mul(fundRaisedMinusFee).div(10 ** 5));\\n        if (cumFundReleased.add(_amountToRelease) > fundRaisedMinusFee) revert ReleasingMoreThanFundRaised();\\n        cumFundReleased += _amountToRelease;\\n        businessBalance[businessAddress] += _amountToRelease;\\n    }\\n\\n    /// @dev contract cannot receive ether\\n    receive() external payable {\\n        revert();\\n    }\\n\\n    /// @notice Transfer token from a sender to the contract\\n    /// @param _from The recipient address\\n    /// @param _amount The amount of tokens to transfer from the sender\\n    function _receiveToken(address _from, uint256 _amount) internal {\\n        // check how much the sender has approved for this transaction\\n        if (allowedErc20Token.allowance(_from, address(this)) < _amount) revert NeedMoreTokens();\\n        // receive deposit and update state\\n        allowedErc20Token.safeTransferFrom(_from, address(this), _amount);\\n    }\\n\\n    /// @notice Transfer token from the contract to the recipient\\n    /// @param _to The recipient address\\n    /// @param _amount The amount of tokens to transfer\\n    function _sendToken(address _to, uint256 _amount) internal {\\n        address payable _recipient = payable(_to);\\n        // send token to the recipient\\n        allowedErc20Token.safeTransfer(_recipient, _amount);\\n    }\\n\\n    function _updateFunderBalance(address _funder, uint256 _tier, uint256 _quantity) internal {\\n        tierBalanceOf[_funder][_tier] += _quantity;\\n        emit ContributionReceived(_funder, _tier);\\n        // check whether is an existing funder\\n        if (!isAFunder[_funder]) {\\n            fundersAddresses.push(_funder);\\n            isAFunder[_funder] = true;\\n        }\\n    }\\n\\n    /// @dev deducts fee and send to the treasury account\\n    function _deductFeeAndSend() internal {\\n        // check whether fee has been deducted and sent before\\n        if (isFeeTaken == false) {\\n            moatFee = fundRaised.mul(moatFeeNumerator).div(100000);\\n            fundRaisedMinusFee = fundRaised.sub(moatFee);\\n            isFeeTaken = true;\\n            _sendToken(treasuryAddress, moatFee);\\n        }\\n    }\\n\\n    /// @dev Pauses the contract\\n    function pause() public onlyRole(PAUSER_ROLE) {\\n        _pause();\\n    }\\n\\n    /// @dev Unpauses the contract\\n    function unpause() public onlyRole(PAUSER_ROLE) {\\n        _unpause();\\n    }\\n\\n    //////////////////////////////////////////////////\\n    //////////////// Getter /////////////////////////\\n    /////////////////////////////////////////////////\\n\\n    /// @dev returns the array of all funder addresses\\n    function getFundersAddresses() external view onlyRole(MANAGER_ROLE) returns (address[] memory) {\\n        address[] memory _fundersAddresses = fundersAddresses;\\n        return _fundersAddresses;\\n    }\\n}\\n\",\"keccak256\":\"0x4f13aff3bf3cefaecb651c88984ed55084069bf5ae8570eb1cf3938789e05d46\",\"license\":\"MIT\"},\"contracts/interfaces/IFundABusiness.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\ninterface IFundABusiness {\\n    error ZeroAddress();\\n    error TransactionFailed();\\n    error InsufficientBalance();\\n    error TooLateToChange();\\n    error InvalidTierAndQuantity();\\n    error NeedMoreTokens();\\n    error CampaignNotOpen();\\n    error InvalidValues();\\n    error NotAFunder();\\n    error Undecided();\\n    error NoRefund();\\n    error CampaignUnsuccessful();\\n    error NotTheOwner();\\n    error NoFundDue();\\n    error NftTokensNotSet();\\n    error FunderHasClaimedNft();\\n    error NotReceivingFunds();\\n    error CampaignEnded();\\n    error FractionTooHigh();\\n    error DecisionMade();\\n    error AlreadyApproved();\\n    error ReleasingMoreThanFundRaised();\\n\\n    struct FundingTierCost {\\n        // Tier of NFT available\\n        uint256 fundingTier;\\n        // corresponding cost of the Tier\\n        uint256 tierCost;\\n    }\\n\\n    struct NftTierContract {\\n        // Tier of NFT available\\n        uint256 fundingTier;\\n        // corresponding NFT address\\n        address nftTokenAddress;\\n    }\\n\\n    struct MilestoneStruct {\\n        // id of the milestone\\n        uint256 milestoneNumber;\\n        // fraction of fund raised to be released * 100000\\n        uint256 fractionToBeReleased;\\n    }\\n    // decision made whether the campaign was sucessful\\n    enum CampaignState {\\n        SUCCESS,\\n        FAILURE,\\n        UNDECIDED\\n    }\\n    // reason for closing the campaign abruptly\\n    enum EndCampaign {\\n        TARGETMET,\\n        FAILURE\\n    }\\n\\n    // emitted when a contribution is received from an address\\n    event ContributionReceived(address funder, uint256 tier);\\n    // emmitted when manager role contributess on behalf of funders who contributed through fiat\\n    event FiatContributionReceived(address funder, uint256 amount);\\n    // emitted when a funder claims his refund after a campaign has been declared a failure\\n    event ContributionRefunded(address funder, uint256 tier);\\n    // emitted when fund is released to the business for withdrawal\\n    event FundReleased(address business, uint256 amount, uint256 time);\\n    // emitted when a funder claims his NFT perks after the campaign has been declared successful\\n    event NFTRewardClaimed(address funder, uint256 tier);\\n    // emmited if the caller is the owner of the given NFTtier\\n    event TheOwnerIs(address indexed owner, uint256 tier, uint256 tokenId);\\n\\n    ///@dev sets the allowed ERC20 tokens for the campaign\\n    function setAllowedToken(address _allowedErc20Token) external;\\n\\n    ///@dev sets the NFT perks contracts\\n    function setNftPerkContracts(NftTierContract[] memory _nftTierContracts) external;\\n\\n    ///@dev sets the MOAT treasury address\\n    function setTreasuryAddress(address _treasuryAddress) external;\\n\\n    /// @dev Set the wallet address of the business raising fund through this contract\\n    function setBusinessAddress(address _businessAddress) external;\\n\\n    ///@dev sets the available tiers and their corresponding prices\\n    function setFundingTiersAndCosts(FundingTierCost[] memory _fundingTiers) external;\\n\\n    /// @param _amountsToBeRaised array of length 2.\\n    function setTargetAmounts(uint256[] memory _amountsToBeRaised) external;\\n\\n    /// @param _campaignTimesAndDecision array of length 3.\\n    function setCampaignAndDecisionPeriod(uint256[] memory _campaignTimesAndDecision) external;\\n\\n    ///@dev sets the milestones\\n    function setMilestones(MilestoneStruct[] memory _milestonesData) external;\\n\\n    /// @param _feeFraction e.g 5% => 5 * (10**5) / 100 = 5000\\n    function setMoatFee(uint256 _feeFraction) external;\\n\\n    //////////////////////////////////////////////////\\n    //////////////// Main Functions /////////////////\\n    /////////////////////////////////////////////////\\n\\n    /// @notice Contribute fund on behalf of another address for the open campaign.\\n    /// @dev only accepts ERC-20 deposit when campaign is open\\n    /// @param _funder the contributor address\\n    /// @param _tier funding category\\n    /// @param _quantity number of tiers\\n    function contributeOnBehalfOf(address _funder, uint256 _tier, uint256 _quantity) external;\\n\\n    /// @notice Contribute fund from the connected wallet for the open campaign\\n    /// @dev only accepts ERC-20 deposit when campaign is open\\n    /// @param _tier funding category\\n    /// @param _quantity number of tiers\\n    function contribute(uint256 _tier, uint256 _quantity) external;\\n\\n    /// @notice The funders can claim refund only when the campaign failed\\n    /// @dev Claim a refund on behalf of a funder\\n    /// @param _funder the funder address\\n    /// @param _tier funding category\\n    function claimRefundFor(address _funder, uint256 _tier) external;\\n\\n    /// @notice The funders can claim refund only when the campaign failed\\n    /// @dev Claim a refund for the connected wallet\\n    /// @param _tier funding category\\n    function claimRefund(uint256 _tier) external;\\n\\n    /// @notice The funders can claim NFT perks when the campaign is successful\\n    /// @dev NFT with tokenId = _tier is transfer to the connected wallet\\n    /// @param _tier funding category\\n    function claimNft(uint256 _tier) external;\\n\\n    /// @notice The funders can claim NFT perks when the campaign is successful\\n    /// @dev Claim NFT for another _funder. NFT with tokenId = _tier is transfer to the _funder\\n    /// @param _funder the funder address\\n    /// @param _tier funding category\\n    function claimNftFor(address _funder, uint256 _tier) external;\\n\\n    /// @notice Funds are released to the authorised business wallet based on the\\n    /// milestone schedule.\\n    /// @dev Only the authorised business wallet can withdraw\\n    function withdrawFundRaised() external;\\n\\n    /// @notice Manager role can contribute fund on behalf of other addresses before decision time passed.\\n    /// @dev only accepts ERC-20 deposit before campaign decision time passed\\n    /// @param _funders array of funder addresses\\n    /// @param _tiers array of funding category\\n    /// @param _quantities array of number of tiers purchased by each funder\\n    /// All the arrays must be the same length\\n    function fiatContributeOnBehalfOf(address[] memory _funders, uint256[] memory _tiers, uint256[] memory _quantities, uint256 _totalAmount) external;\\n\\n    /// @notice Manager role can close the funding round before the decision time passed\\n    /// @dev reason for closing the campaign is required\\n    /// @param _reasonForEnding enum only accepts TARGETMET or FAILURE\\n    function closeFundingRound(EndCampaign _reasonForEnding) external;\\n\\n    /// @notice Manager role can approve the milestones at any time\\n    /// @dev milestone can be approved in any order\\n    /// @param _milestoneNumber the milestone to be approved\\n    function approveMilestoneAndReleaseFund(uint256 _milestoneNumber) external;\\n\\n    /// @dev Proves that a caller owns a particular NFT token by emitting TheOwnerIs event\\n    /// @param _tier funding or perks category\\n    /// @param _tokenId id of the nft token\\n    function isOwnerOf(uint256 _tier, uint256 _tokenId) external;\\n\\n    /// @dev returns the array of all funder addresses\\n    function getFundersAddresses() external view returns (address[] memory);\\n}\\n\",\"keccak256\":\"0x34389655d51ede47a8d73ca209fda9397deef0375072a531855faa723248782a\",\"license\":\"MIT\"},\"contracts/interfaces/INftPerks.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\ninterface INftPerks is IERC721 {\\n    error MaxSupplyReached();\\n    error InvalidValue();\\n    error NonexistentToken();\\n    error TokenUriNotSet();\\n\\n    struct RoyaltyInfo {\\n        // address to receive the royalties\\n        address recipient;\\n        // amount tokens to be paid as royalty\\n        uint256 amount;\\n    }\\n\\n    // Emitted when NFTs are minted\\n    event NFTMinted(uint256 indexed tokenId, address to);\\n    // Emitted when the base URI is updated\\n    event UriUpdated(string value);\\n\\n    /// @notice Mint NFT perks to the campaigner funders.\\n    /// @dev only the MINTER_ROLE can mint the NFT.\\n    /// @param _to the contributor address\\n    function mintNft(address _to) external;\\n\\n    /// @notice Sets token uri for the NFT contract.\\n    /// @dev only the MANAGER_ROLE can set the token uri.\\n    /// @param tokenURI_ the token uri string.\\n    function setTokenURI(string memory tokenURI_) external;\\n\\n    /// @notice token uri must be set before calling this function\\n    /// @param _tokenId minted token id\\n    /// @return tokenUri token uri\\n    function tokenURI(uint256 _tokenId) external view returns (string memory);\\n\\n    /// @dev returns true if the maxSupply of the NFT tokens has been reacheds\\n    function hasReachedCap() external view returns (bool);\\n\\n    /// @dev returns true for all the interfaces supported by this contract.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n\\n    /// @notice Sets royalty address and fee\\n    /// @dev only MANAGER_ROLE can set the royalty fee\\n    /// @param _recipient funding category\\n    /// @param _royaltyFee numerator of %ge of the sales price to be paid as royalty\\n    /// e.g 5% => 5 * (10**5) / 100 = 5000\\n    function setRoyalties(address _recipient, uint256 _royaltyFee) external;\\n\\n    /// @dev The secondary marketplace have to call this function to get the royalty data\\n    /// @param _salePrice sales price of the NFT in the secondary market\\n    /// @return receiver address for receiving royalties\\n    /// @return royaltyAmount amount of tokens to be paid to the receiver address as royalty.\\n    function royaltyInfo(uint256, uint256 _salePrice) external view returns (address receiver, uint256 royaltyAmount);\\n}\\n\",\"keccak256\":\"0x126799d7d96ec14474339f1fc0ad0839838d52394c925c179e229e953b8ae3d6\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052600f805461ffff191690553480156200001c57600080fd5b5060405162004156380380620041568339810160408190526200003f9162000a91565b600180556002805460ff191690558251600314620000705760405163516e361d60e11b815260040160405180910390fd5b8260008151811062000086576200008662000b8d565b602002602001015160058190555082600181518110620000aa57620000aa62000b8d565b60200260200101516006819055506200010c83600281518110620000d257620000d262000b8d565b602002602001015184600181518110620000f057620000f062000b8d565b6020026020010151620001cc60201b62001f3b1790919060201c565b6007556200011c600033620001e3565b620001376000805160206200413683398151915233620001e3565b620001637f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a33620001e3565b6200016e8862000284565b6200017984620002f4565b6200018482620003a2565b6200018f866200045f565b6200019a87620004cd565b620001a58162000535565b620001b0856200060e565b5050601a805460ff191660021790555062000cfb945050505050565b6000620001da828462000bb9565b90505b92915050565b6000828152602081815260408083206001600160a01b038516845290915290205460ff1662000280576000828152602081815260408083206001600160a01b03851684529091529020805460ff191660011790556200023f3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b600080516020620041368339815191526200029f8162000678565b816001600160a01b038116620002c85760405163d92e233d60e01b815260040160405180910390fd5b5050600f80546001600160a01b03909216620100000262010000600160b01b0319909216919091179055565b600080516020620041368339815191526200030f8162000678565b600754421115620003335760405163488e80ff60e01b815260040160405180910390fd5b8151600214620003565760405163516e361d60e11b815260040160405180910390fd5b816000815181106200036c576200036c62000b8d565b60200260200101516008819055508160018151811062000390576200039062000b8d565b60200260200101516009819055505050565b60008051602062004136833981519152620003bd8162000678565b600554421115620003e15760405163488e80ff60e01b815260040160405180910390fd5b60005b82518110156200045a5782818151811062000403576200040362000b8d565b6020026020010151602001516011600085848151811062000428576200042862000b8d565b60200260200101516000015181526020019081526020016000208190555080620004529062000bcf565b9050620003e4565b505050565b600080516020620041368339815191526200047a8162000678565b816001600160a01b038116620004a35760405163d92e233d60e01b815260040160405180910390fd5b5050600280546001600160a01b0390921661010002610100600160a81b0319909216919091179055565b60008051602062004136833981519152620004e88162000678565b816001600160a01b038116620005115760405163d92e233d60e01b815260040160405180910390fd5b5050600380546001600160a01b0319166001600160a01b0392909216919091179055565b60008051602062004136833981519152620005508162000678565b60005b82518110156200045a57620186a083828151811062000576576200057662000b8d565b6020026020010151602001511115620005a2576040516336d85bb560e11b815260040160405180910390fd5b828181518110620005b757620005b762000b8d565b60200260200101516020015160156000858481518110620005dc57620005dc62000b8d565b60200260200101516000015181526020019081526020016000208190555080620006069062000bcf565b905062000553565b60008051602062004136833981519152620006298162000678565b620186a08211156200064e5760405163516e361d60e11b815260040160405180910390fd5b600554421115620006725760405163488e80ff60e01b815260040160405180910390fd5b50600c55565b62000684813362000687565b50565b6000828152602081815260408083206001600160a01b038516845290915290205460ff166200028057620006c6816200072060201b62001f4e1760201c565b620006dc83602062001f6062000733821b17811c565b604051602001620006ef92919062000c11565b60408051601f198184030181529082905262461bcd60e51b8252620007179160040162000c8a565b60405180910390fd5b6060620001dd6001600160a01b03831660145b606060006200074483600262000cbf565b6200075190600262000bb9565b6001600160401b038111156200076b576200076b62000909565b6040519080825280601f01601f19166020018201604052801562000796576020820181803683370190505b509050600360fc1b81600081518110620007b457620007b462000b8d565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110620007e657620007e662000b8d565b60200101906001600160f81b031916908160001a90535060006200080c84600262000cbf565b6200081990600162000bb9565b90505b60018111156200089b576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811062000851576200085162000b8d565b1a60f81b8282815181106200086a576200086a62000b8d565b60200101906001600160f81b031916908160001a90535060049490941c93620008938162000ce1565b90506200081c565b508315620001da5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640162000717565b80516001600160a01b03811681146200090457600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b03811182821017156200094a576200094a62000909565b604052919050565b60006001600160401b038211156200096e576200096e62000909565b5060051b60200190565b600082601f8301126200098a57600080fd5b81516020620009a36200099d8362000952565b6200091f565b82815260059290921b84018101918181019086841115620009c357600080fd5b8286015b84811015620009e05780518352918301918301620009c7565b509695505050505050565b600082601f830112620009fd57600080fd5b8151602062000a106200099d8362000952565b82815260069290921b8401810191818101908684111562000a3057600080fd5b8286015b84811015620009e057604080828a03121562000a505760008081fd5b80518082016001600160401b038111828210171562000a735762000a7362000909565b90915281518152848201518582015283529183019160400162000a34565b600080600080600080600080610100898b03121562000aaf57600080fd5b62000aba89620008ec565b975062000aca60208a01620008ec565b965062000ada60408a01620008ec565b60608a015160808b015191975095506001600160401b038082111562000aff57600080fd5b62000b0d8c838d0162000978565b955060a08b015191508082111562000b2457600080fd5b62000b328c838d0162000978565b945060c08b015191508082111562000b4957600080fd5b62000b578c838d01620009eb565b935060e08b015191508082111562000b6e57600080fd5b5062000b7d8b828c01620009eb565b9150509295985092959890939650565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b80820180821115620001dd57620001dd62000ba3565b60006001820162000be45762000be462000ba3565b5060010190565b60005b8381101562000c0857818101518382015260200162000bee565b50506000910152565b7f416363657373436f6e74726f6c3a206163636f756e742000000000000000000081526000835162000c4b81601785016020880162000beb565b7001034b99036b4b9b9b4b733903937b6329607d1b601791840191820152835162000c7e81602884016020880162000beb565b01602801949350505050565b602081526000825180602084015262000cab81604085016020870162000beb565b601f01601f19169190910160400192915050565b600081600019048311821515161562000cdc5762000cdc62000ba3565b500290565b60008162000cf35762000cf362000ba3565b506000190190565b61342b8062000d0b6000396000f3fe60806040526004361061034e5760003560e01c8063685406ca116101bb578063b0100cf7116100f7578063d547741f11610095578063ec87621c1161006f578063ec87621c14610a07578063f35f206c14610a29578063f5e3dbdb14610a5f578063fd4234e814610a7f57600080fd5b8063d547741f14610993578063d84ed966146109b3578063e63ab1e9146109d357600080fd5b8063b68490bc116100d1578063b68490bc14610910578063bf3ea47214610930578063c71c0b401461095d578063d3717a021461097357600080fd5b8063b0100cf71461089e578063b0786fad146108ce578063b2ab56e1146108f057600080fd5b80638456cb5911610164578063953b8fb81161013e578063953b8fb814610823578063a217fddf14610839578063a4334daa1461084e578063a95185f01461086e57600080fd5b80638456cb59146107aa5780638c590917146107bf57806391d14854146107df57600080fd5b80637b8b29ac116101955780637b8b29ac146107515780637dd4ad2f146107675780637e3e010a1461079457600080fd5b8063685406ca146106ea5780636aba253c1461070a578063750d0b671461073157600080fd5b80632ec09d391161028a5780634e43ccb4116102335780635ba5f8dd1161020d5780635ba5f8dd1461067d5780635c975abb1461069d5780636605bfda146106b557806366d021cb146106d557600080fd5b80634e43ccb4146106275780634eb494821461063d5780635b7baf641461065d57600080fd5b80633f4ba83a116102645780633f4ba83a146105cc57806341e1c716146105e15780634c3adbfd1461060757600080fd5b80632ec09d391461056c5780632f2ff15d1461058c57806336568abe146105ac57600080fd5b8063134f275c116102f75780631a99dbaa116102d15780631a99dbaa146104c1578063248a9ca3146104d75780632669e8e3146105075780632b32e9ca1461053457600080fd5b8063134f275c1461045357806313e7b33e146104735780631583deb21461048957600080fd5b8063038b68dd11610328578063038b68dd146103ef5780630f01ec651461040f57806312498a701461042f57600080fd5b806301ffc9a71461035d578063026686ee1461039257806302866962146103cd57600080fd5b3661035857600080fd5b600080fd5b34801561036957600080fd5b5061037d610378366004612c5d565b610a95565b60405190151581526020015b60405180910390f35b34801561039e57600080fd5b5061037d6103ad366004612c9c565b601360209081526000928352604080842090915290825290205460ff1681565b3480156103d957600080fd5b506103ed6103e8366004612dd6565b610afe565b005b3480156103fb57600080fd5b506103ed61040a366004612c9c565b610be4565b34801561041b57600080fd5b506103ed61042a366004612e85565b610e1c565b34801561043b57600080fd5b5061044560065481565b604051908152602001610389565b34801561045f57600080fd5b506103ed61046e366004612e85565b610ebf565b34801561047f57600080fd5b5061044560055481565b34801561049557600080fd5b506003546104a9906001600160a01b031681565b6040516001600160a01b039091168152602001610389565b3480156104cd57600080fd5b5061044560075481565b3480156104e357600080fd5b506104456104f2366004612eba565b60009081526020819052604090206001015490565b34801561051357600080fd5b50610445610522366004612eba565b60116020526000908152604090205481565b34801561054057600080fd5b5061044561054f366004612c9c565b601060209081526000928352604080842090915290825290205481565b34801561057857600080fd5b506103ed610587366004612eba565b611030565b34801561059857600080fd5b506103ed6105a7366004612ed3565b61103d565b3480156105b857600080fd5b506103ed6105c7366004612ed3565b611062565b3480156105d857600080fd5b506103ed6110ef565b3480156105ed57600080fd5b50600f546104a9906201000090046001600160a01b031681565b34801561061357600080fd5b506103ed610622366004612c9c565b611121565b34801561063357600080fd5b50610445600b5481565b34801561064957600080fd5b506103ed610658366004612f03565b61129b565b34801561066957600080fd5b506103ed610678366004612eba565b61137f565b34801561068957600080fd5b506103ed610698366004612eba565b611389565b3480156106a957600080fd5b5060025460ff1661037d565b3480156106c157600080fd5b506103ed6106d0366004612f38565b6113ee565b3480156106e157600080fd5b506103ed61146f565b3480156106f657600080fd5b506103ed610705366004612dd6565b6115d8565b34801561071657600080fd5b50601a546107249060ff1681565b6040516103899190612f6b565b34801561073d57600080fd5b506103ed61074c366004612f93565b611682565b34801561075d57600080fd5b50610445600e5481565b34801561077357600080fd5b50610445610782366004612eba565b60156020526000908152604090205481565b3480156107a057600080fd5b5061044560085481565b3480156107b657600080fd5b506103ed611799565b3480156107cb57600080fd5b506103ed6107da366004612fb4565b6117cb565b3480156107eb57600080fd5b5061037d6107fa366004612ed3565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b34801561082f57600080fd5b5061044560095481565b34801561084557600080fd5b50610445600081565b34801561085a57600080fd5b506103ed610869366004612eba565b6117d6565b34801561087a57600080fd5b5061037d610889366004612eba565b60166020526000908152604090205460ff1681565b3480156108aa57600080fd5b5061037d6108b9366004612f38565b60146020526000908152604090205460ff1681565b3480156108da57600080fd5b506108e3611901565b6040516103899190612fd6565b3480156108fc57600080fd5b506103ed61090b366004613023565b611980565b34801561091c57600080fd5b506103ed61092b366004612f38565b611a89565b34801561093c57600080fd5b5061044561094b366004612f38565b60176020526000908152604090205481565b34801561096957600080fd5b50610445600a5481565b34801561097f57600080fd5b506103ed61098e366004612f38565b611b0b565b34801561099f57600080fd5b506103ed6109ae366004612ed3565b611b7c565b3480156109bf57600080fd5b506103ed6109ce3660046130d8565b611ba1565b3480156109df57600080fd5b506104457f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a81565b348015610a1357600080fd5b506104456000805160206133d683398151915281565b348015610a3557600080fd5b506104a9610a44366004612eba565b6012602052600090815260409020546001600160a01b031681565b348015610a6b57600080fd5b506103ed610a7a366004612fb4565b611e35565b348015610a8b57600080fd5b50610445600c5481565b60006001600160e01b031982167f7965db0b000000000000000000000000000000000000000000000000000000001480610af857507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b03198316145b92915050565b6000805160206133d6833981519152610b1681612141565b60005b8251811015610bdf57620186a0838281518110610b3857610b386131c6565b6020026020010151602001511115610b7c576040517f6db0b76a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b828181518110610b8e57610b8e6131c6565b60200260200101516020015160156000858481518110610bb057610bb06131c6565b60200260200101516000015181526020019081526020016000208190555080610bd8906131f2565b9050610b19565b505050565b6001600160a01b038216600090815260146020526040902054829060ff16610c1f5760405163e02a527360e01b815260040160405180910390fd5b600f5460ff16610c5b576040517f85cd26fd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610c6361214b565b610c6b6121a4565b610c736121f7565b601a805460ff19166001836002811115610c8f57610c8f612f55565b02179055506000601a5460ff166002811115610cad57610cad612f55565b14610ccb57604051638d05f51560e01b815260040160405180910390fd5b6001600160a01b038316600090815260136020908152604080832085845290915290205460ff1615610d29576040517f708d73f200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b03831660008181526010602090815260408083208684528083528184208054958552601384528285208886528452918420805460ff191660011790559091528190555b81811015610e1157600084815260126020526040908190205490517fe9c2e14b0000000000000000000000000000000000000000000000000000000081526001600160a01b0387811660048301529091169063e9c2e14b90602401600060405180830381600087803b158015610de857600080fd5b505af1158015610dfc573d6000803e3d6000fd5b5050505080610e0a906131f2565b9050610d73565b5050610bdf60018055565b6000805160206133d6833981519152610e3481612141565b600754421115610e575760405163488e80ff60e01b815260040160405180910390fd5b8151600214610e795760405163516e361d60e11b815260040160405180910390fd5b81600081518110610e8c57610e8c6131c6565b602002602001015160088190555081600181518110610ead57610ead6131c6565b60200260200101516009819055505050565b6000805160206133d6833981519152610ed781612141565b8151600314610ef95760405163516e361d60e11b815260040160405180910390fd5b600554421015610f935781600081518110610f1657610f166131c6565b602002602001015160058190555081600181518110610f3757610f376131c6565b6020026020010151600681905550610f8c82600281518110610f5b57610f5b6131c6565b602002602001015183600181518110610f7657610f766131c6565b6020026020010151611f3b90919063ffffffff16565b6007555050565b610f9b612290565b15610fb35781600181518110610f3757610f376131c6565b6006544210158015610fc6575060075442105b15610ffa57610f8c82600281518110610fe157610fe16131c6565b6020026020010151600654611f3b90919063ffffffff16565b6040517f553ae05400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050565b61103a3382610be4565b50565b60008281526020819052604090206001015461105881612141565b610bdf83836122fb565b6001600160a01b03811633146110e55760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c66000000000000000000000000000000000060648201526084015b60405180910390fd5b61102c8282612399565b7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a61111981612141565b61103a612418565b6001600160a01b038216600090815260146020526040902054829060ff1661115c5760405163e02a527360e01b815260040160405180910390fd5b61116461214b565b61116c6121a4565b6111746121f7565b601a805460ff1916600183600281111561119057611190612f55565b02179055506000601a5460ff1660028111156111ae576111ae612f55565b036111e5576040517fc6dfc20100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b0383166000908152601060209081526040808320858452825280832054601190925282205490919061121e908361246a565b6001600160a01b0386166000908152601060209081526040808320888452909152812055905061124e8582612476565b604080516001600160a01b0387168152602081018690527f2ef47cadc7e07ee6cea296446c8ca85ff6955693411d8868f7a04b6850034f08910160405180910390a15050610bdf60018055565b6112a361214b565b6112ab6121a4565b826001600160a01b0381166112d35760405163d92e233d60e01b815260040160405180910390fd5b6112db612290565b1515600114611316576040517fdf2d6b2800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008381526011602052604081205461132f908461246a565b9050600081116113525760405163029819b760e01b815260040160405180910390fd5b61135c3382612495565b80600a600082825461136e919061320b565b90915550610e11905085858561257e565b61103a3382611121565b6000805160206133d68339815191526113a181612141565b620186a08211156113c55760405163516e361d60e11b815260040160405180910390fd5b6005544211156113e85760405163488e80ff60e01b815260040160405180910390fd5b50600c55565b6000805160206133d683398151915261140681612141565b816001600160a01b03811661142e5760405163d92e233d60e01b815260040160405180910390fd5b5050600280546001600160a01b03909216610100027fffffffffffffffffffffff0000000000000000000000000000000000000000ff909216919091179055565b61147761214b565b61147f6121a4565b6003546001600160a01b031633146114aa576040516336b6b89560e01b815260040160405180910390fd5b6114b26121f7565b601a805460ff191660018360028111156114ce576114ce612f55565b0217905550600754421180156114fb57506000601a5460ff1660028111156114f8576114f8612f55565b14155b1561151957604051638d05f51560e01b815260040160405180910390fd5b6003546001600160a01b03166000908152601760205260409020548061156b576040517f569323d200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600354611581906001600160a01b031682612476565b600354604080516001600160a01b039092168252602082018390524282820152517f3df25ea0269b814fac9e2b26b3cc6971a48c7bdd35be407f416e44a16466325b9181900360600190a1506115d660018055565b565b6000805160206133d68339815191526115f081612141565b6005544211156116135760405163488e80ff60e01b815260040160405180910390fd5b60005b8251811015610bdf57828181518110611631576116316131c6565b60200260200101516020015160116000858481518110611653576116536131c6565b6020026020010151600001518152602001908152602001600020819055508061167b906131f2565b9050611616565b6000805160206133d683398151915261169a81612141565b6116a26121f7565b601a805460ff191660018360028111156116be576116be612f55565b0217905550600754421180156116eb57506002601a5460ff1660028111156116e8576116e8612f55565b14155b15611722576040517f61a7916f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b426006819055600755600082600181111561173f5761173f612f55565b0361175657601a805460ff1916905561102c61268e565b600182600181111561176a5761176a612f55565b03611780575050601a805460ff19166001179055565b60405163516e361d60e11b815260040160405180910390fd5b7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a6117c381612141565b61103a612709565b61102c33838361129b565b6000805160206133d68339815191526117ee81612141565b6117f66121a4565b6117fe6121f7565b601a805460ff1916600183600281111561181a5761181a612f55565b021790555060075442101561185b576040517fc8dcac8200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000601a5460ff16600281111561187457611874612f55565b1461189257604051638d05f51560e01b815260040160405180910390fd5b60008281526016602052604090205460ff1615156001036118df576040517f101f817a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000828152601660205260409020805460ff1916600117905561102c82612746565b60606000805160206133d683398151915261191b81612141565b6000600480548060200260200160405190810160405280929190818152602001828054801561197357602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611955575b5093965050505050505090565b6000805160206133d683398151915261199881612141565b60005b8251811015611a775760006001600160a01b03168382815181106119c1576119c16131c6565b6020026020010151602001516001600160a01b0316036119f45760405163d92e233d60e01b815260040160405180910390fd5b828181518110611a0657611a066131c6565b60200260200101516020015160126000858481518110611a2857611a286131c6565b602002602001015160000151815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b0316021790555080611a70906131f2565b905061199b565b5050600f805460ff1916600117905550565b6000805160206133d6833981519152611aa181612141565b816001600160a01b038116611ac95760405163d92e233d60e01b815260040160405180910390fd5b5050600f80546001600160a01b0390921662010000027fffffffffffffffffffff0000000000000000000000000000000000000000ffff909216919091179055565b6000805160206133d6833981519152611b2381612141565b816001600160a01b038116611b4b5760405163d92e233d60e01b815260040160405180910390fd5b50506003805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b600082815260208190526040902060010154611b9781612141565b610bdf8383612399565b6000805160206133d6833981519152611bb981612141565b611bc161214b565b611bc96121a4565b611bd16121f7565b601a805460ff19166001836002811115611bed57611bed612f55565b0217905550600554421080611c03575060075442115b80611c2557506002601a5460ff166002811115611c2257611c22612f55565b14155b15611c5c576040517f6c9007f600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b83518551141580611c6f57508251855114155b15611c8d5760405163516e361d60e11b815260040160405180910390fd5b611c973383612495565b81600a6000828254611ca9919061320b565b90915550600090505b8551811015611deb5760006001600160a01b0316868281518110611cd857611cd86131c6565b60200260200101516001600160a01b031603611d075760405163d92e233d60e01b815260040160405180910390fd5b6000611d61858381518110611d1e57611d1e6131c6565b602002602001015160116000898681518110611d3c57611d3c6131c6565b602002602001015181526020019081526020016000205461246a90919063ffffffff16565b905060008111611d845760405163029819b760e01b815260040160405180910390fd5b611dda878381518110611d9957611d996131c6565b6020026020010151878481518110611db357611db36131c6565b6020026020010151878581518110611dcd57611dcd6131c6565b602002602001015161257e565b50611de4816131f2565b9050611cb2565b5060408051338152602081018490527fe239e1105983e10084987392ebe93c0f25988539d0d3af5edef1734822bb4054910160405180910390a1611e2e60018055565b5050505050565b6000828152601260205260408082205490517f6352211e000000000000000000000000000000000000000000000000000000008152600481018490526001600160a01b0390911690636352211e90602401602060405180830381865afa158015611ea3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ec7919061321e565b90506001600160a01b0381163303611f225760408051848152602081018490526001600160a01b038316917fd508d4942133028bc6500a17c5b7baee94401b9db22667af69c6e44f265a49c0910160405180910390a2505050565b6040516336b6b89560e01b815260040160405180910390fd5b6000611f47828461320b565b9392505050565b6060610af86001600160a01b03831660145b60606000611f6f83600261323b565b611f7a90600261320b565b67ffffffffffffffff811115611f9257611f92612cc8565b6040519080825280601f01601f191660200182016040528015611fbc576020820181803683370190505b5090507f300000000000000000000000000000000000000000000000000000000000000081600081518110611ff357611ff36131c6565b60200101906001600160f81b031916908160001a9053507f78000000000000000000000000000000000000000000000000000000000000008160018151811061203e5761203e6131c6565b60200101906001600160f81b031916908160001a905350600061206284600261323b565b61206d90600161320b565b90505b60018111156120f2577f303132333435363738396162636465660000000000000000000000000000000085600f16601081106120ae576120ae6131c6565b1a60f81b8282815181106120c4576120c46131c6565b60200101906001600160f81b031916908160001a90535060049490941c936120eb8161325a565b9050612070565b508315611f475760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016110dc565b61103a813361280c565b60026001540361219d5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016110dc565b6002600155565b60025460ff16156115d65760405162461bcd60e51b815260206004820152601060248201527f5061757361626c653a207061757365640000000000000000000000000000000060448201526064016110dc565b60006007544211801561220e5750600854600a5410155b801561223157506001601a5460ff16600281111561222e5761222e612f55565b14155b156122445761223e61268e565b50600090565b600754421180156122585750600854600a54105b801561227b57506000601a5460ff16600281111561227857612278612f55565b14155b156122865750600190565b50601a5460ff1690565b600061229a6121f7565b601a805460ff191660018360028111156122b6576122b6612f55565b0217905550600554421180156122ce57506006544211155b80156122f057506002601a5460ff1660028111156122ee576122ee612f55565b145b1561223e5750600190565b6000828152602081815260408083206001600160a01b038516845290915290205460ff1661102c576000828152602081815260408083206001600160a01b03851684529091529020805460ff191660011790556123553390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000828152602081815260408083206001600160a01b038516845290915290205460ff161561102c576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b61242061287f565b6002805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b6000611f47828461323b565b600f548290610bdf906201000090046001600160a01b031682846128d1565b600f546040517fdd62ed3e0000000000000000000000000000000000000000000000000000000081526001600160a01b0384811660048301523060248301528392620100009004169063dd62ed3e90604401602060405180830381865afa158015612504573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125289190613271565b1015612560576040517ffc8bf36c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600f5461102c906201000090046001600160a01b0316833084612962565b6001600160a01b0383166000908152601060209081526040808320858452909152812080548392906125b190849061320b565b9091555050604080516001600160a01b0385168152602081018490527f1bb460ccaaf70fbacfec17a376f8acbd278c1405590ffcc8ebe4b88daf4f64ad910160405180910390a16001600160a01b03831660009081526014602052604090205460ff16610bdf576004805460018181019092557f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b0180546001600160a01b03861673ffffffffffffffffffffffffffffffffffffffff1990911681179091556000908152601460205260409020805460ff19169091179055505050565b600f54610100900460ff1615156000036115d6576126c6620186a06126c0600c54600a5461246a90919063ffffffff16565b906129b9565b600d819055600a546126d7916129c5565b600b55600f805461010061ff00199091168117909155600254600d546115d6929091046001600160a01b031690612476565b6127116121a4565b6002805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25861244d3390565b600081815260156020526040812054600b5490919061276f90620186a0906126c090859061246a565b9050600b5461278982600e54611f3b90919063ffffffff16565b11156127c1576040517fb24d2a1c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80600e60008282546127d3919061320b565b90915550506003546001600160a01b03166000908152601760205260408120805483929061280290849061320b565b9091555050505050565b6000828152602081815260408083206001600160a01b038516845290915290205460ff1661102c5761283d81611f4e565b612848836020611f60565b6040516020016128599291906132ae565b60408051601f198184030181529082905262461bcd60e51b82526110dc9160040161332f565b60025460ff166115d65760405162461bcd60e51b815260206004820152601460248201527f5061757361626c653a206e6f742070617573656400000000000000000000000060448201526064016110dc565b6040516001600160a01b038316602482015260448101829052610bdf9084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166001600160e01b0319909316929092179091526129d1565b6040516001600160a01b03808516602483015283166044820152606481018290526129b39085907f23b872dd0000000000000000000000000000000000000000000000000000000090608401612916565b50505050565b6000611f478284613362565b6000611f478284613384565b6000612a26826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316612ab69092919063ffffffff16565b805190915015610bdf5780806020019051810190612a449190613397565b610bdf5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084016110dc565b6060612ac58484600085612acd565b949350505050565b606082471015612b455760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c000000000000000000000000000000000000000000000000000060648201526084016110dc565b600080866001600160a01b03168587604051612b6191906133b9565b60006040518083038185875af1925050503d8060008114612b9e576040519150601f19603f3d011682016040523d82523d6000602084013e612ba3565b606091505b5091509150612bb487838387612bbf565b979650505050505050565b60608315612c2e578251600003612c27576001600160a01b0385163b612c275760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016110dc565b5081612ac5565b612ac58383815115612c435781518083602001fd5b8060405162461bcd60e51b81526004016110dc919061332f565b600060208284031215612c6f57600080fd5b81356001600160e01b031981168114611f4757600080fd5b6001600160a01b038116811461103a57600080fd5b60008060408385031215612caf57600080fd5b8235612cba81612c87565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff81118282101715612d0157612d01612cc8565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715612d3057612d30612cc8565b604052919050565b600067ffffffffffffffff821115612d5257612d52612cc8565b5060051b60200190565b6000612d6f612d6a84612d38565b612d07565b8381529050602080820190600685901b840186811115612d8e57600080fd5b845b81811015612dcb5760408189031215612da95760008081fd5b612db1612cde565b813581528382013584820152845292820192604001612d90565b505050509392505050565b600060208284031215612de857600080fd5b813567ffffffffffffffff811115612dff57600080fd5b8201601f81018413612e1057600080fd5b612ac584823560208401612d5c565b600082601f830112612e3057600080fd5b81356020612e40612d6a83612d38565b82815260059290921b84018101918181019086841115612e5f57600080fd5b8286015b84811015612e7a5780358352918301918301612e63565b509695505050505050565b600060208284031215612e9757600080fd5b813567ffffffffffffffff811115612eae57600080fd5b612ac584828501612e1f565b600060208284031215612ecc57600080fd5b5035919050565b60008060408385031215612ee657600080fd5b823591506020830135612ef881612c87565b809150509250929050565b600080600060608486031215612f1857600080fd5b8335612f2381612c87565b95602085013595506040909401359392505050565b600060208284031215612f4a57600080fd5b8135611f4781612c87565b634e487b7160e01b600052602160045260246000fd5b6020810160038310612f8d57634e487b7160e01b600052602160045260246000fd5b91905290565b600060208284031215612fa557600080fd5b813560028110611f4757600080fd5b60008060408385031215612fc757600080fd5b50508035926020909101359150565b6020808252825182820181905260009190848201906040850190845b818110156130175783516001600160a01b031683529284019291840191600101612ff2565b50909695505050505050565b6000602080838503121561303657600080fd5b823567ffffffffffffffff81111561304d57600080fd5b8301601f8101851361305e57600080fd5b803561306c612d6a82612d38565b81815260069190911b8201830190838101908783111561308b57600080fd5b928401925b82841015612bb457604084890312156130a95760008081fd5b6130b1612cde565b84358152858501356130c281612c87565b8187015282526040939093019290840190613090565b600080600080608085870312156130ee57600080fd5b843567ffffffffffffffff8082111561310657600080fd5b818701915087601f83011261311a57600080fd5b8135602061312a612d6a83612d38565b82815260059290921b8401810191818101908b84111561314957600080fd5b948201945b8386101561317057853561316181612c87565b8252948201949082019061314e565b9850508801359250508082111561318657600080fd5b61319288838901612e1f565b945060408701359150808211156131a857600080fd5b506131b587828801612e1f565b949793965093946060013593505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201613204576132046131dc565b5060010190565b80820180821115610af857610af86131dc565b60006020828403121561323057600080fd5b8151611f4781612c87565b6000816000190483118215151615613255576132556131dc565b500290565b600081613269576132696131dc565b506000190190565b60006020828403121561328357600080fd5b5051919050565b60005b838110156132a557818101518382015260200161328d565b50506000910152565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516132e681601785016020880161328a565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000601791840191820152835161332381602884016020880161328a565b01602801949350505050565b602081526000825180602084015261334e81604085016020870161328a565b601f01601f19169190910160400192915050565b60008261337f57634e487b7160e01b600052601260045260246000fd5b500490565b81810381811115610af857610af86131dc565b6000602082840312156133a957600080fd5b81518015158114611f4757600080fd5b600082516133cb81846020870161328a565b919091019291505056fe241ecf16d79d0f8dbfb92cbc07fe17840425976cf0667f022fe9877caa831b08a26469706673582212206755286b687ec1990e896ffc2d6bdb45165b46baa25e7a2bc07683f30870ed0f64736f6c63430008100033241ecf16d79d0f8dbfb92cbc07fe17840425976cf0667f022fe9877caa831b08",
  "deployedBytecode": "0x60806040526004361061034e5760003560e01c8063685406ca116101bb578063b0100cf7116100f7578063d547741f11610095578063ec87621c1161006f578063ec87621c14610a07578063f35f206c14610a29578063f5e3dbdb14610a5f578063fd4234e814610a7f57600080fd5b8063d547741f14610993578063d84ed966146109b3578063e63ab1e9146109d357600080fd5b8063b68490bc116100d1578063b68490bc14610910578063bf3ea47214610930578063c71c0b401461095d578063d3717a021461097357600080fd5b8063b0100cf71461089e578063b0786fad146108ce578063b2ab56e1146108f057600080fd5b80638456cb5911610164578063953b8fb81161013e578063953b8fb814610823578063a217fddf14610839578063a4334daa1461084e578063a95185f01461086e57600080fd5b80638456cb59146107aa5780638c590917146107bf57806391d14854146107df57600080fd5b80637b8b29ac116101955780637b8b29ac146107515780637dd4ad2f146107675780637e3e010a1461079457600080fd5b8063685406ca146106ea5780636aba253c1461070a578063750d0b671461073157600080fd5b80632ec09d391161028a5780634e43ccb4116102335780635ba5f8dd1161020d5780635ba5f8dd1461067d5780635c975abb1461069d5780636605bfda146106b557806366d021cb146106d557600080fd5b80634e43ccb4146106275780634eb494821461063d5780635b7baf641461065d57600080fd5b80633f4ba83a116102645780633f4ba83a146105cc57806341e1c716146105e15780634c3adbfd1461060757600080fd5b80632ec09d391461056c5780632f2ff15d1461058c57806336568abe146105ac57600080fd5b8063134f275c116102f75780631a99dbaa116102d15780631a99dbaa146104c1578063248a9ca3146104d75780632669e8e3146105075780632b32e9ca1461053457600080fd5b8063134f275c1461045357806313e7b33e146104735780631583deb21461048957600080fd5b8063038b68dd11610328578063038b68dd146103ef5780630f01ec651461040f57806312498a701461042f57600080fd5b806301ffc9a71461035d578063026686ee1461039257806302866962146103cd57600080fd5b3661035857600080fd5b600080fd5b34801561036957600080fd5b5061037d610378366004612c5d565b610a95565b60405190151581526020015b60405180910390f35b34801561039e57600080fd5b5061037d6103ad366004612c9c565b601360209081526000928352604080842090915290825290205460ff1681565b3480156103d957600080fd5b506103ed6103e8366004612dd6565b610afe565b005b3480156103fb57600080fd5b506103ed61040a366004612c9c565b610be4565b34801561041b57600080fd5b506103ed61042a366004612e85565b610e1c565b34801561043b57600080fd5b5061044560065481565b604051908152602001610389565b34801561045f57600080fd5b506103ed61046e366004612e85565b610ebf565b34801561047f57600080fd5b5061044560055481565b34801561049557600080fd5b506003546104a9906001600160a01b031681565b6040516001600160a01b039091168152602001610389565b3480156104cd57600080fd5b5061044560075481565b3480156104e357600080fd5b506104456104f2366004612eba565b60009081526020819052604090206001015490565b34801561051357600080fd5b50610445610522366004612eba565b60116020526000908152604090205481565b34801561054057600080fd5b5061044561054f366004612c9c565b601060209081526000928352604080842090915290825290205481565b34801561057857600080fd5b506103ed610587366004612eba565b611030565b34801561059857600080fd5b506103ed6105a7366004612ed3565b61103d565b3480156105b857600080fd5b506103ed6105c7366004612ed3565b611062565b3480156105d857600080fd5b506103ed6110ef565b3480156105ed57600080fd5b50600f546104a9906201000090046001600160a01b031681565b34801561061357600080fd5b506103ed610622366004612c9c565b611121565b34801561063357600080fd5b50610445600b5481565b34801561064957600080fd5b506103ed610658366004612f03565b61129b565b34801561066957600080fd5b506103ed610678366004612eba565b61137f565b34801561068957600080fd5b506103ed610698366004612eba565b611389565b3480156106a957600080fd5b5060025460ff1661037d565b3480156106c157600080fd5b506103ed6106d0366004612f38565b6113ee565b3480156106e157600080fd5b506103ed61146f565b3480156106f657600080fd5b506103ed610705366004612dd6565b6115d8565b34801561071657600080fd5b50601a546107249060ff1681565b6040516103899190612f6b565b34801561073d57600080fd5b506103ed61074c366004612f93565b611682565b34801561075d57600080fd5b50610445600e5481565b34801561077357600080fd5b50610445610782366004612eba565b60156020526000908152604090205481565b3480156107a057600080fd5b5061044560085481565b3480156107b657600080fd5b506103ed611799565b3480156107cb57600080fd5b506103ed6107da366004612fb4565b6117cb565b3480156107eb57600080fd5b5061037d6107fa366004612ed3565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b34801561082f57600080fd5b5061044560095481565b34801561084557600080fd5b50610445600081565b34801561085a57600080fd5b506103ed610869366004612eba565b6117d6565b34801561087a57600080fd5b5061037d610889366004612eba565b60166020526000908152604090205460ff1681565b3480156108aa57600080fd5b5061037d6108b9366004612f38565b60146020526000908152604090205460ff1681565b3480156108da57600080fd5b506108e3611901565b6040516103899190612fd6565b3480156108fc57600080fd5b506103ed61090b366004613023565b611980565b34801561091c57600080fd5b506103ed61092b366004612f38565b611a89565b34801561093c57600080fd5b5061044561094b366004612f38565b60176020526000908152604090205481565b34801561096957600080fd5b50610445600a5481565b34801561097f57600080fd5b506103ed61098e366004612f38565b611b0b565b34801561099f57600080fd5b506103ed6109ae366004612ed3565b611b7c565b3480156109bf57600080fd5b506103ed6109ce3660046130d8565b611ba1565b3480156109df57600080fd5b506104457f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a81565b348015610a1357600080fd5b506104456000805160206133d683398151915281565b348015610a3557600080fd5b506104a9610a44366004612eba565b6012602052600090815260409020546001600160a01b031681565b348015610a6b57600080fd5b506103ed610a7a366004612fb4565b611e35565b348015610a8b57600080fd5b50610445600c5481565b60006001600160e01b031982167f7965db0b000000000000000000000000000000000000000000000000000000001480610af857507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b03198316145b92915050565b6000805160206133d6833981519152610b1681612141565b60005b8251811015610bdf57620186a0838281518110610b3857610b386131c6565b6020026020010151602001511115610b7c576040517f6db0b76a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b828181518110610b8e57610b8e6131c6565b60200260200101516020015160156000858481518110610bb057610bb06131c6565b60200260200101516000015181526020019081526020016000208190555080610bd8906131f2565b9050610b19565b505050565b6001600160a01b038216600090815260146020526040902054829060ff16610c1f5760405163e02a527360e01b815260040160405180910390fd5b600f5460ff16610c5b576040517f85cd26fd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610c6361214b565b610c6b6121a4565b610c736121f7565b601a805460ff19166001836002811115610c8f57610c8f612f55565b02179055506000601a5460ff166002811115610cad57610cad612f55565b14610ccb57604051638d05f51560e01b815260040160405180910390fd5b6001600160a01b038316600090815260136020908152604080832085845290915290205460ff1615610d29576040517f708d73f200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b03831660008181526010602090815260408083208684528083528184208054958552601384528285208886528452918420805460ff191660011790559091528190555b81811015610e1157600084815260126020526040908190205490517fe9c2e14b0000000000000000000000000000000000000000000000000000000081526001600160a01b0387811660048301529091169063e9c2e14b90602401600060405180830381600087803b158015610de857600080fd5b505af1158015610dfc573d6000803e3d6000fd5b5050505080610e0a906131f2565b9050610d73565b5050610bdf60018055565b6000805160206133d6833981519152610e3481612141565b600754421115610e575760405163488e80ff60e01b815260040160405180910390fd5b8151600214610e795760405163516e361d60e11b815260040160405180910390fd5b81600081518110610e8c57610e8c6131c6565b602002602001015160088190555081600181518110610ead57610ead6131c6565b60200260200101516009819055505050565b6000805160206133d6833981519152610ed781612141565b8151600314610ef95760405163516e361d60e11b815260040160405180910390fd5b600554421015610f935781600081518110610f1657610f166131c6565b602002602001015160058190555081600181518110610f3757610f376131c6565b6020026020010151600681905550610f8c82600281518110610f5b57610f5b6131c6565b602002602001015183600181518110610f7657610f766131c6565b6020026020010151611f3b90919063ffffffff16565b6007555050565b610f9b612290565b15610fb35781600181518110610f3757610f376131c6565b6006544210158015610fc6575060075442105b15610ffa57610f8c82600281518110610fe157610fe16131c6565b6020026020010151600654611f3b90919063ffffffff16565b6040517f553ae05400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050565b61103a3382610be4565b50565b60008281526020819052604090206001015461105881612141565b610bdf83836122fb565b6001600160a01b03811633146110e55760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c66000000000000000000000000000000000060648201526084015b60405180910390fd5b61102c8282612399565b7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a61111981612141565b61103a612418565b6001600160a01b038216600090815260146020526040902054829060ff1661115c5760405163e02a527360e01b815260040160405180910390fd5b61116461214b565b61116c6121a4565b6111746121f7565b601a805460ff1916600183600281111561119057611190612f55565b02179055506000601a5460ff1660028111156111ae576111ae612f55565b036111e5576040517fc6dfc20100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b0383166000908152601060209081526040808320858452825280832054601190925282205490919061121e908361246a565b6001600160a01b0386166000908152601060209081526040808320888452909152812055905061124e8582612476565b604080516001600160a01b0387168152602081018690527f2ef47cadc7e07ee6cea296446c8ca85ff6955693411d8868f7a04b6850034f08910160405180910390a15050610bdf60018055565b6112a361214b565b6112ab6121a4565b826001600160a01b0381166112d35760405163d92e233d60e01b815260040160405180910390fd5b6112db612290565b1515600114611316576040517fdf2d6b2800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008381526011602052604081205461132f908461246a565b9050600081116113525760405163029819b760e01b815260040160405180910390fd5b61135c3382612495565b80600a600082825461136e919061320b565b90915550610e11905085858561257e565b61103a3382611121565b6000805160206133d68339815191526113a181612141565b620186a08211156113c55760405163516e361d60e11b815260040160405180910390fd5b6005544211156113e85760405163488e80ff60e01b815260040160405180910390fd5b50600c55565b6000805160206133d683398151915261140681612141565b816001600160a01b03811661142e5760405163d92e233d60e01b815260040160405180910390fd5b5050600280546001600160a01b03909216610100027fffffffffffffffffffffff0000000000000000000000000000000000000000ff909216919091179055565b61147761214b565b61147f6121a4565b6003546001600160a01b031633146114aa576040516336b6b89560e01b815260040160405180910390fd5b6114b26121f7565b601a805460ff191660018360028111156114ce576114ce612f55565b0217905550600754421180156114fb57506000601a5460ff1660028111156114f8576114f8612f55565b14155b1561151957604051638d05f51560e01b815260040160405180910390fd5b6003546001600160a01b03166000908152601760205260409020548061156b576040517f569323d200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600354611581906001600160a01b031682612476565b600354604080516001600160a01b039092168252602082018390524282820152517f3df25ea0269b814fac9e2b26b3cc6971a48c7bdd35be407f416e44a16466325b9181900360600190a1506115d660018055565b565b6000805160206133d68339815191526115f081612141565b6005544211156116135760405163488e80ff60e01b815260040160405180910390fd5b60005b8251811015610bdf57828181518110611631576116316131c6565b60200260200101516020015160116000858481518110611653576116536131c6565b6020026020010151600001518152602001908152602001600020819055508061167b906131f2565b9050611616565b6000805160206133d683398151915261169a81612141565b6116a26121f7565b601a805460ff191660018360028111156116be576116be612f55565b0217905550600754421180156116eb57506002601a5460ff1660028111156116e8576116e8612f55565b14155b15611722576040517f61a7916f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b426006819055600755600082600181111561173f5761173f612f55565b0361175657601a805460ff1916905561102c61268e565b600182600181111561176a5761176a612f55565b03611780575050601a805460ff19166001179055565b60405163516e361d60e11b815260040160405180910390fd5b7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a6117c381612141565b61103a612709565b61102c33838361129b565b6000805160206133d68339815191526117ee81612141565b6117f66121a4565b6117fe6121f7565b601a805460ff1916600183600281111561181a5761181a612f55565b021790555060075442101561185b576040517fc8dcac8200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000601a5460ff16600281111561187457611874612f55565b1461189257604051638d05f51560e01b815260040160405180910390fd5b60008281526016602052604090205460ff1615156001036118df576040517f101f817a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000828152601660205260409020805460ff1916600117905561102c82612746565b60606000805160206133d683398151915261191b81612141565b6000600480548060200260200160405190810160405280929190818152602001828054801561197357602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611955575b5093965050505050505090565b6000805160206133d683398151915261199881612141565b60005b8251811015611a775760006001600160a01b03168382815181106119c1576119c16131c6565b6020026020010151602001516001600160a01b0316036119f45760405163d92e233d60e01b815260040160405180910390fd5b828181518110611a0657611a066131c6565b60200260200101516020015160126000858481518110611a2857611a286131c6565b602002602001015160000151815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b0316021790555080611a70906131f2565b905061199b565b5050600f805460ff1916600117905550565b6000805160206133d6833981519152611aa181612141565b816001600160a01b038116611ac95760405163d92e233d60e01b815260040160405180910390fd5b5050600f80546001600160a01b0390921662010000027fffffffffffffffffffff0000000000000000000000000000000000000000ffff909216919091179055565b6000805160206133d6833981519152611b2381612141565b816001600160a01b038116611b4b5760405163d92e233d60e01b815260040160405180910390fd5b50506003805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b600082815260208190526040902060010154611b9781612141565b610bdf8383612399565b6000805160206133d6833981519152611bb981612141565b611bc161214b565b611bc96121a4565b611bd16121f7565b601a805460ff19166001836002811115611bed57611bed612f55565b0217905550600554421080611c03575060075442115b80611c2557506002601a5460ff166002811115611c2257611c22612f55565b14155b15611c5c576040517f6c9007f600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b83518551141580611c6f57508251855114155b15611c8d5760405163516e361d60e11b815260040160405180910390fd5b611c973383612495565b81600a6000828254611ca9919061320b565b90915550600090505b8551811015611deb5760006001600160a01b0316868281518110611cd857611cd86131c6565b60200260200101516001600160a01b031603611d075760405163d92e233d60e01b815260040160405180910390fd5b6000611d61858381518110611d1e57611d1e6131c6565b602002602001015160116000898681518110611d3c57611d3c6131c6565b602002602001015181526020019081526020016000205461246a90919063ffffffff16565b905060008111611d845760405163029819b760e01b815260040160405180910390fd5b611dda878381518110611d9957611d996131c6565b6020026020010151878481518110611db357611db36131c6565b6020026020010151878581518110611dcd57611dcd6131c6565b602002602001015161257e565b50611de4816131f2565b9050611cb2565b5060408051338152602081018490527fe239e1105983e10084987392ebe93c0f25988539d0d3af5edef1734822bb4054910160405180910390a1611e2e60018055565b5050505050565b6000828152601260205260408082205490517f6352211e000000000000000000000000000000000000000000000000000000008152600481018490526001600160a01b0390911690636352211e90602401602060405180830381865afa158015611ea3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ec7919061321e565b90506001600160a01b0381163303611f225760408051848152602081018490526001600160a01b038316917fd508d4942133028bc6500a17c5b7baee94401b9db22667af69c6e44f265a49c0910160405180910390a2505050565b6040516336b6b89560e01b815260040160405180910390fd5b6000611f47828461320b565b9392505050565b6060610af86001600160a01b03831660145b60606000611f6f83600261323b565b611f7a90600261320b565b67ffffffffffffffff811115611f9257611f92612cc8565b6040519080825280601f01601f191660200182016040528015611fbc576020820181803683370190505b5090507f300000000000000000000000000000000000000000000000000000000000000081600081518110611ff357611ff36131c6565b60200101906001600160f81b031916908160001a9053507f78000000000000000000000000000000000000000000000000000000000000008160018151811061203e5761203e6131c6565b60200101906001600160f81b031916908160001a905350600061206284600261323b565b61206d90600161320b565b90505b60018111156120f2577f303132333435363738396162636465660000000000000000000000000000000085600f16601081106120ae576120ae6131c6565b1a60f81b8282815181106120c4576120c46131c6565b60200101906001600160f81b031916908160001a90535060049490941c936120eb8161325a565b9050612070565b508315611f475760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016110dc565b61103a813361280c565b60026001540361219d5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016110dc565b6002600155565b60025460ff16156115d65760405162461bcd60e51b815260206004820152601060248201527f5061757361626c653a207061757365640000000000000000000000000000000060448201526064016110dc565b60006007544211801561220e5750600854600a5410155b801561223157506001601a5460ff16600281111561222e5761222e612f55565b14155b156122445761223e61268e565b50600090565b600754421180156122585750600854600a54105b801561227b57506000601a5460ff16600281111561227857612278612f55565b14155b156122865750600190565b50601a5460ff1690565b600061229a6121f7565b601a805460ff191660018360028111156122b6576122b6612f55565b0217905550600554421180156122ce57506006544211155b80156122f057506002601a5460ff1660028111156122ee576122ee612f55565b145b1561223e5750600190565b6000828152602081815260408083206001600160a01b038516845290915290205460ff1661102c576000828152602081815260408083206001600160a01b03851684529091529020805460ff191660011790556123553390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000828152602081815260408083206001600160a01b038516845290915290205460ff161561102c576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b61242061287f565b6002805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b6000611f47828461323b565b600f548290610bdf906201000090046001600160a01b031682846128d1565b600f546040517fdd62ed3e0000000000000000000000000000000000000000000000000000000081526001600160a01b0384811660048301523060248301528392620100009004169063dd62ed3e90604401602060405180830381865afa158015612504573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125289190613271565b1015612560576040517ffc8bf36c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600f5461102c906201000090046001600160a01b0316833084612962565b6001600160a01b0383166000908152601060209081526040808320858452909152812080548392906125b190849061320b565b9091555050604080516001600160a01b0385168152602081018490527f1bb460ccaaf70fbacfec17a376f8acbd278c1405590ffcc8ebe4b88daf4f64ad910160405180910390a16001600160a01b03831660009081526014602052604090205460ff16610bdf576004805460018181019092557f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b0180546001600160a01b03861673ffffffffffffffffffffffffffffffffffffffff1990911681179091556000908152601460205260409020805460ff19169091179055505050565b600f54610100900460ff1615156000036115d6576126c6620186a06126c0600c54600a5461246a90919063ffffffff16565b906129b9565b600d819055600a546126d7916129c5565b600b55600f805461010061ff00199091168117909155600254600d546115d6929091046001600160a01b031690612476565b6127116121a4565b6002805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25861244d3390565b600081815260156020526040812054600b5490919061276f90620186a0906126c090859061246a565b9050600b5461278982600e54611f3b90919063ffffffff16565b11156127c1576040517fb24d2a1c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80600e60008282546127d3919061320b565b90915550506003546001600160a01b03166000908152601760205260408120805483929061280290849061320b565b9091555050505050565b6000828152602081815260408083206001600160a01b038516845290915290205460ff1661102c5761283d81611f4e565b612848836020611f60565b6040516020016128599291906132ae565b60408051601f198184030181529082905262461bcd60e51b82526110dc9160040161332f565b60025460ff166115d65760405162461bcd60e51b815260206004820152601460248201527f5061757361626c653a206e6f742070617573656400000000000000000000000060448201526064016110dc565b6040516001600160a01b038316602482015260448101829052610bdf9084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166001600160e01b0319909316929092179091526129d1565b6040516001600160a01b03808516602483015283166044820152606481018290526129b39085907f23b872dd0000000000000000000000000000000000000000000000000000000090608401612916565b50505050565b6000611f478284613362565b6000611f478284613384565b6000612a26826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316612ab69092919063ffffffff16565b805190915015610bdf5780806020019051810190612a449190613397565b610bdf5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084016110dc565b6060612ac58484600085612acd565b949350505050565b606082471015612b455760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c000000000000000000000000000000000000000000000000000060648201526084016110dc565b600080866001600160a01b03168587604051612b6191906133b9565b60006040518083038185875af1925050503d8060008114612b9e576040519150601f19603f3d011682016040523d82523d6000602084013e612ba3565b606091505b5091509150612bb487838387612bbf565b979650505050505050565b60608315612c2e578251600003612c27576001600160a01b0385163b612c275760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016110dc565b5081612ac5565b612ac58383815115612c435781518083602001fd5b8060405162461bcd60e51b81526004016110dc919061332f565b600060208284031215612c6f57600080fd5b81356001600160e01b031981168114611f4757600080fd5b6001600160a01b038116811461103a57600080fd5b60008060408385031215612caf57600080fd5b8235612cba81612c87565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff81118282101715612d0157612d01612cc8565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715612d3057612d30612cc8565b604052919050565b600067ffffffffffffffff821115612d5257612d52612cc8565b5060051b60200190565b6000612d6f612d6a84612d38565b612d07565b8381529050602080820190600685901b840186811115612d8e57600080fd5b845b81811015612dcb5760408189031215612da95760008081fd5b612db1612cde565b813581528382013584820152845292820192604001612d90565b505050509392505050565b600060208284031215612de857600080fd5b813567ffffffffffffffff811115612dff57600080fd5b8201601f81018413612e1057600080fd5b612ac584823560208401612d5c565b600082601f830112612e3057600080fd5b81356020612e40612d6a83612d38565b82815260059290921b84018101918181019086841115612e5f57600080fd5b8286015b84811015612e7a5780358352918301918301612e63565b509695505050505050565b600060208284031215612e9757600080fd5b813567ffffffffffffffff811115612eae57600080fd5b612ac584828501612e1f565b600060208284031215612ecc57600080fd5b5035919050565b60008060408385031215612ee657600080fd5b823591506020830135612ef881612c87565b809150509250929050565b600080600060608486031215612f1857600080fd5b8335612f2381612c87565b95602085013595506040909401359392505050565b600060208284031215612f4a57600080fd5b8135611f4781612c87565b634e487b7160e01b600052602160045260246000fd5b6020810160038310612f8d57634e487b7160e01b600052602160045260246000fd5b91905290565b600060208284031215612fa557600080fd5b813560028110611f4757600080fd5b60008060408385031215612fc757600080fd5b50508035926020909101359150565b6020808252825182820181905260009190848201906040850190845b818110156130175783516001600160a01b031683529284019291840191600101612ff2565b50909695505050505050565b6000602080838503121561303657600080fd5b823567ffffffffffffffff81111561304d57600080fd5b8301601f8101851361305e57600080fd5b803561306c612d6a82612d38565b81815260069190911b8201830190838101908783111561308b57600080fd5b928401925b82841015612bb457604084890312156130a95760008081fd5b6130b1612cde565b84358152858501356130c281612c87565b8187015282526040939093019290840190613090565b600080600080608085870312156130ee57600080fd5b843567ffffffffffffffff8082111561310657600080fd5b818701915087601f83011261311a57600080fd5b8135602061312a612d6a83612d38565b82815260059290921b8401810191818101908b84111561314957600080fd5b948201945b8386101561317057853561316181612c87565b8252948201949082019061314e565b9850508801359250508082111561318657600080fd5b61319288838901612e1f565b945060408701359150808211156131a857600080fd5b506131b587828801612e1f565b949793965093946060013593505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201613204576132046131dc565b5060010190565b80820180821115610af857610af86131dc565b60006020828403121561323057600080fd5b8151611f4781612c87565b6000816000190483118215151615613255576132556131dc565b500290565b600081613269576132696131dc565b506000190190565b60006020828403121561328357600080fd5b5051919050565b60005b838110156132a557818101518382015260200161328d565b50506000910152565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516132e681601785016020880161328a565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000601791840191820152835161332381602884016020880161328a565b01602801949350505050565b602081526000825180602084015261334e81604085016020870161328a565b601f01601f19169190910160400192915050565b60008261337f57634e487b7160e01b600052601260045260246000fd5b500490565b81810381811115610af857610af86131dc565b6000602082840312156133a957600080fd5b81518015158114611f4757600080fd5b600082516133cb81846020870161328a565b919091019291505056fe241ecf16d79d0f8dbfb92cbc07fe17840425976cf0667f022fe9877caa831b08a26469706673582212206755286b687ec1990e896ffc2d6bdb45165b46baa25e7a2bc07683f30870ed0f64736f6c63430008100033",
  "devdoc": {
    "custom:security-contact": "hello@moat.com",
    "details": "This implements ERC-721 NFT as the rewards (NFT perks) to be minted to the funders.",
    "kind": "dev",
    "methods": {
      "approveMilestoneAndReleaseFund(uint256)": {
        "details": "milestone can be approved in any order",
        "params": {
          "_milestoneNumber": "the milestone to be approved"
        }
      },
      "claimNft(uint256)": {
        "details": "NFT with tokenId = _tier is transfer to the connected wallet",
        "params": {
          "_tier": "funding category"
        }
      },
      "claimNftFor(address,uint256)": {
        "details": "Claim NFT for another _funder. NFT with tokenId = _tier is transfer to the _funder",
        "params": {
          "_funder": "the funder address",
          "_tier": "funding category"
        }
      },
      "claimRefund(uint256)": {
        "details": "Claim a refund for the connected wallet",
        "params": {
          "_tier": "funding category"
        }
      },
      "claimRefundFor(address,uint256)": {
        "details": "Claim a refund on behalf of a funder",
        "params": {
          "_funder": "the funder address",
          "_tier": "funding category"
        }
      },
      "closeFundingRound(uint8)": {
        "details": "reason for closing the campaign is required",
        "params": {
          "_reasonForEnding": "enum only accepts TARGETMET or FAILURE"
        }
      },
      "contribute(uint256,uint256)": {
        "details": "only accepts ERC-20 deposit when campaign is open",
        "params": {
          "_quantity": "number of tiers",
          "_tier": "funding category"
        }
      },
      "contributeOnBehalfOf(address,uint256,uint256)": {
        "details": "only accepts ERC-20 deposit when campaign is open",
        "params": {
          "_funder": "the contributor address",
          "_quantity": "number of tiers",
          "_tier": "funding category"
        }
      },
      "fiatContributeOnBehalfOf(address[],uint256[],uint256[],uint256)": {
        "details": "only accepts ERC-20 deposit before campaign decision time passed",
        "params": {
          "_funders": "array of funder addresses",
          "_quantities": "array of number of tiers purchased by each funder All the arrays must be the same length",
          "_tiers": "array of funding category"
        }
      },
      "getFundersAddresses()": {
        "details": "returns the array of all funder addresses"
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "isOwnerOf(uint256,uint256)": {
        "details": "Proves that a caller owns a particular NFT token by emitting TheOwnerIs event",
        "params": {
          "_tier": "funding or perks category",
          "_tokenId": "id of the nft token"
        }
      },
      "pause()": {
        "details": "Pauses the contract"
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "setAllowedToken(address)": {
        "details": "sets the allowed ERC20 tokens for the campaign"
      },
      "setBusinessAddress(address)": {
        "details": "Set the wallet address of the business raising fund through this contract"
      },
      "setCampaignAndDecisionPeriod(uint256[])": {
        "params": {
          "_campaignTimesAndDecision": "array of length 3."
        }
      },
      "setFundingTiersAndCosts((uint256,uint256)[])": {
        "details": "sets the available tiers and their corresponding prices"
      },
      "setMilestones((uint256,uint256)[])": {
        "details": "sets the milestones"
      },
      "setMoatFee(uint256)": {
        "params": {
          "_feeFraction": "e.g 5% => 5 * (10**5) / 100 = 5000"
        }
      },
      "setNftPerkContracts((uint256,address)[])": {
        "details": "sets the NFT perks contracts"
      },
      "setTargetAmounts(uint256[])": {
        "params": {
          "_amountsToBeRaised": "array of length 2."
        }
      },
      "setTreasuryAddress(address)": {
        "details": "sets the MOAT treasury address"
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "unpause()": {
        "details": "Unpauses the contract"
      },
      "withdrawFundRaised()": {
        "details": "Only the authorised business wallet can withdraw"
      }
    },
    "title": "MOAT Crowd-funding Contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "approveMilestoneAndReleaseFund(uint256)": {
        "notice": "Manager role can approve the milestones at any time"
      },
      "claimNft(uint256)": {
        "notice": "The funders can claim NFT perks when the campaign is successful"
      },
      "claimNftFor(address,uint256)": {
        "notice": "The funders can claim NFT perks when the campaign is successful"
      },
      "claimRefund(uint256)": {
        "notice": "The funders can claim refund only when the campaign failed"
      },
      "claimRefundFor(address,uint256)": {
        "notice": "The funders can claim refund only when the campaign failed"
      },
      "closeFundingRound(uint8)": {
        "notice": "Manager role can close the funding round before the decision time passed"
      },
      "contribute(uint256,uint256)": {
        "notice": "Contribute fund from the connected wallet for the open campaign"
      },
      "contributeOnBehalfOf(address,uint256,uint256)": {
        "notice": "Contribute fund on behalf of another address for the open campaign."
      },
      "fiatContributeOnBehalfOf(address[],uint256[],uint256[],uint256)": {
        "notice": "Manager role can contribute fund on behalf of other addresses before decision time passed."
      },
      "withdrawFundRaised()": {
        "notice": "Funds are released to the authorised business wallet based on the milestone schedule."
      }
    },
    "notice": "This contract is for crowd-funding a business by interested parties and to release funds to the business in a transparent but monitored way. Rewards, in form of NFTs are distributed to funders after the funding round has been declared successful.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 24,
        "contract": "contracts/FundABusiness.sol:FundABusiness",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)"
      },
      {
        "astId": 507,
        "contract": "contracts/FundABusiness.sol:FundABusiness",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 406,
        "contract": "contracts/FundABusiness.sol:FundABusiness",
        "label": "_paused",
        "offset": 0,
        "slot": "2",
        "type": "t_bool"
      },
      {
        "astId": 3028,
        "contract": "contracts/FundABusiness.sol:FundABusiness",
        "label": "treasuryAddress",
        "offset": 1,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 3030,
        "contract": "contracts/FundABusiness.sol:FundABusiness",
        "label": "businessAddress",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 3033,
        "contract": "contracts/FundABusiness.sol:FundABusiness",
        "label": "fundersAddresses",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 3035,
        "contract": "contracts/FundABusiness.sol:FundABusiness",
        "label": "campaignStartTime",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 3037,
        "contract": "contracts/FundABusiness.sol:FundABusiness",
        "label": "campaignEndTime",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 3039,
        "contract": "contracts/FundABusiness.sol:FundABusiness",
        "label": "campaignDecisionTime",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 3041,
        "contract": "contracts/FundABusiness.sol:FundABusiness",
        "label": "minTargetAmount",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 3043,
        "contract": "contracts/FundABusiness.sol:FundABusiness",
        "label": "targetAmount",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 3045,
        "contract": "contracts/FundABusiness.sol:FundABusiness",
        "label": "fundRaised",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 3047,
        "contract": "contracts/FundABusiness.sol:FundABusiness",
        "label": "fundRaisedMinusFee",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 3049,
        "contract": "contracts/FundABusiness.sol:FundABusiness",
        "label": "moatFeeNumerator",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 3051,
        "contract": "contracts/FundABusiness.sol:FundABusiness",
        "label": "moatFee",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 3053,
        "contract": "contracts/FundABusiness.sol:FundABusiness",
        "label": "cumFundReleased",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 3056,
        "contract": "contracts/FundABusiness.sol:FundABusiness",
        "label": "areNftTokensSet",
        "offset": 0,
        "slot": "15",
        "type": "t_bool"
      },
      {
        "astId": 3059,
        "contract": "contracts/FundABusiness.sol:FundABusiness",
        "label": "isFeeTaken",
        "offset": 1,
        "slot": "15",
        "type": "t_bool"
      },
      {
        "astId": 3062,
        "contract": "contracts/FundABusiness.sol:FundABusiness",
        "label": "allowedErc20Token",
        "offset": 2,
        "slot": "15",
        "type": "t_contract(IERC20)628"
      },
      {
        "astId": 3068,
        "contract": "contracts/FundABusiness.sol:FundABusiness",
        "label": "tierBalanceOf",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 3072,
        "contract": "contracts/FundABusiness.sol:FundABusiness",
        "label": "tierCost",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 3077,
        "contract": "contracts/FundABusiness.sol:FundABusiness",
        "label": "nftContractOf",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_uint256,t_contract(INftPerks)4890)"
      },
      {
        "astId": 3083,
        "contract": "contracts/FundABusiness.sol:FundABusiness",
        "label": "hasClaimedNft",
        "offset": 0,
        "slot": "19",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))"
      },
      {
        "astId": 3087,
        "contract": "contracts/FundABusiness.sol:FundABusiness",
        "label": "isAFunder",
        "offset": 0,
        "slot": "20",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 3091,
        "contract": "contracts/FundABusiness.sol:FundABusiness",
        "label": "fractionOfMilestone",
        "offset": 0,
        "slot": "21",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 3095,
        "contract": "contracts/FundABusiness.sol:FundABusiness",
        "label": "isMilestoneApproved",
        "offset": 0,
        "slot": "22",
        "type": "t_mapping(t_uint256,t_bool)"
      },
      {
        "astId": 3099,
        "contract": "contracts/FundABusiness.sol:FundABusiness",
        "label": "businessBalance",
        "offset": 0,
        "slot": "23",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3103,
        "contract": "contracts/FundABusiness.sol:FundABusiness",
        "label": "fundingTiersCosts",
        "offset": 0,
        "slot": "24",
        "type": "t_array(t_struct(FundingTierCost)4594_storage)dyn_storage"
      },
      {
        "astId": 3107,
        "contract": "contracts/FundABusiness.sol:FundABusiness",
        "label": "nftTierContracts",
        "offset": 0,
        "slot": "25",
        "type": "t_array(t_struct(NftTierContract)4599_storage)dyn_storage"
      },
      {
        "astId": 3110,
        "contract": "contracts/FundABusiness.sol:FundABusiness",
        "label": "verdict",
        "offset": 0,
        "slot": "26",
        "type": "t_enum(CampaignState)4608"
      },
      {
        "astId": 3113,
        "contract": "contracts/FundABusiness.sol:FundABusiness",
        "label": "reasonForEnding",
        "offset": 1,
        "slot": "26",
        "type": "t_enum(EndCampaign)4611"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(FundingTierCost)4594_storage)dyn_storage": {
        "base": "t_struct(FundingTierCost)4594_storage",
        "encoding": "dynamic_array",
        "label": "struct IFundABusiness.FundingTierCost[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(NftTierContract)4599_storage)dyn_storage": {
        "base": "t_struct(NftTierContract)4599_storage",
        "encoding": "dynamic_array",
        "label": "struct IFundABusiness.NftTierContract[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)628": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(INftPerks)4890": {
        "encoding": "inplace",
        "label": "contract INftPerks",
        "numberOfBytes": "20"
      },
      "t_enum(CampaignState)4608": {
        "encoding": "inplace",
        "label": "enum IFundABusiness.CampaignState",
        "numberOfBytes": "1"
      },
      "t_enum(EndCampaign)4611": {
        "encoding": "inplace",
        "label": "enum IFundABusiness.EndCampaign",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)19_storage"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_contract(INftPerks)4890)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => contract INftPerks)",
        "numberOfBytes": "32",
        "value": "t_contract(INftPerks)4890"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(FundingTierCost)4594_storage": {
        "encoding": "inplace",
        "label": "struct IFundABusiness.FundingTierCost",
        "members": [
          {
            "astId": 4591,
            "contract": "contracts/FundABusiness.sol:FundABusiness",
            "label": "fundingTier",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4593,
            "contract": "contracts/FundABusiness.sol:FundABusiness",
            "label": "tierCost",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(NftTierContract)4599_storage": {
        "encoding": "inplace",
        "label": "struct IFundABusiness.NftTierContract",
        "members": [
          {
            "astId": 4596,
            "contract": "contracts/FundABusiness.sol:FundABusiness",
            "label": "fundingTier",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4598,
            "contract": "contracts/FundABusiness.sol:FundABusiness",
            "label": "nftTokenAddress",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(RoleData)19_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 16,
            "contract": "contracts/FundABusiness.sol:FundABusiness",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 18,
            "contract": "contracts/FundABusiness.sol:FundABusiness",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}